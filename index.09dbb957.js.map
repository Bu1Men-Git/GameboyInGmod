{"mappings":"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","sources":["<anon>","node_modules/serverboy/src/gameboy_core/architecture/ffxxDump.js","node_modules/serverboy/src/gameboy_core/architecture/OPCODE.js","node_modules/serverboy/src/gameboy_core/architecture/CBOPCODE.js","node_modules/serverboy/src/gameboy_core/architecture/TICKTable.js","node_modules/serverboy/src/gameboy_core/architecture/SecondaryTICKTable.js","src/index.ts","node_modules/@parcel/node-resolver-core/lib/_empty.js","node_modules/serverboy/src/interface.js","node_modules/process/browser.js","node_modules/serverboy/src/gameboy_core/gameboy.js","node_modules/serverboy/src/gameboy_core/instance.js","node_modules/serverboy/src/gameboy_core/settings.js","node_modules/serverboy/src/gameboy_core/saveState.js","node_modules/ws/browser.js","node_modules/buffer/index.js","node_modules/base64-js/index.js","node_modules/ieee754/index.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire8f79\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire8f79\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"gOdab\", function(module, exports) {\n//Dump of the post-BOOT I/O register state (From gambatte):\nmodule.exports = [\n    0x0F,\n    0x00,\n    0x7C,\n    0xFF,\n    0x00,\n    0x00,\n    0x00,\n    0xF8,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0x01,\n    0x80,\n    0xBF,\n    0xF3,\n    0xFF,\n    0xBF,\n    0xFF,\n    0x3F,\n    0x00,\n    0xFF,\n    0xBF,\n    0x7F,\n    0xFF,\n    0x9F,\n    0xFF,\n    0xBF,\n    0xFF,\n    0xFF,\n    0x00,\n    0x00,\n    0xBF,\n    0x77,\n    0xF3,\n    0xF1,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0x00,\n    0xFF,\n    0x00,\n    0xFF,\n    0x00,\n    0xFF,\n    0x00,\n    0xFF,\n    0x00,\n    0xFF,\n    0x00,\n    0xFF,\n    0x00,\n    0xFF,\n    0x00,\n    0xFF,\n    0x91,\n    0x80,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0xFC,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0xFF,\n    0x7E,\n    0xFF,\n    0xFE,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0x3E,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xC0,\n    0xFF,\n    0xC1,\n    0x00,\n    0xFE,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xF8,\n    0xFF,\n    0x00,\n    0x00,\n    0x00,\n    0x8F,\n    0x00,\n    0x00,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xFF,\n    0xCE,\n    0xED,\n    0x66,\n    0x66,\n    0xCC,\n    0x0D,\n    0x00,\n    0x0B,\n    0x03,\n    0x73,\n    0x00,\n    0x83,\n    0x00,\n    0x0C,\n    0x00,\n    0x0D,\n    0x00,\n    0x08,\n    0x11,\n    0x1F,\n    0x88,\n    0x89,\n    0x00,\n    0x0E,\n    0xDC,\n    0xCC,\n    0x6E,\n    0xE6,\n    0xDD,\n    0xDD,\n    0xD9,\n    0x99,\n    0xBB,\n    0xBB,\n    0x67,\n    0x63,\n    0x6E,\n    0x0E,\n    0xEC,\n    0xCC,\n    0xDD,\n    0xDC,\n    0x99,\n    0x9F,\n    0xBB,\n    0xB9,\n    0x33,\n    0x3E,\n    0x45,\n    0xEC,\n    0x52,\n    0xFA,\n    0x08,\n    0xB7,\n    0x07,\n    0x5D,\n    0x01,\n    0xFD,\n    0xC0,\n    0xFF,\n    0x08,\n    0xFC,\n    0x00,\n    0xE5,\n    0x0B,\n    0xF8,\n    0xC2,\n    0xCE,\n    0xF4,\n    0xF9,\n    0x0F,\n    0x7F,\n    0x45,\n    0x6D,\n    0x3D,\n    0xFE,\n    0x46,\n    0x97,\n    0x33,\n    0x5E,\n    0x08,\n    0xEF,\n    0xF1,\n    0xFF,\n    0x86,\n    0x83,\n    0x24,\n    0x74,\n    0x12,\n    0xFC,\n    0x00,\n    0x9F,\n    0xB4,\n    0xB7,\n    0x06,\n    0xD5,\n    0xD0,\n    0x7A,\n    0x00,\n    0x9E,\n    0x04,\n    0x5F,\n    0x41,\n    0x2F,\n    0x1D,\n    0x77,\n    0x36,\n    0x75,\n    0x81,\n    0xAA,\n    0x70,\n    0x3A,\n    0x98,\n    0xD1,\n    0x71,\n    0x02,\n    0x4D,\n    0x01,\n    0xC1,\n    0xFF,\n    0x0D,\n    0x00,\n    0xD3,\n    0x05,\n    0xF9,\n    0x00,\n    0x0B,\n    0x00\n];\n\n});\n\nparcelRegister(\"kE7dz\", function(module, exports) {\nvar $03e0fc754daed1f2$var$OPCODE = [\n    //NOP\n    //#0x00:\n    function(parentObj) {\n    //Do Nothing...\n    },\n    //LD BC, nn\n    //#0x01:\n    function(parentObj) {\n        parentObj.registerC = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.registerB = parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF);\n        parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n    },\n    //LD (BC), A\n    //#0x02:\n    function(parentObj) {\n        parentObj.memoryWrite(parentObj.registerB << 8 | parentObj.registerC, parentObj.registerA);\n    },\n    //INC BC\n    //#0x03:\n    function(parentObj) {\n        var temp_var = (parentObj.registerB << 8 | parentObj.registerC) + 1;\n        parentObj.registerB = temp_var >> 8 & 0xFF;\n        parentObj.registerC = temp_var & 0xFF;\n    },\n    //INC B\n    //#0x04:\n    function(parentObj) {\n        parentObj.registerB = parentObj.registerB + 1 & 0xFF;\n        parentObj.FZero = parentObj.registerB == 0;\n        parentObj.FHalfCarry = (parentObj.registerB & 0xF) == 0;\n        parentObj.FSubtract = false;\n    },\n    //DEC B\n    //#0x05:\n    function(parentObj) {\n        parentObj.registerB = parentObj.registerB - 1 & 0xFF;\n        parentObj.FZero = parentObj.registerB == 0;\n        parentObj.FHalfCarry = (parentObj.registerB & 0xF) == 0xF;\n        parentObj.FSubtract = true;\n    },\n    //LD B, n\n    //#0x06:\n    function(parentObj) {\n        parentObj.registerB = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n    },\n    //RLCA\n    //#0x07:\n    function(parentObj) {\n        parentObj.FCarry = parentObj.registerA > 0x7F;\n        parentObj.registerA = parentObj.registerA << 1 & 0xFF | parentObj.registerA >> 7;\n        parentObj.FZero = parentObj.FSubtract = parentObj.FHalfCarry = false;\n    },\n    //LD (nn), SP\n    //#0x08:\n    function(parentObj) {\n        var temp_var = parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n        parentObj.memoryWrite(temp_var, parentObj.stackPointer & 0xFF);\n        parentObj.memoryWrite(temp_var + 1 & 0xFFFF, parentObj.stackPointer >> 8);\n    },\n    //ADD HL, BC\n    //#0x09:\n    function(parentObj) {\n        var dirtySum = parentObj.registersHL + (parentObj.registerB << 8 | parentObj.registerC);\n        parentObj.FHalfCarry = (parentObj.registersHL & 0xFFF) > (dirtySum & 0xFFF);\n        parentObj.FCarry = dirtySum > 0xFFFF;\n        parentObj.registersHL = dirtySum & 0xFFFF;\n        parentObj.FSubtract = false;\n    },\n    //LD A, (BC)\n    //#0x0A:\n    function(parentObj) {\n        parentObj.registerA = parentObj.memoryRead(parentObj.registerB << 8 | parentObj.registerC);\n    },\n    //DEC BC\n    //#0x0B:\n    function(parentObj) {\n        var temp_var = (parentObj.registerB << 8 | parentObj.registerC) - 1 & 0xFFFF;\n        parentObj.registerB = temp_var >> 8;\n        parentObj.registerC = temp_var & 0xFF;\n    },\n    //INC C\n    //#0x0C:\n    function(parentObj) {\n        parentObj.registerC = parentObj.registerC + 1 & 0xFF;\n        parentObj.FZero = parentObj.registerC == 0;\n        parentObj.FHalfCarry = (parentObj.registerC & 0xF) == 0;\n        parentObj.FSubtract = false;\n    },\n    //DEC C\n    //#0x0D:\n    function(parentObj) {\n        parentObj.registerC = parentObj.registerC - 1 & 0xFF;\n        parentObj.FZero = parentObj.registerC == 0;\n        parentObj.FHalfCarry = (parentObj.registerC & 0xF) == 0xF;\n        parentObj.FSubtract = true;\n    },\n    //LD C, n\n    //#0x0E:\n    function(parentObj) {\n        parentObj.registerC = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n    },\n    //RRCA\n    //#0x0F:\n    function(parentObj) {\n        parentObj.registerA = parentObj.registerA >> 1 | (parentObj.registerA & 1) << 7;\n        parentObj.FCarry = parentObj.registerA > 0x7F;\n        parentObj.FZero = parentObj.FSubtract = parentObj.FHalfCarry = false;\n    },\n    //STOP\n    //#0x10:\n    function(parentObj) {\n        if (parentObj.cGBC) {\n            if ((parentObj.memory[0xFF4D] & 0x01) == 0x01) {\n                if (parentObj.memory[0xFF4D] > 0x7F) {\n                    // console.log(\"Going into single clock speed mode.\", 0);\n                    parentObj.doubleSpeedShifter = 0;\n                    parentObj.memory[0xFF4D] &= 0x7F; //Clear the double speed mode flag.\n                } else {\n                    // console.log(\"Going into double clock speed mode.\", 0);\n                    parentObj.doubleSpeedShifter = 1;\n                    parentObj.memory[0xFF4D] |= 0x80; //Set the double speed mode flag.\n                }\n                parentObj.memory[0xFF4D] &= 0xFE; //Reset the request bit.\n            } else parentObj.handleSTOP();\n        } else parentObj.handleSTOP();\n    },\n    //LD DE, nn\n    //#0x11:\n    function(parentObj) {\n        parentObj.registerE = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.registerD = parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF);\n        parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n    },\n    //LD (DE), A\n    //#0x12:\n    function(parentObj) {\n        parentObj.memoryWrite(parentObj.registerD << 8 | parentObj.registerE, parentObj.registerA);\n    },\n    //INC DE\n    //#0x13:\n    function(parentObj) {\n        var temp_var = (parentObj.registerD << 8 | parentObj.registerE) + 1;\n        parentObj.registerD = temp_var >> 8 & 0xFF;\n        parentObj.registerE = temp_var & 0xFF;\n    },\n    //INC D\n    //#0x14:\n    function(parentObj) {\n        parentObj.registerD = parentObj.registerD + 1 & 0xFF;\n        parentObj.FZero = parentObj.registerD == 0;\n        parentObj.FHalfCarry = (parentObj.registerD & 0xF) == 0;\n        parentObj.FSubtract = false;\n    },\n    //DEC D\n    //#0x15:\n    function(parentObj) {\n        parentObj.registerD = parentObj.registerD - 1 & 0xFF;\n        parentObj.FZero = parentObj.registerD == 0;\n        parentObj.FHalfCarry = (parentObj.registerD & 0xF) == 0xF;\n        parentObj.FSubtract = true;\n    },\n    //LD D, n\n    //#0x16:\n    function(parentObj) {\n        parentObj.registerD = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n    },\n    //RLA\n    //#0x17:\n    function(parentObj) {\n        var carry_flag = parentObj.FCarry ? 1 : 0;\n        parentObj.FCarry = parentObj.registerA > 0x7F;\n        parentObj.registerA = parentObj.registerA << 1 & 0xFF | carry_flag;\n        parentObj.FZero = parentObj.FSubtract = parentObj.FHalfCarry = false;\n    },\n    //JR n\n    //#0x18:\n    function(parentObj) {\n        parentObj.programCounter = parentObj.programCounter + (parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24 >> 24) + 1 & 0xFFFF;\n    },\n    //ADD HL, DE\n    //#0x19:\n    function(parentObj) {\n        var dirtySum = parentObj.registersHL + (parentObj.registerD << 8 | parentObj.registerE);\n        parentObj.FHalfCarry = (parentObj.registersHL & 0xFFF) > (dirtySum & 0xFFF);\n        parentObj.FCarry = dirtySum > 0xFFFF;\n        parentObj.registersHL = dirtySum & 0xFFFF;\n        parentObj.FSubtract = false;\n    },\n    //LD A, (DE)\n    //#0x1A:\n    function(parentObj) {\n        parentObj.registerA = parentObj.memoryRead(parentObj.registerD << 8 | parentObj.registerE);\n    },\n    //DEC DE\n    //#0x1B:\n    function(parentObj) {\n        var temp_var = (parentObj.registerD << 8 | parentObj.registerE) - 1 & 0xFFFF;\n        parentObj.registerD = temp_var >> 8;\n        parentObj.registerE = temp_var & 0xFF;\n    },\n    //INC E\n    //#0x1C:\n    function(parentObj) {\n        parentObj.registerE = parentObj.registerE + 1 & 0xFF;\n        parentObj.FZero = parentObj.registerE == 0;\n        parentObj.FHalfCarry = (parentObj.registerE & 0xF) == 0;\n        parentObj.FSubtract = false;\n    },\n    //DEC E\n    //#0x1D:\n    function(parentObj) {\n        parentObj.registerE = parentObj.registerE - 1 & 0xFF;\n        parentObj.FZero = parentObj.registerE == 0;\n        parentObj.FHalfCarry = (parentObj.registerE & 0xF) == 0xF;\n        parentObj.FSubtract = true;\n    },\n    //LD E, n\n    //#0x1E:\n    function(parentObj) {\n        parentObj.registerE = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n    },\n    //RRA\n    //#0x1F:\n    function(parentObj) {\n        var carry_flag = parentObj.FCarry ? 0x80 : 0;\n        parentObj.FCarry = (parentObj.registerA & 1) == 1;\n        parentObj.registerA = parentObj.registerA >> 1 | carry_flag;\n        parentObj.FZero = parentObj.FSubtract = parentObj.FHalfCarry = false;\n    },\n    //JR NZ, n\n    //#0x20:\n    function(parentObj) {\n        if (!parentObj.FZero) {\n            parentObj.programCounter = parentObj.programCounter + (parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24 >> 24) + 1 & 0xFFFF;\n            parentObj.CPUTicks += 4;\n        } else parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n    },\n    //LD HL, nn\n    //#0x21:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n    },\n    //LDI (HL), A\n    //#0x22:\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerA);\n        parentObj.registersHL = parentObj.registersHL + 1 & 0xFFFF;\n    },\n    //INC HL\n    //#0x23:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registersHL + 1 & 0xFFFF;\n    },\n    //INC H\n    //#0x24:\n    function(parentObj) {\n        var H = (parentObj.registersHL >> 8) + 1 & 0xFF;\n        parentObj.FZero = H == 0;\n        parentObj.FHalfCarry = (H & 0xF) == 0;\n        parentObj.FSubtract = false;\n        parentObj.registersHL = H << 8 | parentObj.registersHL & 0xFF;\n    },\n    //DEC H\n    //#0x25:\n    function(parentObj) {\n        var H = (parentObj.registersHL >> 8) - 1 & 0xFF;\n        parentObj.FZero = H == 0;\n        parentObj.FHalfCarry = (H & 0xF) == 0xF;\n        parentObj.FSubtract = true;\n        parentObj.registersHL = H << 8 | parentObj.registersHL & 0xFF;\n    },\n    //LD H, n\n    //#0x26:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 8 | parentObj.registersHL & 0xFF;\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n    },\n    //DAA\n    //#0x27:\n    function(parentObj) {\n        if (!parentObj.FSubtract) {\n            if (parentObj.FCarry || parentObj.registerA > 0x99) {\n                parentObj.registerA = parentObj.registerA + 0x60 & 0xFF;\n                parentObj.FCarry = true;\n            }\n            if (parentObj.FHalfCarry || (parentObj.registerA & 0xF) > 0x9) {\n                parentObj.registerA = parentObj.registerA + 0x06 & 0xFF;\n                parentObj.FHalfCarry = false;\n            }\n        } else if (parentObj.FCarry && parentObj.FHalfCarry) {\n            parentObj.registerA = parentObj.registerA + 0x9A & 0xFF;\n            parentObj.FHalfCarry = false;\n        } else if (parentObj.FCarry) parentObj.registerA = parentObj.registerA + 0xA0 & 0xFF;\n        else if (parentObj.FHalfCarry) {\n            parentObj.registerA = parentObj.registerA + 0xFA & 0xFF;\n            parentObj.FHalfCarry = false;\n        }\n        parentObj.FZero = parentObj.registerA == 0;\n    },\n    //JR Z, n\n    //#0x28:\n    function(parentObj) {\n        if (parentObj.FZero) {\n            parentObj.programCounter = parentObj.programCounter + (parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24 >> 24) + 1 & 0xFFFF;\n            parentObj.CPUTicks += 4;\n        } else parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n    },\n    //ADD HL, HL\n    //#0x29:\n    function(parentObj) {\n        parentObj.FHalfCarry = (parentObj.registersHL & 0xFFF) > 0x7FF;\n        parentObj.FCarry = parentObj.registersHL > 0x7FFF;\n        parentObj.registersHL = parentObj.registersHL << 1 & 0xFFFF;\n        parentObj.FSubtract = false;\n    },\n    //LDI A, (HL)\n    //#0x2A:\n    function(parentObj) {\n        parentObj.registerA = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        parentObj.registersHL = parentObj.registersHL + 1 & 0xFFFF;\n    },\n    //DEC HL\n    //#0x2B:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registersHL - 1 & 0xFFFF;\n    },\n    //INC L\n    //#0x2C:\n    function(parentObj) {\n        var L = parentObj.registersHL + 1 & 0xFF;\n        parentObj.FZero = L == 0;\n        parentObj.FHalfCarry = (L & 0xF) == 0;\n        parentObj.FSubtract = false;\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | L;\n    },\n    //DEC L\n    //#0x2D:\n    function(parentObj) {\n        var L = parentObj.registersHL - 1 & 0xFF;\n        parentObj.FZero = L == 0;\n        parentObj.FHalfCarry = (L & 0xF) == 0xF;\n        parentObj.FSubtract = true;\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | L;\n    },\n    //LD L, n\n    //#0x2E:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n    },\n    //CPL\n    //#0x2F:\n    function(parentObj) {\n        parentObj.registerA ^= 0xFF;\n        parentObj.FSubtract = parentObj.FHalfCarry = true;\n    },\n    //JR NC, n\n    //#0x30:\n    function(parentObj) {\n        if (!parentObj.FCarry) {\n            parentObj.programCounter = parentObj.programCounter + (parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24 >> 24) + 1 & 0xFFFF;\n            parentObj.CPUTicks += 4;\n        } else parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n    },\n    //LD SP, nn\n    //#0x31:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n    },\n    //LDD (HL), A\n    //#0x32:\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerA);\n        parentObj.registersHL = parentObj.registersHL - 1 & 0xFFFF;\n    },\n    //INC SP\n    //#0x33:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.stackPointer + 1 & 0xFFFF;\n    },\n    //INC (HL)\n    //#0x34:\n    function(parentObj) {\n        var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) + 1 & 0xFF;\n        parentObj.FZero = temp_var == 0;\n        parentObj.FHalfCarry = (temp_var & 0xF) == 0;\n        parentObj.FSubtract = false;\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n    },\n    //DEC (HL)\n    //#0x35:\n    function(parentObj) {\n        var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) - 1 & 0xFF;\n        parentObj.FZero = temp_var == 0;\n        parentObj.FHalfCarry = (temp_var & 0xF) == 0xF;\n        parentObj.FSubtract = true;\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n    },\n    //LD (HL), n\n    //#0x36:\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter));\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n    },\n    //SCF\n    //#0x37:\n    function(parentObj) {\n        parentObj.FCarry = true;\n        parentObj.FSubtract = parentObj.FHalfCarry = false;\n    },\n    //JR C, n\n    //#0x38:\n    function(parentObj) {\n        if (parentObj.FCarry) {\n            parentObj.programCounter = parentObj.programCounter + (parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24 >> 24) + 1 & 0xFFFF;\n            parentObj.CPUTicks += 4;\n        } else parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n    },\n    //ADD HL, SP\n    //#0x39:\n    function(parentObj) {\n        var dirtySum = parentObj.registersHL + parentObj.stackPointer;\n        parentObj.FHalfCarry = (parentObj.registersHL & 0xFFF) > (dirtySum & 0xFFF);\n        parentObj.FCarry = dirtySum > 0xFFFF;\n        parentObj.registersHL = dirtySum & 0xFFFF;\n        parentObj.FSubtract = false;\n    },\n    //LDD A, (HL)\n    //#0x3A:\n    function(parentObj) {\n        parentObj.registerA = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        parentObj.registersHL = parentObj.registersHL - 1 & 0xFFFF;\n    },\n    //DEC SP\n    //#0x3B:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n    },\n    //INC A\n    //#0x3C:\n    function(parentObj) {\n        parentObj.registerA = parentObj.registerA + 1 & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) == 0;\n        parentObj.FSubtract = false;\n    },\n    //DEC A\n    //#0x3D:\n    function(parentObj) {\n        parentObj.registerA = parentObj.registerA - 1 & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) == 0xF;\n        parentObj.FSubtract = true;\n    },\n    //LD A, n\n    //#0x3E:\n    function(parentObj) {\n        parentObj.registerA = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n    },\n    //CCF\n    //#0x3F:\n    function(parentObj) {\n        parentObj.FCarry = !parentObj.FCarry;\n        parentObj.FSubtract = parentObj.FHalfCarry = false;\n    },\n    //LD B, B\n    //#0x40:\n    function(parentObj) {\n    //Do nothing...\n    },\n    //LD B, C\n    //#0x41:\n    function(parentObj) {\n        parentObj.registerB = parentObj.registerC;\n    },\n    //LD B, D\n    //#0x42:\n    function(parentObj) {\n        parentObj.registerB = parentObj.registerD;\n    },\n    //LD B, E\n    //#0x43:\n    function(parentObj) {\n        parentObj.registerB = parentObj.registerE;\n    },\n    //LD B, H\n    //#0x44:\n    function(parentObj) {\n        parentObj.registerB = parentObj.registersHL >> 8;\n    },\n    //LD B, L\n    //#0x45:\n    function(parentObj) {\n        parentObj.registerB = parentObj.registersHL & 0xFF;\n    },\n    //LD B, (HL)\n    //#0x46:\n    function(parentObj) {\n        parentObj.registerB = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n    },\n    //LD B, A\n    //#0x47:\n    function(parentObj) {\n        parentObj.registerB = parentObj.registerA;\n    },\n    //LD C, B\n    //#0x48:\n    function(parentObj) {\n        parentObj.registerC = parentObj.registerB;\n    },\n    //LD C, C\n    //#0x49:\n    function(parentObj) {\n    //Do nothing...\n    },\n    //LD C, D\n    //#0x4A:\n    function(parentObj) {\n        parentObj.registerC = parentObj.registerD;\n    },\n    //LD C, E\n    //#0x4B:\n    function(parentObj) {\n        parentObj.registerC = parentObj.registerE;\n    },\n    //LD C, H\n    //#0x4C:\n    function(parentObj) {\n        parentObj.registerC = parentObj.registersHL >> 8;\n    },\n    //LD C, L\n    //#0x4D:\n    function(parentObj) {\n        parentObj.registerC = parentObj.registersHL & 0xFF;\n    },\n    //LD C, (HL)\n    //#0x4E:\n    function(parentObj) {\n        parentObj.registerC = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n    },\n    //LD C, A\n    //#0x4F:\n    function(parentObj) {\n        parentObj.registerC = parentObj.registerA;\n    },\n    //LD D, B\n    //#0x50:\n    function(parentObj) {\n        parentObj.registerD = parentObj.registerB;\n    },\n    //LD D, C\n    //#0x51:\n    function(parentObj) {\n        parentObj.registerD = parentObj.registerC;\n    },\n    //LD D, D\n    //#0x52:\n    function(parentObj) {\n    //Do nothing...\n    },\n    //LD D, E\n    //#0x53:\n    function(parentObj) {\n        parentObj.registerD = parentObj.registerE;\n    },\n    //LD D, H\n    //#0x54:\n    function(parentObj) {\n        parentObj.registerD = parentObj.registersHL >> 8;\n    },\n    //LD D, L\n    //#0x55:\n    function(parentObj) {\n        parentObj.registerD = parentObj.registersHL & 0xFF;\n    },\n    //LD D, (HL)\n    //#0x56:\n    function(parentObj) {\n        parentObj.registerD = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n    },\n    //LD D, A\n    //#0x57:\n    function(parentObj) {\n        parentObj.registerD = parentObj.registerA;\n    },\n    //LD E, B\n    //#0x58:\n    function(parentObj) {\n        parentObj.registerE = parentObj.registerB;\n    },\n    //LD E, C\n    //#0x59:\n    function(parentObj) {\n        parentObj.registerE = parentObj.registerC;\n    },\n    //LD E, D\n    //#0x5A:\n    function(parentObj) {\n        parentObj.registerE = parentObj.registerD;\n    },\n    //LD E, E\n    //#0x5B:\n    function(parentObj) {\n    //Do nothing...\n    },\n    //LD E, H\n    //#0x5C:\n    function(parentObj) {\n        parentObj.registerE = parentObj.registersHL >> 8;\n    },\n    //LD E, L\n    //#0x5D:\n    function(parentObj) {\n        parentObj.registerE = parentObj.registersHL & 0xFF;\n    },\n    //LD E, (HL)\n    //#0x5E:\n    function(parentObj) {\n        parentObj.registerE = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n    },\n    //LD E, A\n    //#0x5F:\n    function(parentObj) {\n        parentObj.registerE = parentObj.registerA;\n    },\n    //LD H, B\n    //#0x60:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registerB << 8 | parentObj.registersHL & 0xFF;\n    },\n    //LD H, C\n    //#0x61:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registerC << 8 | parentObj.registersHL & 0xFF;\n    },\n    //LD H, D\n    //#0x62:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registerD << 8 | parentObj.registersHL & 0xFF;\n    },\n    //LD H, E\n    //#0x63:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registerE << 8 | parentObj.registersHL & 0xFF;\n    },\n    //LD H, H\n    //#0x64:\n    function(parentObj) {\n    //Do nothing...\n    },\n    //LD H, L\n    //#0x65:\n    function(parentObj) {\n        parentObj.registersHL = (parentObj.registersHL & 0xFF) * 0x101;\n    },\n    //LD H, (HL)\n    //#0x66:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) << 8 | parentObj.registersHL & 0xFF;\n    },\n    //LD H, A\n    //#0x67:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registerA << 8 | parentObj.registersHL & 0xFF;\n    },\n    //LD L, B\n    //#0x68:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | parentObj.registerB;\n    },\n    //LD L, C\n    //#0x69:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | parentObj.registerC;\n    },\n    //LD L, D\n    //#0x6A:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | parentObj.registerD;\n    },\n    //LD L, E\n    //#0x6B:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | parentObj.registerE;\n    },\n    //LD L, H\n    //#0x6C:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | parentObj.registersHL >> 8;\n    },\n    //LD L, L\n    //#0x6D:\n    function(parentObj) {\n    //Do nothing...\n    },\n    //LD L, (HL)\n    //#0x6E:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n    },\n    //LD L, A\n    //#0x6F:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | parentObj.registerA;\n    },\n    //LD (HL), B\n    //#0x70:\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerB);\n    },\n    //LD (HL), C\n    //#0x71:\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerC);\n    },\n    //LD (HL), D\n    //#0x72:\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerD);\n    },\n    //LD (HL), E\n    //#0x73:\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerE);\n    },\n    //LD (HL), H\n    //#0x74:\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registersHL >> 8);\n    },\n    //LD (HL), L\n    //#0x75:\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registersHL & 0xFF);\n    },\n    //HALT\n    //#0x76:\n    function(parentObj) {\n        //See if there's already an IRQ match:\n        if ((parentObj.interruptsEnabled & parentObj.interruptsRequested & 0x1F) > 0) {\n            if (!parentObj.cGBC && !parentObj.usedBootROM) //HALT bug in the DMG CPU model (Program Counter fails to increment for one instruction after HALT):\n            parentObj.skipPCIncrement = true;\n            else //CGB gets around the HALT PC bug by doubling the hidden NOP.\n            parentObj.CPUTicks += 4;\n        } else //CPU is stalled until the next IRQ match:\n        parentObj.calculateHALTPeriod();\n    },\n    //LD (HL), A\n    //#0x77:\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerA);\n    },\n    //LD A, B\n    //#0x78:\n    function(parentObj) {\n        parentObj.registerA = parentObj.registerB;\n    },\n    //LD A, C\n    //#0x79:\n    function(parentObj) {\n        parentObj.registerA = parentObj.registerC;\n    },\n    //LD A, D\n    //#0x7A:\n    function(parentObj) {\n        parentObj.registerA = parentObj.registerD;\n    },\n    //LD A, E\n    //#0x7B:\n    function(parentObj) {\n        parentObj.registerA = parentObj.registerE;\n    },\n    //LD A, H\n    //#0x7C:\n    function(parentObj) {\n        parentObj.registerA = parentObj.registersHL >> 8;\n    },\n    //LD A, L\n    //#0x7D:\n    function(parentObj) {\n        parentObj.registerA = parentObj.registersHL & 0xFF;\n    },\n    //LD, A, (HL)\n    //#0x7E:\n    function(parentObj) {\n        parentObj.registerA = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n    },\n    //LD A, A\n    //#0x7F:\n    function(parentObj) {\n    //Do Nothing...\n    },\n    //ADD A, B\n    //#0x80:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA + parentObj.registerB;\n        parentObj.FHalfCarry = (dirtySum & 0xF) < (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //ADD A, C\n    //#0x81:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA + parentObj.registerC;\n        parentObj.FHalfCarry = (dirtySum & 0xF) < (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //ADD A, D\n    //#0x82:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA + parentObj.registerD;\n        parentObj.FHalfCarry = (dirtySum & 0xF) < (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //ADD A, E\n    //#0x83:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA + parentObj.registerE;\n        parentObj.FHalfCarry = (dirtySum & 0xF) < (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //ADD A, H\n    //#0x84:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA + (parentObj.registersHL >> 8);\n        parentObj.FHalfCarry = (dirtySum & 0xF) < (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //ADD A, L\n    //#0x85:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA + (parentObj.registersHL & 0xFF);\n        parentObj.FHalfCarry = (dirtySum & 0xF) < (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //ADD A, (HL)\n    //#0x86:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA + parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        parentObj.FHalfCarry = (dirtySum & 0xF) < (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //ADD A, A\n    //#0x87:\n    function(parentObj) {\n        parentObj.FHalfCarry = (parentObj.registerA & 0x8) == 0x8;\n        parentObj.FCarry = parentObj.registerA > 0x7F;\n        parentObj.registerA = parentObj.registerA << 1 & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //ADC A, B\n    //#0x88:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA + parentObj.registerB + (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) + (parentObj.registerB & 0xF) + (parentObj.FCarry ? 1 : 0) > 0xF;\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //ADC A, C\n    //#0x89:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA + parentObj.registerC + (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) + (parentObj.registerC & 0xF) + (parentObj.FCarry ? 1 : 0) > 0xF;\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //ADC A, D\n    //#0x8A:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA + parentObj.registerD + (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) + (parentObj.registerD & 0xF) + (parentObj.FCarry ? 1 : 0) > 0xF;\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //ADC A, E\n    //#0x8B:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA + parentObj.registerE + (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) + (parentObj.registerE & 0xF) + (parentObj.FCarry ? 1 : 0) > 0xF;\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //ADC A, H\n    //#0x8C:\n    function(parentObj) {\n        var tempValue = parentObj.registersHL >> 8;\n        var dirtySum = parentObj.registerA + tempValue + (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) + (tempValue & 0xF) + (parentObj.FCarry ? 1 : 0) > 0xF;\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //ADC A, L\n    //#0x8D:\n    function(parentObj) {\n        var tempValue = parentObj.registersHL & 0xFF;\n        var dirtySum = parentObj.registerA + tempValue + (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) + (tempValue & 0xF) + (parentObj.FCarry ? 1 : 0) > 0xF;\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //ADC A, (HL)\n    //#0x8E:\n    function(parentObj) {\n        var tempValue = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        var dirtySum = parentObj.registerA + tempValue + (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) + (tempValue & 0xF) + (parentObj.FCarry ? 1 : 0) > 0xF;\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //ADC A, A\n    //#0x8F:\n    function(parentObj) {\n        //shift left register A one bit for some ops here as an optimization:\n        var dirtySum = parentObj.registerA << 1 | (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA << 1 & 0x1E | (parentObj.FCarry ? 1 : 0)) > 0xF;\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //SUB A, B\n    //#0x90:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.registerB;\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) < (dirtySum & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //SUB A, C\n    //#0x91:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.registerC;\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) < (dirtySum & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //SUB A, D\n    //#0x92:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.registerD;\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) < (dirtySum & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //SUB A, E\n    //#0x93:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.registerE;\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) < (dirtySum & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //SUB A, H\n    //#0x94:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - (parentObj.registersHL >> 8);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) < (dirtySum & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //SUB A, L\n    //#0x95:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - (parentObj.registersHL & 0xFF);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) < (dirtySum & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //SUB A, (HL)\n    //#0x96:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) < (dirtySum & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //SUB A, A\n    //#0x97:\n    function(parentObj) {\n        //number - same number == 0\n        parentObj.registerA = 0;\n        parentObj.FHalfCarry = parentObj.FCarry = false;\n        parentObj.FZero = parentObj.FSubtract = true;\n    },\n    //SBC A, B\n    //#0x98:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.registerB - (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) - (parentObj.registerB & 0xF) - (parentObj.FCarry ? 1 : 0) < 0;\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = true;\n    },\n    //SBC A, C\n    //#0x99:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.registerC - (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) - (parentObj.registerC & 0xF) - (parentObj.FCarry ? 1 : 0) < 0;\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = true;\n    },\n    //SBC A, D\n    //#0x9A:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.registerD - (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) - (parentObj.registerD & 0xF) - (parentObj.FCarry ? 1 : 0) < 0;\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = true;\n    },\n    //SBC A, E\n    //#0x9B:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.registerE - (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) - (parentObj.registerE & 0xF) - (parentObj.FCarry ? 1 : 0) < 0;\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = true;\n    },\n    //SBC A, H\n    //#0x9C:\n    function(parentObj) {\n        var temp_var = parentObj.registersHL >> 8;\n        var dirtySum = parentObj.registerA - temp_var - (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) - (temp_var & 0xF) - (parentObj.FCarry ? 1 : 0) < 0;\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = true;\n    },\n    //SBC A, L\n    //#0x9D:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - (parentObj.registersHL & 0xFF) - (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) - (parentObj.registersHL & 0xF) - (parentObj.FCarry ? 1 : 0) < 0;\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = true;\n    },\n    //SBC A, (HL)\n    //#0x9E:\n    function(parentObj) {\n        var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        var dirtySum = parentObj.registerA - temp_var - (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) - (temp_var & 0xF) - (parentObj.FCarry ? 1 : 0) < 0;\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = true;\n    },\n    //SBC A, A\n    //#0x9F:\n    function(parentObj) {\n        //Optimized SBC A:\n        if (parentObj.FCarry) {\n            parentObj.FZero = false;\n            parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = true;\n            parentObj.registerA = 0xFF;\n        } else {\n            parentObj.FHalfCarry = parentObj.FCarry = false;\n            parentObj.FSubtract = parentObj.FZero = true;\n            parentObj.registerA = 0;\n        }\n    },\n    //AND B\n    //#0xA0:\n    function(parentObj) {\n        parentObj.registerA &= parentObj.registerB;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = parentObj.FCarry = false;\n    },\n    //AND C\n    //#0xA1:\n    function(parentObj) {\n        parentObj.registerA &= parentObj.registerC;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = parentObj.FCarry = false;\n    },\n    //AND D\n    //#0xA2:\n    function(parentObj) {\n        parentObj.registerA &= parentObj.registerD;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = parentObj.FCarry = false;\n    },\n    //AND E\n    //#0xA3:\n    function(parentObj) {\n        parentObj.registerA &= parentObj.registerE;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = parentObj.FCarry = false;\n    },\n    //AND H\n    //#0xA4:\n    function(parentObj) {\n        parentObj.registerA &= parentObj.registersHL >> 8;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = parentObj.FCarry = false;\n    },\n    //AND L\n    //#0xA5:\n    function(parentObj) {\n        parentObj.registerA &= parentObj.registersHL;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = parentObj.FCarry = false;\n    },\n    //AND (HL)\n    //#0xA6:\n    function(parentObj) {\n        parentObj.registerA &= parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = parentObj.FCarry = false;\n    },\n    //AND A\n    //#0xA7:\n    function(parentObj) {\n        //number & same number = same number\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = parentObj.FCarry = false;\n    },\n    //XOR B\n    //#0xA8:\n    function(parentObj) {\n        parentObj.registerA ^= parentObj.registerB;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n    },\n    //XOR C\n    //#0xA9:\n    function(parentObj) {\n        parentObj.registerA ^= parentObj.registerC;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n    },\n    //XOR D\n    //#0xAA:\n    function(parentObj) {\n        parentObj.registerA ^= parentObj.registerD;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n    },\n    //XOR E\n    //#0xAB:\n    function(parentObj) {\n        parentObj.registerA ^= parentObj.registerE;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n    },\n    //XOR H\n    //#0xAC:\n    function(parentObj) {\n        parentObj.registerA ^= parentObj.registersHL >> 8;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n    },\n    //XOR L\n    //#0xAD:\n    function(parentObj) {\n        parentObj.registerA ^= parentObj.registersHL & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n    },\n    //XOR (HL)\n    //#0xAE:\n    function(parentObj) {\n        parentObj.registerA ^= parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n    },\n    //XOR A\n    //#0xAF:\n    function(parentObj) {\n        //number ^ same number == 0\n        parentObj.registerA = 0;\n        parentObj.FZero = true;\n        parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n    },\n    //OR B\n    //#0xB0:\n    function(parentObj) {\n        parentObj.registerA |= parentObj.registerB;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n    },\n    //OR C\n    //#0xB1:\n    function(parentObj) {\n        parentObj.registerA |= parentObj.registerC;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n    },\n    //OR D\n    //#0xB2:\n    function(parentObj) {\n        parentObj.registerA |= parentObj.registerD;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n    },\n    //OR E\n    //#0xB3:\n    function(parentObj) {\n        parentObj.registerA |= parentObj.registerE;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n    },\n    //OR H\n    //#0xB4:\n    function(parentObj) {\n        parentObj.registerA |= parentObj.registersHL >> 8;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n    },\n    //OR L\n    //#0xB5:\n    function(parentObj) {\n        parentObj.registerA |= parentObj.registersHL & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n    },\n    //OR (HL)\n    //#0xB6:\n    function(parentObj) {\n        parentObj.registerA |= parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n    },\n    //OR A\n    //#0xB7:\n    function(parentObj) {\n        //number | same number == same number\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n    },\n    //CP B\n    //#0xB8:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.registerB;\n        parentObj.FHalfCarry = (dirtySum & 0xF) > (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //CP C\n    //#0xB9:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.registerC;\n        parentObj.FHalfCarry = (dirtySum & 0xF) > (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //CP D\n    //#0xBA:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.registerD;\n        parentObj.FHalfCarry = (dirtySum & 0xF) > (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //CP E\n    //#0xBB:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.registerE;\n        parentObj.FHalfCarry = (dirtySum & 0xF) > (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //CP H\n    //#0xBC:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - (parentObj.registersHL >> 8);\n        parentObj.FHalfCarry = (dirtySum & 0xF) > (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //CP L\n    //#0xBD:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - (parentObj.registersHL & 0xFF);\n        parentObj.FHalfCarry = (dirtySum & 0xF) > (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //CP (HL)\n    //#0xBE:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        parentObj.FHalfCarry = (dirtySum & 0xF) > (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //CP A\n    //#0xBF:\n    function(parentObj) {\n        parentObj.FHalfCarry = parentObj.FCarry = false;\n        parentObj.FZero = parentObj.FSubtract = true;\n    },\n    //RET !FZ\n    //#0xC0:\n    function(parentObj) {\n        if (!parentObj.FZero) {\n            parentObj.programCounter = parentObj.memoryRead(parentObj.stackPointer + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n            parentObj.stackPointer = parentObj.stackPointer + 2 & 0xFFFF;\n            parentObj.CPUTicks += 12;\n        }\n    },\n    //POP BC\n    //#0xC1:\n    function(parentObj) {\n        parentObj.registerC = parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n        parentObj.registerB = parentObj.memoryRead(parentObj.stackPointer + 1 & 0xFFFF);\n        parentObj.stackPointer = parentObj.stackPointer + 2 & 0xFFFF;\n    },\n    //JP !FZ, nn\n    //#0xC2:\n    function(parentObj) {\n        if (!parentObj.FZero) {\n            parentObj.programCounter = parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n            parentObj.CPUTicks += 4;\n        } else parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n    },\n    //JP nn\n    //#0xC3:\n    function(parentObj) {\n        parentObj.programCounter = parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n    },\n    //CALL !FZ, nn\n    //#0xC4:\n    function(parentObj) {\n        if (!parentObj.FZero) {\n            var temp_pc = parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n            parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n            parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n            parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n            parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n            parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n            parentObj.programCounter = temp_pc;\n            parentObj.CPUTicks += 12;\n        } else parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n    },\n    //PUSH BC\n    //#0xC5:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registerB);\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registerC);\n    },\n    //ADD, n\n    //#0xC6:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA + parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n        parentObj.FHalfCarry = (dirtySum & 0xF) < (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //RST 0\n    //#0xC7:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n        parentObj.programCounter = 0;\n    },\n    //RET FZ\n    //#0xC8:\n    function(parentObj) {\n        if (parentObj.FZero) {\n            parentObj.programCounter = parentObj.memoryRead(parentObj.stackPointer + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n            parentObj.stackPointer = parentObj.stackPointer + 2 & 0xFFFF;\n            parentObj.CPUTicks += 12;\n        }\n    },\n    //RET\n    //#0xC9:\n    function(parentObj) {\n        parentObj.programCounter = parentObj.memoryRead(parentObj.stackPointer + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n        parentObj.stackPointer = parentObj.stackPointer + 2 & 0xFFFF;\n    },\n    //JP FZ, nn\n    //#0xCA:\n    function(parentObj) {\n        if (parentObj.FZero) {\n            parentObj.programCounter = parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n            parentObj.CPUTicks += 4;\n        } else parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n    },\n    //Secondary OP Code Set:\n    //#0xCB:\n    function(parentObj) {\n        var opcode = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        //Increment the program counter to the next instruction:\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n        //Get how many CPU cycles the current 0xCBXX op code counts for:\n        parentObj.CPUTicks += parentObj.SecondaryTICKTable[opcode];\n        //Execute secondary OP codes for the 0xCB OP code call.\n        parentObj.CBOPCODE[opcode](parentObj);\n    },\n    //CALL FZ, nn\n    //#0xCC:\n    function(parentObj) {\n        if (parentObj.FZero) {\n            var temp_pc = parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n            parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n            parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n            parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n            parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n            parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n            parentObj.programCounter = temp_pc;\n            parentObj.CPUTicks += 12;\n        } else parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n    },\n    //CALL nn\n    //#0xCD:\n    function(parentObj) {\n        var temp_pc = parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n        parentObj.programCounter = temp_pc;\n    },\n    //ADC A, n\n    //#0xCE:\n    function(parentObj) {\n        var tempValue = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n        var dirtySum = parentObj.registerA + tempValue + (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) + (tempValue & 0xF) + (parentObj.FCarry ? 1 : 0) > 0xF;\n        parentObj.FCarry = dirtySum > 0xFF;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = false;\n    },\n    //RST 0x8\n    //#0xCF:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n        parentObj.programCounter = 0x8;\n    },\n    //RET !FC\n    //#0xD0:\n    function(parentObj) {\n        if (!parentObj.FCarry) {\n            parentObj.programCounter = parentObj.memoryRead(parentObj.stackPointer + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n            parentObj.stackPointer = parentObj.stackPointer + 2 & 0xFFFF;\n            parentObj.CPUTicks += 12;\n        }\n    },\n    //POP DE\n    //#0xD1:\n    function(parentObj) {\n        parentObj.registerE = parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n        parentObj.registerD = parentObj.memoryRead(parentObj.stackPointer + 1 & 0xFFFF);\n        parentObj.stackPointer = parentObj.stackPointer + 2 & 0xFFFF;\n    },\n    //JP !FC, nn\n    //#0xD2:\n    function(parentObj) {\n        if (!parentObj.FCarry) {\n            parentObj.programCounter = parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n            parentObj.CPUTicks += 4;\n        } else parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n    },\n    //0xD3 - Illegal\n    //#0xD3:\n    function(parentObj) {\n        console.log(\"Illegal op code 0xD3 called, pausing emulation.\");\n    //pause();\n    },\n    //CALL !FC, nn\n    //#0xD4:\n    function(parentObj) {\n        if (!parentObj.FCarry) {\n            var temp_pc = parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n            parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n            parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n            parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n            parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n            parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n            parentObj.programCounter = temp_pc;\n            parentObj.CPUTicks += 12;\n        } else parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n    },\n    //PUSH DE\n    //#0xD5:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registerD);\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registerE);\n    },\n    //SUB A, n\n    //#0xD6:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) < (dirtySum & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //RST 0x10\n    //#0xD7:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n        parentObj.programCounter = 0x10;\n    },\n    //RET FC\n    //#0xD8:\n    function(parentObj) {\n        if (parentObj.FCarry) {\n            parentObj.programCounter = parentObj.memoryRead(parentObj.stackPointer + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n            parentObj.stackPointer = parentObj.stackPointer + 2 & 0xFFFF;\n            parentObj.CPUTicks += 12;\n        }\n    },\n    //RETI\n    //#0xD9:\n    function(parentObj) {\n        parentObj.programCounter = parentObj.memoryRead(parentObj.stackPointer + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n        parentObj.stackPointer = parentObj.stackPointer + 2 & 0xFFFF;\n        //Immediate for HALT:\n        parentObj.IRQEnableDelay = parentObj.IRQEnableDelay == 2 || parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) == 0x76 ? 1 : 2;\n    },\n    //JP FC, nn\n    //#0xDA:\n    function(parentObj) {\n        if (parentObj.FCarry) {\n            parentObj.programCounter = parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n            parentObj.CPUTicks += 4;\n        } else parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n    },\n    //0xDB - Illegal\n    //#0xDB:\n    function(parentObj) {\n        console.log(\"Illegal op code 0xDB called, pausing emulation.\");\n    //pause();\n    },\n    //CALL FC, nn\n    //#0xDC:\n    function(parentObj) {\n        if (parentObj.FCarry) {\n            var temp_pc = parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n            parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n            parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n            parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n            parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n            parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n            parentObj.programCounter = temp_pc;\n            parentObj.CPUTicks += 12;\n        } else parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n    },\n    //0xDD - Illegal\n    //#0xDD:\n    function(parentObj) {\n        console.log(\"Illegal op code 0xDD called, pausing emulation.\");\n    //pause();\n    },\n    //SBC A, n\n    //#0xDE:\n    function(parentObj) {\n        var temp_var = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n        var dirtySum = parentObj.registerA - temp_var - (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = (parentObj.registerA & 0xF) - (temp_var & 0xF) - (parentObj.FCarry ? 1 : 0) < 0;\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.registerA = dirtySum & 0xFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = true;\n    },\n    //RST 0x18\n    //#0xDF:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n        parentObj.programCounter = 0x18;\n    },\n    //LDH (n), A\n    //#0xE0:\n    function(parentObj) {\n        parentObj.memoryHighWrite(parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter), parentObj.registerA);\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n    },\n    //POP HL\n    //#0xE1:\n    function(parentObj) {\n        parentObj.registersHL = parentObj.memoryRead(parentObj.stackPointer + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n        parentObj.stackPointer = parentObj.stackPointer + 2 & 0xFFFF;\n    },\n    //LD (0xFF00 + C), A\n    //#0xE2:\n    function(parentObj) {\n        parentObj.memoryHighWriter[parentObj.registerC](parentObj, parentObj.registerC, parentObj.registerA);\n    },\n    //0xE3 - Illegal\n    //#0xE3:\n    function(parentObj) {\n        console.log(\"Illegal op code 0xE3 called, pausing emulation.\", 2);\n    //pause();\n    },\n    //0xE4 - Illegal\n    //#0xE4:\n    function(parentObj) {\n        console.log(\"Illegal op code 0xE4 called, pausing emulation.\", 2);\n    //pause();\n    },\n    //PUSH HL\n    //#0xE5:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registersHL >> 8);\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registersHL & 0xFF);\n    },\n    //AND n\n    //#0xE6:\n    function(parentObj) {\n        parentObj.registerA &= parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = parentObj.FCarry = false;\n    },\n    //RST 0x20\n    //#0xE7:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n        parentObj.programCounter = 0x20;\n    },\n    //ADD SP, n\n    //#0xE8:\n    function(parentObj) {\n        var temp_value2 = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24 >> 24;\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n        var temp_value = parentObj.stackPointer + temp_value2 & 0xFFFF;\n        temp_value2 = parentObj.stackPointer ^ temp_value2 ^ temp_value;\n        parentObj.stackPointer = temp_value;\n        parentObj.FCarry = (temp_value2 & 0x100) == 0x100;\n        parentObj.FHalfCarry = (temp_value2 & 0x10) == 0x10;\n        parentObj.FZero = parentObj.FSubtract = false;\n    },\n    //JP, (HL)\n    //#0xE9:\n    function(parentObj) {\n        parentObj.programCounter = parentObj.registersHL;\n    },\n    //LD n, A\n    //#0xEA:\n    function(parentObj) {\n        parentObj.memoryWrite(parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter), parentObj.registerA);\n        parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n    },\n    //0xEB - Illegal\n    //#0xEB:\n    function(parentObj) {\n        console.log(\"Illegal op code 0xEB called, pausing emulation.\", 2);\n    //pause();\n    },\n    //0xEC - Illegal\n    //#0xEC:\n    function(parentObj) {\n        console.log(\"Illegal op code 0xEC called, pausing emulation.\", 2);\n    //pause();\n    },\n    //0xED - Illegal\n    //#0xED:\n    function(parentObj) {\n        console.log(\"Illegal op code 0xED called, pausing emulation.\", 2);\n    //pause();\n    },\n    //XOR n\n    //#0xEE:\n    function(parentObj) {\n        parentObj.registerA ^= parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n    },\n    //RST 0x28\n    //#0xEF:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n        parentObj.programCounter = 0x28;\n    },\n    //LDH A, (n)\n    //#0xF0:\n    function(parentObj) {\n        parentObj.registerA = parentObj.memoryHighRead(parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter));\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n    },\n    //POP AF\n    //#0xF1:\n    function(parentObj) {\n        var temp_var = parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n        parentObj.FZero = temp_var > 0x7F;\n        parentObj.FSubtract = (temp_var & 0x40) == 0x40;\n        parentObj.FHalfCarry = (temp_var & 0x20) == 0x20;\n        parentObj.FCarry = (temp_var & 0x10) == 0x10;\n        parentObj.registerA = parentObj.memoryRead(parentObj.stackPointer + 1 & 0xFFFF);\n        parentObj.stackPointer = parentObj.stackPointer + 2 & 0xFFFF;\n    },\n    //LD A, (0xFF00 + C)\n    //#0xF2:\n    function(parentObj) {\n        parentObj.registerA = parentObj.memoryHighReader[parentObj.registerC](parentObj, parentObj.registerC);\n    },\n    //DI\n    //#0xF3:\n    function(parentObj) {\n        parentObj.IME = false;\n        parentObj.IRQEnableDelay = 0;\n    },\n    //0xF4 - Illegal\n    //#0xF4:\n    function(parentObj) {\n        console.log(\"Illegal op code 0xF4 called, pausing emulation.\", 2);\n    //pause();\n    },\n    //PUSH AF\n    //#0xF5:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registerA);\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, (parentObj.FZero ? 0x80 : 0) | (parentObj.FSubtract ? 0x40 : 0) | (parentObj.FHalfCarry ? 0x20 : 0) | (parentObj.FCarry ? 0x10 : 0));\n    },\n    //OR n\n    //#0xF6:\n    function(parentObj) {\n        parentObj.registerA |= parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n        parentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n    },\n    //RST 0x30\n    //#0xF7:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n        parentObj.programCounter = 0x30;\n    },\n    //LDHL SP, n\n    //#0xF8:\n    function(parentObj) {\n        var temp_var = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24 >> 24;\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n        parentObj.registersHL = parentObj.stackPointer + temp_var & 0xFFFF;\n        temp_var = parentObj.stackPointer ^ temp_var ^ parentObj.registersHL;\n        parentObj.FCarry = (temp_var & 0x100) == 0x100;\n        parentObj.FHalfCarry = (temp_var & 0x10) == 0x10;\n        parentObj.FZero = parentObj.FSubtract = false;\n    },\n    //LD SP, HL\n    //#0xF9:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.registersHL;\n    },\n    //LD A, (nn)\n    //#0xFA:\n    function(parentObj) {\n        parentObj.registerA = parentObj.memoryRead(parentObj.memoryRead(parentObj.programCounter + 1 & 0xFFFF) << 8 | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter));\n        parentObj.programCounter = parentObj.programCounter + 2 & 0xFFFF;\n    },\n    //EI\n    //#0xFB:\n    function(parentObj) {\n        //Immediate for HALT:\n        parentObj.IRQEnableDelay = parentObj.IRQEnableDelay == 2 || parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) == 0x76 ? 1 : 2;\n    },\n    //0xFC - Illegal\n    //#0xFC:\n    function(parentObj) {\n        console.log(\"Illegal op code 0xFC called, pausing emulation.\", 2);\n    //pause();\n    },\n    //0xFD - Illegal\n    //#0xFD:\n    function(parentObj) {\n        console.log(\"Illegal op code 0xFD called, pausing emulation.\", 2);\n    //pause();\n    },\n    //CP n\n    //#0xFE:\n    function(parentObj) {\n        var dirtySum = parentObj.registerA - parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n        parentObj.programCounter = parentObj.programCounter + 1 & 0xFFFF;\n        parentObj.FHalfCarry = (dirtySum & 0xF) > (parentObj.registerA & 0xF);\n        parentObj.FCarry = dirtySum < 0;\n        parentObj.FZero = dirtySum == 0;\n        parentObj.FSubtract = true;\n    },\n    //RST 0x38\n    //#0xFF:\n    function(parentObj) {\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n        parentObj.stackPointer = parentObj.stackPointer - 1 & 0xFFFF;\n        parentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n        parentObj.programCounter = 0x38;\n    }\n];\nmodule.exports = $03e0fc754daed1f2$var$OPCODE;\n\n});\n\nparcelRegister(\"aN2Be\", function(module, exports) {\nvar $7db07f2e1daabd29$var$CBOPCODE = [\n    //RLC B\n    //#0x00:\n    function(parentObj) {\n        parentObj.FCarry = parentObj.registerB > 0x7F;\n        parentObj.registerB = parentObj.registerB << 1 & 0xFF | (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerB == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = parentObj.registerC > 0x7F;\n        parentObj.registerC = parentObj.registerC << 1 & 0xFF | (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerC == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = parentObj.registerD > 0x7F;\n        parentObj.registerD = parentObj.registerD << 1 & 0xFF | (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerD == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = parentObj.registerE > 0x7F;\n        parentObj.registerE = parentObj.registerE << 1 & 0xFF | (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerE == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = parentObj.registersHL > 0x7FFF;\n        parentObj.registersHL = parentObj.registersHL << 1 & 0xFE00 | (parentObj.FCarry ? 0x100 : 0) | parentObj.registersHL & 0xFF;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registersHL < 0x100;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registersHL & 0x80) == 0x80;\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | parentObj.registersHL << 1 & 0xFF | (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0xFF) == 0;\n    },\n    function(parentObj) {\n        var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        parentObj.FCarry = temp_var > 0x7F;\n        temp_var = temp_var << 1 & 0xFF | (parentObj.FCarry ? 1 : 0);\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = temp_var == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = parentObj.registerA > 0x7F;\n        parentObj.registerA = parentObj.registerA << 1 & 0xFF | (parentObj.FCarry ? 1 : 0);\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerA == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registerB & 0x01) == 0x01;\n        parentObj.registerB = (parentObj.FCarry ? 0x80 : 0) | parentObj.registerB >> 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerB == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registerC & 0x01) == 0x01;\n        parentObj.registerC = (parentObj.FCarry ? 0x80 : 0) | parentObj.registerC >> 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerC == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registerD & 0x01) == 0x01;\n        parentObj.registerD = (parentObj.FCarry ? 0x80 : 0) | parentObj.registerD >> 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerD == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registerE & 0x01) == 0x01;\n        parentObj.registerE = (parentObj.FCarry ? 0x80 : 0) | parentObj.registerE >> 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerE == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registersHL & 0x0100) == 0x0100;\n        parentObj.registersHL = (parentObj.FCarry ? 0x8000 : 0) | parentObj.registersHL >> 1 & 0xFF00 | parentObj.registersHL & 0xFF;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registersHL < 0x100;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registersHL & 0x01) == 0x01;\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | (parentObj.FCarry ? 0x80 : 0) | (parentObj.registersHL & 0xFF) >> 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0xFF) == 0;\n    },\n    function(parentObj) {\n        var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        parentObj.FCarry = (temp_var & 0x01) == 0x01;\n        temp_var = (parentObj.FCarry ? 0x80 : 0) | temp_var >> 1;\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = temp_var == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registerA & 0x01) == 0x01;\n        parentObj.registerA = (parentObj.FCarry ? 0x80 : 0) | parentObj.registerA >> 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerA == 0;\n    },\n    function(parentObj) {\n        var newFCarry = parentObj.registerB > 0x7F;\n        parentObj.registerB = parentObj.registerB << 1 & 0xFF | (parentObj.FCarry ? 1 : 0);\n        parentObj.FCarry = newFCarry;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerB == 0;\n    },\n    function(parentObj) {\n        var newFCarry = parentObj.registerC > 0x7F;\n        parentObj.registerC = parentObj.registerC << 1 & 0xFF | (parentObj.FCarry ? 1 : 0);\n        parentObj.FCarry = newFCarry;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerC == 0;\n    },\n    function(parentObj) {\n        var newFCarry = parentObj.registerD > 0x7F;\n        parentObj.registerD = parentObj.registerD << 1 & 0xFF | (parentObj.FCarry ? 1 : 0);\n        parentObj.FCarry = newFCarry;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerD == 0;\n    },\n    function(parentObj) {\n        var newFCarry = parentObj.registerE > 0x7F;\n        parentObj.registerE = parentObj.registerE << 1 & 0xFF | (parentObj.FCarry ? 1 : 0);\n        parentObj.FCarry = newFCarry;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerE == 0;\n    },\n    function(parentObj) {\n        var newFCarry = parentObj.registersHL > 0x7FFF;\n        parentObj.registersHL = parentObj.registersHL << 1 & 0xFE00 | (parentObj.FCarry ? 0x100 : 0) | parentObj.registersHL & 0xFF;\n        parentObj.FCarry = newFCarry;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registersHL < 0x100;\n    },\n    function(parentObj) {\n        var newFCarry = (parentObj.registersHL & 0x80) == 0x80;\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | parentObj.registersHL << 1 & 0xFF | (parentObj.FCarry ? 1 : 0);\n        parentObj.FCarry = newFCarry;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0xFF) == 0;\n    },\n    function(parentObj) {\n        var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        var newFCarry = temp_var > 0x7F;\n        temp_var = temp_var << 1 & 0xFF | (parentObj.FCarry ? 1 : 0);\n        parentObj.FCarry = newFCarry;\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = temp_var == 0;\n    },\n    function(parentObj) {\n        var newFCarry = parentObj.registerA > 0x7F;\n        parentObj.registerA = parentObj.registerA << 1 & 0xFF | (parentObj.FCarry ? 1 : 0);\n        parentObj.FCarry = newFCarry;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerA == 0;\n    },\n    function(parentObj) {\n        var newFCarry = (parentObj.registerB & 0x01) == 0x01;\n        parentObj.registerB = (parentObj.FCarry ? 0x80 : 0) | parentObj.registerB >> 1;\n        parentObj.FCarry = newFCarry;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerB == 0;\n    },\n    function(parentObj) {\n        var newFCarry = (parentObj.registerC & 0x01) == 0x01;\n        parentObj.registerC = (parentObj.FCarry ? 0x80 : 0) | parentObj.registerC >> 1;\n        parentObj.FCarry = newFCarry;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerC == 0;\n    },\n    function(parentObj) {\n        var newFCarry = (parentObj.registerD & 0x01) == 0x01;\n        parentObj.registerD = (parentObj.FCarry ? 0x80 : 0) | parentObj.registerD >> 1;\n        parentObj.FCarry = newFCarry;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerD == 0;\n    },\n    function(parentObj) {\n        var newFCarry = (parentObj.registerE & 0x01) == 0x01;\n        parentObj.registerE = (parentObj.FCarry ? 0x80 : 0) | parentObj.registerE >> 1;\n        parentObj.FCarry = newFCarry;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerE == 0;\n    },\n    function(parentObj) {\n        var newFCarry = (parentObj.registersHL & 0x0100) == 0x0100;\n        parentObj.registersHL = (parentObj.FCarry ? 0x8000 : 0) | parentObj.registersHL >> 1 & 0xFF00 | parentObj.registersHL & 0xFF;\n        parentObj.FCarry = newFCarry;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registersHL < 0x100;\n    },\n    function(parentObj) {\n        var newFCarry = (parentObj.registersHL & 0x01) == 0x01;\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | (parentObj.FCarry ? 0x80 : 0) | (parentObj.registersHL & 0xFF) >> 1;\n        parentObj.FCarry = newFCarry;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0xFF) == 0;\n    },\n    function(parentObj) {\n        var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        var newFCarry = (temp_var & 0x01) == 0x01;\n        temp_var = (parentObj.FCarry ? 0x80 : 0) | temp_var >> 1;\n        parentObj.FCarry = newFCarry;\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = temp_var == 0;\n    },\n    function(parentObj) {\n        var newFCarry = (parentObj.registerA & 0x01) == 0x01;\n        parentObj.registerA = (parentObj.FCarry ? 0x80 : 0) | parentObj.registerA >> 1;\n        parentObj.FCarry = newFCarry;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerA == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = parentObj.registerB > 0x7F;\n        parentObj.registerB = parentObj.registerB << 1 & 0xFF;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerB == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = parentObj.registerC > 0x7F;\n        parentObj.registerC = parentObj.registerC << 1 & 0xFF;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerC == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = parentObj.registerD > 0x7F;\n        parentObj.registerD = parentObj.registerD << 1 & 0xFF;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerD == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = parentObj.registerE > 0x7F;\n        parentObj.registerE = parentObj.registerE << 1 & 0xFF;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerE == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = parentObj.registersHL > 0x7FFF;\n        parentObj.registersHL = parentObj.registersHL << 1 & 0xFE00 | parentObj.registersHL & 0xFF;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registersHL < 0x100;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registersHL & 0x0080) == 0x0080;\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | parentObj.registersHL << 1 & 0xFF;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0xFF) == 0;\n    },\n    function(parentObj) {\n        var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        parentObj.FCarry = temp_var > 0x7F;\n        temp_var = temp_var << 1 & 0xFF;\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = temp_var == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = parentObj.registerA > 0x7F;\n        parentObj.registerA = parentObj.registerA << 1 & 0xFF;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerA == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registerB & 0x01) == 0x01;\n        parentObj.registerB = parentObj.registerB & 0x80 | parentObj.registerB >> 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerB == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registerC & 0x01) == 0x01;\n        parentObj.registerC = parentObj.registerC & 0x80 | parentObj.registerC >> 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerC == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registerD & 0x01) == 0x01;\n        parentObj.registerD = parentObj.registerD & 0x80 | parentObj.registerD >> 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerD == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registerE & 0x01) == 0x01;\n        parentObj.registerE = parentObj.registerE & 0x80 | parentObj.registerE >> 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerE == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registersHL & 0x0100) == 0x0100;\n        parentObj.registersHL = parentObj.registersHL >> 1 & 0xFF00 | parentObj.registersHL & 0x80FF;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registersHL < 0x100;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registersHL & 0x0001) == 0x0001;\n        parentObj.registersHL = parentObj.registersHL & 0xFF80 | (parentObj.registersHL & 0xFF) >> 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0xFF) == 0;\n    },\n    function(parentObj) {\n        var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        parentObj.FCarry = (temp_var & 0x01) == 0x01;\n        temp_var = temp_var & 0x80 | temp_var >> 1;\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = temp_var == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registerA & 0x01) == 0x01;\n        parentObj.registerA = parentObj.registerA & 0x80 | parentObj.registerA >> 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerA == 0;\n    },\n    function(parentObj) {\n        parentObj.registerB = (parentObj.registerB & 0xF) << 4 | parentObj.registerB >> 4;\n        parentObj.FZero = parentObj.registerB == 0;\n        parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n    },\n    function(parentObj) {\n        parentObj.registerC = (parentObj.registerC & 0xF) << 4 | parentObj.registerC >> 4;\n        parentObj.FZero = parentObj.registerC == 0;\n        parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n    },\n    function(parentObj) {\n        parentObj.registerD = (parentObj.registerD & 0xF) << 4 | parentObj.registerD >> 4;\n        parentObj.FZero = parentObj.registerD == 0;\n        parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n    },\n    function(parentObj) {\n        parentObj.registerE = (parentObj.registerE & 0xF) << 4 | parentObj.registerE >> 4;\n        parentObj.FZero = parentObj.registerE == 0;\n        parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n    },\n    function(parentObj) {\n        parentObj.registersHL = (parentObj.registersHL & 0xF00) << 4 | (parentObj.registersHL & 0xF000) >> 4 | parentObj.registersHL & 0xFF;\n        parentObj.FZero = parentObj.registersHL < 0x100;\n        parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n    },\n    function(parentObj) {\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | (parentObj.registersHL & 0xF) << 4 | (parentObj.registersHL & 0xF0) >> 4;\n        parentObj.FZero = (parentObj.registersHL & 0xFF) == 0;\n        parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n    },\n    function(parentObj) {\n        var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        temp_var = (temp_var & 0xF) << 4 | temp_var >> 4;\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n        parentObj.FZero = temp_var == 0;\n        parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n    },\n    function(parentObj) {\n        parentObj.registerA = (parentObj.registerA & 0xF) << 4 | parentObj.registerA >> 4;\n        parentObj.FZero = parentObj.registerA == 0;\n        parentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registerB & 0x01) == 0x01;\n        parentObj.registerB >>= 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerB == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registerC & 0x01) == 0x01;\n        parentObj.registerC >>= 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerC == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registerD & 0x01) == 0x01;\n        parentObj.registerD >>= 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerD == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registerE & 0x01) == 0x01;\n        parentObj.registerE >>= 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerE == 0;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registersHL & 0x0100) == 0x0100;\n        parentObj.registersHL = parentObj.registersHL >> 1 & 0xFF00 | parentObj.registersHL & 0xFF;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registersHL < 0x100;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registersHL & 0x0001) == 0x0001;\n        parentObj.registersHL = parentObj.registersHL & 0xFF00 | (parentObj.registersHL & 0xFF) >> 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0xFF) == 0;\n    },\n    function(parentObj) {\n        var temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n        parentObj.FCarry = (temp_var & 0x01) == 0x01;\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var >> 1);\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = temp_var < 2;\n    },\n    function(parentObj) {\n        parentObj.FCarry = (parentObj.registerA & 0x01) == 0x01;\n        parentObj.registerA >>= 1;\n        parentObj.FHalfCarry = parentObj.FSubtract = false;\n        parentObj.FZero = parentObj.registerA == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerB & 0x01) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerC & 0x01) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerD & 0x01) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerE & 0x01) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x0100) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x0001) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x01) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerA & 0x01) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerB & 0x02) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerC & 0x02) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerD & 0x02) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerE & 0x02) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x0200) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x0002) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x02) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerA & 0x02) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerB & 0x04) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerC & 0x04) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerD & 0x04) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerE & 0x04) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x0400) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x0004) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x04) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerA & 0x04) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerB & 0x08) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerC & 0x08) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerD & 0x08) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerE & 0x08) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x0800) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x0008) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x08) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerA & 0x08) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerB & 0x10) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerC & 0x10) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerD & 0x10) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerE & 0x10) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x1000) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x0010) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x10) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerA & 0x10) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerB & 0x20) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerC & 0x20) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerD & 0x20) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerE & 0x20) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x2000) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x0020) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x20) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerA & 0x20) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerB & 0x40) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerC & 0x40) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerD & 0x40) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerE & 0x40) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x4000) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x0040) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x40) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerA & 0x40) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerB & 0x80) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerC & 0x80) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerD & 0x80) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerE & 0x80) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x8000) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registersHL & 0x0080) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x80) == 0;\n    },\n    function(parentObj) {\n        parentObj.FHalfCarry = true;\n        parentObj.FSubtract = false;\n        parentObj.FZero = (parentObj.registerA & 0x80) == 0;\n    },\n    function(parentObj) {\n        parentObj.registerB &= 0xFE;\n    },\n    function(parentObj) {\n        parentObj.registerC &= 0xFE;\n    },\n    function(parentObj) {\n        parentObj.registerD &= 0xFE;\n    },\n    function(parentObj) {\n        parentObj.registerE &= 0xFE;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0xFEFF;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0xFFFE;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xFE);\n    },\n    function(parentObj) {\n        parentObj.registerA &= 0xFE;\n    },\n    function(parentObj) {\n        parentObj.registerB &= 0xFD;\n    },\n    function(parentObj) {\n        parentObj.registerC &= 0xFD;\n    },\n    function(parentObj) {\n        parentObj.registerD &= 0xFD;\n    },\n    function(parentObj) {\n        parentObj.registerE &= 0xFD;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0xFDFF;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0xFFFD;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xFD);\n    },\n    function(parentObj) {\n        parentObj.registerA &= 0xFD;\n    },\n    function(parentObj) {\n        parentObj.registerB &= 0xFB;\n    },\n    function(parentObj) {\n        parentObj.registerC &= 0xFB;\n    },\n    function(parentObj) {\n        parentObj.registerD &= 0xFB;\n    },\n    function(parentObj) {\n        parentObj.registerE &= 0xFB;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0xFBFF;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0xFFFB;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xFB);\n    },\n    function(parentObj) {\n        parentObj.registerA &= 0xFB;\n    },\n    function(parentObj) {\n        parentObj.registerB &= 0xF7;\n    },\n    function(parentObj) {\n        parentObj.registerC &= 0xF7;\n    },\n    function(parentObj) {\n        parentObj.registerD &= 0xF7;\n    },\n    function(parentObj) {\n        parentObj.registerE &= 0xF7;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0xF7FF;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0xFFF7;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xF7);\n    },\n    function(parentObj) {\n        parentObj.registerA &= 0xF7;\n    },\n    function(parentObj) {\n        parentObj.registerB &= 0xEF;\n    },\n    function(parentObj) {\n        parentObj.registerC &= 0xEF;\n    },\n    function(parentObj) {\n        parentObj.registerD &= 0xEF;\n    },\n    function(parentObj) {\n        parentObj.registerE &= 0xEF;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0xEFFF;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0xFFEF;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xEF);\n    },\n    function(parentObj) {\n        parentObj.registerA &= 0xEF;\n    },\n    function(parentObj) {\n        parentObj.registerB &= 0xDF;\n    },\n    function(parentObj) {\n        parentObj.registerC &= 0xDF;\n    },\n    function(parentObj) {\n        parentObj.registerD &= 0xDF;\n    },\n    function(parentObj) {\n        parentObj.registerE &= 0xDF;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0xDFFF;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0xFFDF;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xDF);\n    },\n    function(parentObj) {\n        parentObj.registerA &= 0xDF;\n    },\n    function(parentObj) {\n        parentObj.registerB &= 0xBF;\n    },\n    function(parentObj) {\n        parentObj.registerC &= 0xBF;\n    },\n    function(parentObj) {\n        parentObj.registerD &= 0xBF;\n    },\n    function(parentObj) {\n        parentObj.registerE &= 0xBF;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0xBFFF;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0xFFBF;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xBF);\n    },\n    function(parentObj) {\n        parentObj.registerA &= 0xBF;\n    },\n    function(parentObj) {\n        parentObj.registerB &= 0x7F;\n    },\n    function(parentObj) {\n        parentObj.registerC &= 0x7F;\n    },\n    function(parentObj) {\n        parentObj.registerD &= 0x7F;\n    },\n    function(parentObj) {\n        parentObj.registerE &= 0x7F;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0x7FFF;\n    },\n    function(parentObj) {\n        parentObj.registersHL &= 0xFF7F;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x7F);\n    },\n    function(parentObj) {\n        parentObj.registerA &= 0x7F;\n    },\n    function(parentObj) {\n        parentObj.registerB |= 0x01;\n    },\n    function(parentObj) {\n        parentObj.registerC |= 0x01;\n    },\n    function(parentObj) {\n        parentObj.registerD |= 0x01;\n    },\n    function(parentObj) {\n        parentObj.registerE |= 0x01;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x0100;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x01;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x01);\n    },\n    function(parentObj) {\n        parentObj.registerA |= 0x01;\n    },\n    function(parentObj) {\n        parentObj.registerB |= 0x02;\n    },\n    function(parentObj) {\n        parentObj.registerC |= 0x02;\n    },\n    function(parentObj) {\n        parentObj.registerD |= 0x02;\n    },\n    function(parentObj) {\n        parentObj.registerE |= 0x02;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x0200;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x02;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x02);\n    },\n    function(parentObj) {\n        parentObj.registerA |= 0x02;\n    },\n    function(parentObj) {\n        parentObj.registerB |= 0x04;\n    },\n    function(parentObj) {\n        parentObj.registerC |= 0x04;\n    },\n    function(parentObj) {\n        parentObj.registerD |= 0x04;\n    },\n    function(parentObj) {\n        parentObj.registerE |= 0x04;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x0400;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x04;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x04);\n    },\n    function(parentObj) {\n        parentObj.registerA |= 0x04;\n    },\n    function(parentObj) {\n        parentObj.registerB |= 0x08;\n    },\n    function(parentObj) {\n        parentObj.registerC |= 0x08;\n    },\n    function(parentObj) {\n        parentObj.registerD |= 0x08;\n    },\n    function(parentObj) {\n        parentObj.registerE |= 0x08;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x0800;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x08;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x08);\n    },\n    function(parentObj) {\n        parentObj.registerA |= 0x08;\n    },\n    function(parentObj) {\n        parentObj.registerB |= 0x10;\n    },\n    function(parentObj) {\n        parentObj.registerC |= 0x10;\n    },\n    function(parentObj) {\n        parentObj.registerD |= 0x10;\n    },\n    function(parentObj) {\n        parentObj.registerE |= 0x10;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x1000;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x10;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x10);\n    },\n    function(parentObj) {\n        parentObj.registerA |= 0x10;\n    },\n    function(parentObj) {\n        parentObj.registerB |= 0x20;\n    },\n    function(parentObj) {\n        parentObj.registerC |= 0x20;\n    },\n    function(parentObj) {\n        parentObj.registerD |= 0x20;\n    },\n    function(parentObj) {\n        parentObj.registerE |= 0x20;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x2000;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x20;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x20);\n    },\n    function(parentObj) {\n        parentObj.registerA |= 0x20;\n    },\n    function(parentObj) {\n        parentObj.registerB |= 0x40;\n    },\n    function(parentObj) {\n        parentObj.registerC |= 0x40;\n    },\n    function(parentObj) {\n        parentObj.registerD |= 0x40;\n    },\n    function(parentObj) {\n        parentObj.registerE |= 0x40;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x4000;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x40;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x40);\n    },\n    function(parentObj) {\n        parentObj.registerA |= 0x40;\n    },\n    function(parentObj) {\n        parentObj.registerB |= 0x80;\n    },\n    function(parentObj) {\n        parentObj.registerC |= 0x80;\n    },\n    function(parentObj) {\n        parentObj.registerD |= 0x80;\n    },\n    function(parentObj) {\n        parentObj.registerE |= 0x80;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x8000;\n    },\n    function(parentObj) {\n        parentObj.registersHL |= 0x80;\n    },\n    function(parentObj) {\n        parentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x80);\n    },\n    function(parentObj) {\n        parentObj.registerA |= 0x80;\n    }\n];\nmodule.exports = $7db07f2e1daabd29$var$CBOPCODE;\n\n});\n\nparcelRegister(\"8QGsE\", function(module, exports) {\n//Number of machine cycles for each instruction:\nmodule.exports = [\n    /*   0,  1,  2,  3,  4,  5,  6,  7,      8,  9,  A, B,  C,  D, E,  F*/ 4,\n    12,\n    8,\n    8,\n    4,\n    4,\n    8,\n    4,\n    20,\n    8,\n    8,\n    8,\n    4,\n    4,\n    8,\n    4,\n    4,\n    12,\n    8,\n    8,\n    4,\n    4,\n    8,\n    4,\n    12,\n    8,\n    8,\n    8,\n    4,\n    4,\n    8,\n    4,\n    8,\n    12,\n    8,\n    8,\n    4,\n    4,\n    8,\n    4,\n    8,\n    8,\n    8,\n    8,\n    4,\n    4,\n    8,\n    4,\n    8,\n    12,\n    8,\n    8,\n    12,\n    12,\n    12,\n    4,\n    8,\n    8,\n    8,\n    8,\n    4,\n    4,\n    8,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    8,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    8,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    8,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    8,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    8,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    8,\n    4,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    4,\n    8,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    8,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    8,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    8,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    8,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    8,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    8,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    8,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    8,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    4,\n    8,\n    4,\n    8,\n    12,\n    12,\n    16,\n    12,\n    16,\n    8,\n    16,\n    8,\n    16,\n    12,\n    0,\n    12,\n    24,\n    8,\n    16,\n    8,\n    12,\n    12,\n    4,\n    12,\n    16,\n    8,\n    16,\n    8,\n    16,\n    12,\n    4,\n    12,\n    4,\n    8,\n    16,\n    12,\n    12,\n    8,\n    4,\n    4,\n    16,\n    8,\n    16,\n    16,\n    4,\n    16,\n    4,\n    4,\n    4,\n    8,\n    16,\n    12,\n    12,\n    8,\n    4,\n    4,\n    16,\n    8,\n    16,\n    12,\n    8,\n    16,\n    4,\n    0,\n    4,\n    8,\n    16 //F\n];\n\n});\n\nparcelRegister(\"gOFKk\", function(module, exports) {\n//Number of machine cycles for each 0xCBXX instruction:\nmodule.exports = [\n    /*  0, 1, 2, 3, 4, 5,  6, 7,        8, 9, A, B, C, D,  E, F*/ 8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    12,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    12,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    12,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    12,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    12,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    12,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    12,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    12,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    8,\n    16,\n    8 //F\n];\n\n});\n\nvar $eca075ad100d834d$exports = {};\n\"use strict\";\n\n\nvar $205d8b7d214f5014$exports = {};\nvar $cfae44f0dfdf62c0$exports = {};\n// shim for using process in browser\nvar $cfae44f0dfdf62c0$var$process = $cfae44f0dfdf62c0$exports = {};\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\nvar $cfae44f0dfdf62c0$var$cachedSetTimeout;\nvar $cfae44f0dfdf62c0$var$cachedClearTimeout;\nfunction $cfae44f0dfdf62c0$var$defaultSetTimout() {\n    throw new Error(\"setTimeout has not been defined\");\n}\nfunction $cfae44f0dfdf62c0$var$defaultClearTimeout() {\n    throw new Error(\"clearTimeout has not been defined\");\n}\n(function() {\n    try {\n        if (typeof setTimeout === \"function\") $cfae44f0dfdf62c0$var$cachedSetTimeout = setTimeout;\n        else $cfae44f0dfdf62c0$var$cachedSetTimeout = $cfae44f0dfdf62c0$var$defaultSetTimout;\n    } catch (e) {\n        $cfae44f0dfdf62c0$var$cachedSetTimeout = $cfae44f0dfdf62c0$var$defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === \"function\") $cfae44f0dfdf62c0$var$cachedClearTimeout = clearTimeout;\n        else $cfae44f0dfdf62c0$var$cachedClearTimeout = $cfae44f0dfdf62c0$var$defaultClearTimeout;\n    } catch (e) {\n        $cfae44f0dfdf62c0$var$cachedClearTimeout = $cfae44f0dfdf62c0$var$defaultClearTimeout;\n    }\n})();\nfunction $cfae44f0dfdf62c0$var$runTimeout(fun) {\n    if ($cfae44f0dfdf62c0$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n    // if setTimeout wasn't available but was latter defined\n    if (($cfae44f0dfdf62c0$var$cachedSetTimeout === $cfae44f0dfdf62c0$var$defaultSetTimout || !$cfae44f0dfdf62c0$var$cachedSetTimeout) && setTimeout) {\n        $cfae44f0dfdf62c0$var$cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return $cfae44f0dfdf62c0$var$cachedSetTimeout(fun, 0);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return $cfae44f0dfdf62c0$var$cachedSetTimeout.call(null, fun, 0);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return $cfae44f0dfdf62c0$var$cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n}\nfunction $cfae44f0dfdf62c0$var$runClearTimeout(marker) {\n    if ($cfae44f0dfdf62c0$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations\n    return clearTimeout(marker);\n    // if clearTimeout wasn't available but was latter defined\n    if (($cfae44f0dfdf62c0$var$cachedClearTimeout === $cfae44f0dfdf62c0$var$defaultClearTimeout || !$cfae44f0dfdf62c0$var$cachedClearTimeout) && clearTimeout) {\n        $cfae44f0dfdf62c0$var$cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return $cfae44f0dfdf62c0$var$cachedClearTimeout(marker);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return $cfae44f0dfdf62c0$var$cachedClearTimeout.call(null, marker);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return $cfae44f0dfdf62c0$var$cachedClearTimeout.call(this, marker);\n        }\n    }\n}\nvar $cfae44f0dfdf62c0$var$queue = [];\nvar $cfae44f0dfdf62c0$var$draining = false;\nvar $cfae44f0dfdf62c0$var$currentQueue;\nvar $cfae44f0dfdf62c0$var$queueIndex = -1;\nfunction $cfae44f0dfdf62c0$var$cleanUpNextTick() {\n    if (!$cfae44f0dfdf62c0$var$draining || !$cfae44f0dfdf62c0$var$currentQueue) return;\n    $cfae44f0dfdf62c0$var$draining = false;\n    if ($cfae44f0dfdf62c0$var$currentQueue.length) $cfae44f0dfdf62c0$var$queue = $cfae44f0dfdf62c0$var$currentQueue.concat($cfae44f0dfdf62c0$var$queue);\n    else $cfae44f0dfdf62c0$var$queueIndex = -1;\n    if ($cfae44f0dfdf62c0$var$queue.length) $cfae44f0dfdf62c0$var$drainQueue();\n}\nfunction $cfae44f0dfdf62c0$var$drainQueue() {\n    if ($cfae44f0dfdf62c0$var$draining) return;\n    var timeout = $cfae44f0dfdf62c0$var$runTimeout($cfae44f0dfdf62c0$var$cleanUpNextTick);\n    $cfae44f0dfdf62c0$var$draining = true;\n    var len = $cfae44f0dfdf62c0$var$queue.length;\n    while(len){\n        $cfae44f0dfdf62c0$var$currentQueue = $cfae44f0dfdf62c0$var$queue;\n        $cfae44f0dfdf62c0$var$queue = [];\n        while(++$cfae44f0dfdf62c0$var$queueIndex < len)if ($cfae44f0dfdf62c0$var$currentQueue) $cfae44f0dfdf62c0$var$currentQueue[$cfae44f0dfdf62c0$var$queueIndex].run();\n        $cfae44f0dfdf62c0$var$queueIndex = -1;\n        len = $cfae44f0dfdf62c0$var$queue.length;\n    }\n    $cfae44f0dfdf62c0$var$currentQueue = null;\n    $cfae44f0dfdf62c0$var$draining = false;\n    $cfae44f0dfdf62c0$var$runClearTimeout(timeout);\n}\n$cfae44f0dfdf62c0$var$process.nextTick = function(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];\n    $cfae44f0dfdf62c0$var$queue.push(new $cfae44f0dfdf62c0$var$Item(fun, args));\n    if ($cfae44f0dfdf62c0$var$queue.length === 1 && !$cfae44f0dfdf62c0$var$draining) $cfae44f0dfdf62c0$var$runTimeout($cfae44f0dfdf62c0$var$drainQueue);\n};\n// v8 likes predictible objects\nfunction $cfae44f0dfdf62c0$var$Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\n$cfae44f0dfdf62c0$var$Item.prototype.run = function() {\n    this.fun.apply(null, this.array);\n};\n$cfae44f0dfdf62c0$var$process.title = \"browser\";\n$cfae44f0dfdf62c0$var$process.browser = true;\n$cfae44f0dfdf62c0$var$process.env = {};\n$cfae44f0dfdf62c0$var$process.argv = [];\n$cfae44f0dfdf62c0$var$process.version = \"\"; // empty string to avoid regexp issues\n$cfae44f0dfdf62c0$var$process.versions = {};\nfunction $cfae44f0dfdf62c0$var$noop() {}\n$cfae44f0dfdf62c0$var$process.on = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.addListener = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.once = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.off = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.removeListener = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.removeAllListeners = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.emit = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.prependListener = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.prependOnceListener = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.listeners = function(name) {\n    return [];\n};\n$cfae44f0dfdf62c0$var$process.binding = function(name) {\n    throw new Error(\"process.binding is not supported\");\n};\n$cfae44f0dfdf62c0$var$process.cwd = function() {\n    return \"/\";\n};\n$cfae44f0dfdf62c0$var$process.chdir = function(dir) {\n    throw new Error(\"process.chdir is not supported\");\n};\n$cfae44f0dfdf62c0$var$process.umask = function() {\n    return 0;\n};\n\n\n\"use-strict\";\nvar $6de83094d3815a3f$exports = {};\n\"use strict\";\nvar $a9f5d76ceefeeace$exports = {};\nfunction $a9f5d76ceefeeace$var$Instance(ROMImage) {\n    //My added variables--------------\n    this.frameDone = false;\n    this.currentScreen = []; //this.currentScreenContents;\n    this.lastScreen = []; //A copy of the last frame's screen.\n    this.partialScreen = {}; //An object with the differences from the last screen.\n    //Params, etc...\n    this.currentFrame = []; //Array of the most recent frame.\n    this.drawContext = null; // LCD Context\n    this.ROMImage = ROMImage; //The game's ROM. \n    //CPU Registers and Flags:\n    this.registerA = 0x01; //Register A (Accumulator)\n    this.FZero = true; //Register F  - Result was zero\n    this.FSubtract = false; //Register F  - Subtraction was executed\n    this.FHalfCarry = true; //Register F  - Half carry or half borrow\n    this.FCarry = true; //Register F  - Carry or borrow\n    this.registerB = 0x00; //Register B\n    this.registerC = 0x13; //Register C\n    this.registerD = 0x00; //Register D\n    this.registerE = 0xD8; //Register E\n    this.registersHL = 0x014D; //Registers H and L combined\n    this.stackPointer = 0xFFFE; //Stack Pointer\n    this.programCounter = 0x0100; //Program Counter\n    //Some CPU Emulation State Variables:\n    this.CPUCyclesTotal = 0; //Relative CPU clocking to speed set, rounded appropriately.\n    this.CPUCyclesTotalBase = 0; //Relative CPU clocking to speed set base.\n    this.CPUCyclesTotalCurrent = 0; //Relative CPU clocking to speed set, the directly used value.\n    this.CPUCyclesTotalRoundoff = 0; //Clocking per iteration rounding catch.\n    this.baseCPUCyclesPerIteration = 0; //CPU clocks per iteration at 1x speed.\n    this.remainingClocks = 0; //HALT clocking overrun carry over.\n    this.inBootstrap = true; //Whether we're in the GBC boot ROM.\n    this.usedBootROM = false; //Updated upon ROM loading...\n    this.usedGBCBootROM = false; //Did we boot to the GBC boot ROM?\n    this.halt = false; //Has the CPU been suspended until the next interrupt?\n    this.skipPCIncrement = false; //Did we trip the DMG Halt bug?\n    this.stopEmulator = 3; //Has the emulation been paused or a frame has ended?\n    this.IME = true; //Are interrupts enabled?\n    this.IRQLineMatched = 0; //CPU IRQ assertion.\n    this.interruptsRequested = 0; //IF Register\n    this.interruptsEnabled = 0; //IE Register\n    this.hdmaRunning = false; //HDMA Transfer Flag - GBC only\n    this.CPUTicks = 0; //The number of clock cycles emulated.\n    this.doubleSpeedShifter = 0; //GBC double speed clocking shifter.\n    this.JoyPad = 0xFF; //Joypad State (two four-bit states actually)\n    this.CPUStopped = false; //CPU STOP status.\n    //Main RAM, MBC RAM, GBC Main RAM, VRAM, etc.\n    this.memoryReader = []; //Array of functions mapped to read back memory\n    this.memoryWriter = []; //Array of functions mapped to write to memory\n    this.memoryHighReader = []; //Array of functions mapped to read back 0xFFXX memory\n    this.memoryHighWriter = []; //Array of functions mapped to write to 0xFFXX memory\n    this.ROM = []; //The full ROM file dumped to an array.\n    this.memory = []; //Main Core Memory\n    this.MBCRam = []; //Switchable RAM (Used by games for more RAM) for the main memory range 0xA000 - 0xC000.\n    this.VRAM = []; //Extra VRAM bank for GBC.\n    this.GBCMemory = []; //GBC main RAM Banks\n    this.MBC1Mode = false; //MBC1 Type (4/32, 16/8)\n    this.MBCRAMBanksEnabled = false; //MBC RAM Access Control.\n    this.currMBCRAMBank = 0; //MBC Currently Indexed RAM Bank\n    this.currMBCRAMBankPosition = -40960; //MBC Position Adder;\n    this.cGBC = false; //GameBoy Color detection.\n    this.gbcRamBank = 1; //Currently Switched GameBoy Color ram bank\n    this.gbcRamBankPosition = -53248; //GBC RAM offset from address start.\n    this.gbcRamBankPositionECHO = -61440; //GBC RAM (ECHO mirroring) offset from address start.\n    this.RAMBanks = [\n        0,\n        1,\n        2,\n        4,\n        16\n    ]; //Used to map the RAM banks to maximum size the MBC used can do.\n    this.ROMBank1offs = 0; //Offset of the ROM bank switching.\n    this.currentROMBank = 0; //The parsed current ROM bank selection.\n    this.cartridgeType = 0; //Cartridge Type\n    this.name = \"\"; //Name of the game\n    this.gameCode = \"\"; //Game code (Suffix for older games)\n    this.fromSaveState = false; //A boolean to see if this was loaded in as a save state.\n    this.savedStateFileName = \"\"; //When loaded in as a save state, this will not be empty.\n    this.STATTracker = 0; //Tracker for STAT triggering.\n    this.modeSTAT = 0; //The scan line mode (for lines 1-144 it's 2-3-0, for 145-154 it's 1)\n    this.spriteCount = 252; //Mode 3 extra clocking counter (Depends on how many sprites are on the current line.).\n    this.LYCMatchTriggerSTAT = false; //Should we trigger an interrupt if LY==LYC?\n    this.mode2TriggerSTAT = false; //Should we trigger an interrupt if in mode 2?\n    this.mode1TriggerSTAT = false; //Should we trigger an interrupt if in mode 1?\n    this.mode0TriggerSTAT = false; //Should we trigger an interrupt if in mode 0?\n    this.LCDisOn = false; //Is the emulated LCD controller on?\n    this.LINECONTROL = []; //Array of functions to handle each scan line we do (onscreen + offscreen)\n    this.DISPLAYOFFCONTROL = [\n        function(parentObj) {\n        //Array of line 0 function to handle the LCD controller when it's off (Do nothing!).\n        }\n    ];\n    this.LCDCONTROL = null; //Pointer to either LINECONTROL or DISPLAYOFFCONTROL.\n    this.initializeLCDController(); //Compile the LCD controller functions.\n    //RTC (Real Time Clock for MBC3):\n    this.RTCisLatched = false;\n    this.latchedSeconds = 0; //RTC latched seconds.\n    this.latchedMinutes = 0; //RTC latched minutes.\n    this.latchedHours = 0; //RTC latched hours.\n    this.latchedLDays = 0; //RTC latched lower 8-bits of the day counter.\n    this.latchedHDays = 0; //RTC latched high-bit of the day counter.\n    this.RTCSeconds = 0; //RTC seconds counter.\n    this.RTCMinutes = 0; //RTC minutes counter.\n    this.RTCHours = 0; //RTC hours counter.\n    this.RTCDays = 0; //RTC days counter.\n    this.RTCDayOverFlow = false; //Did the RTC overflow and wrap the day counter?\n    this.RTCHALT = false; //Is the RTC allowed to clock up?\n    //Gyro:\n    this.highX = 127;\n    this.lowX = 127;\n    this.highY = 127;\n    this.lowY = 127;\n    //Sound variables:\n    this.audioHandle = null; //XAudioJS handle\n    this.numSamplesTotal = 0; //Length of the sound buffers.\n    this.dutyLookup = [\n        [\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            true\n        ],\n        [\n            true,\n            false,\n            false,\n            false,\n            false,\n            false,\n            false,\n            true\n        ],\n        [\n            true,\n            false,\n            false,\n            false,\n            false,\n            true,\n            true,\n            true\n        ],\n        [\n            false,\n            true,\n            true,\n            true,\n            true,\n            true,\n            true,\n            false\n        ]\n    ];\n    this.bufferContainAmount = 0; //Buffer maintenance metric.\n    this.LSFR15Table = null;\n    this.LSFR7Table = null;\n    this.noiseSampleTable = null;\n    this.initializeAudioStartState();\n    this.soundMasterEnabled = false; //As its name implies\n    this.channel3PCM = null; //Channel 3 adjusted sample buffer.\n    //Vin Shit:\n    this.VinLeftChannelMasterVolume = 8; //Computed post-mixing volume.\n    this.VinRightChannelMasterVolume = 8; //Computed post-mixing volume.\n    //Channel paths enabled:\n    this.leftChannel1 = false;\n    this.leftChannel2 = false;\n    this.leftChannel3 = false;\n    this.leftChannel4 = false;\n    this.rightChannel1 = false;\n    this.rightChannel2 = false;\n    this.rightChannel3 = false;\n    this.rightChannel4 = false;\n    this.audioClocksUntilNextEvent = 1;\n    this.audioClocksUntilNextEventCounter = 1;\n    //Channel output level caches:\n    this.channel1currentSampleLeft = 0;\n    this.channel1currentSampleRight = 0;\n    this.channel2currentSampleLeft = 0;\n    this.channel2currentSampleRight = 0;\n    this.channel3currentSampleLeft = 0;\n    this.channel3currentSampleRight = 0;\n    this.channel4currentSampleLeft = 0;\n    this.channel4currentSampleRight = 0;\n    this.channel1currentSampleLeftSecondary = 0;\n    this.channel1currentSampleRightSecondary = 0;\n    this.channel2currentSampleLeftSecondary = 0;\n    this.channel2currentSampleRightSecondary = 0;\n    this.channel3currentSampleLeftSecondary = 0;\n    this.channel3currentSampleRightSecondary = 0;\n    this.channel4currentSampleLeftSecondary = 0;\n    this.channel4currentSampleRightSecondary = 0;\n    this.channel1currentSampleLeftTrimary = 0;\n    this.channel1currentSampleRightTrimary = 0;\n    this.channel2currentSampleLeftTrimary = 0;\n    this.channel2currentSampleRightTrimary = 0;\n    this.mixerOutputCache = 0;\n    //Pre-multipliers to cache some calculations:\n    this.emulatorSpeed = 1;\n    this.initializeTiming();\n    //Audio generation counters:\n    this.audioTicks = 0; //Used to sample the audio system every x CPU instructions.\n    this.audioIndex = 0; //Used to keep alignment on audio generation.\n    this.downsampleInput = 0;\n    this.audioDestinationPosition = 0; //Used to keep alignment on audio generation.\n    this.rollover = 0; //Used to keep alignment on the number of samples to output (Realign from counter alias).\n    //Timing Variables\n    this.emulatorTicks = 0; //Times for how many instructions to execute before ending the loop.\n    this.DIVTicks = 56; //DIV Ticks Counter (Invisible lower 8-bit)\n    this.LCDTicks = 60; //Counter for how many instructions have been executed on a scanline so far.\n    this.timerTicks = 0; //Counter for the TIMA timer.\n    this.TIMAEnabled = false; //Is TIMA enabled?\n    this.TACClocker = 1024; //Timer Max Ticks\n    this.serialTimer = 0; //Serial IRQ Timer\n    this.serialShiftTimer = 0; //Serial Transfer Shift Timer\n    this.serialShiftTimerAllocated = 0; //Serial Transfer Shift Timer Refill\n    this.IRQEnableDelay = 0; //Are the interrupts on queue to be enabled?\n    var dateVar = new Date();\n    this.lastIteration = dateVar.getTime(); //The last time we iterated the main loop.\n    dateVar = new Date();\n    this.firstIteration = dateVar.getTime();\n    this.iterations = 0;\n    this.actualScanLine = 0; //Actual scan line...\n    this.lastUnrenderedLine = 0; //Last rendered scan line...\n    this.queuedScanLines = 0;\n    this.totalLinesPassed = 0;\n    this.haltPostClocks = 0; //Post-Halt clocking.\n    //ROM Cartridge Components:\n    this.cMBC1 = false; //Does the cartridge use MBC1?\n    this.cMBC2 = false; //Does the cartridge use MBC2?\n    this.cMBC3 = false; //Does the cartridge use MBC3?\n    this.cMBC5 = false; //Does the cartridge use MBC5?\n    this.cMBC7 = false; //Does the cartridge use MBC7?\n    this.cSRAM = false; //Does the cartridge use save RAM?\n    this.cMMMO1 = false; //...\n    this.cRUMBLE = false; //Does the cartridge use the RUMBLE addressing (modified MBC5)?\n    this.cCamera = false; //Is the cartridge actually a GameBoy Camera?\n    this.cTAMA5 = false; //Does the cartridge use TAMA5? (Tamagotchi Cartridge)\n    this.cHuC3 = false; //Does the cartridge use HuC3 (Hudson Soft / modified MBC3)?\n    this.cHuC1 = false; //Does the cartridge use HuC1 (Hudson Soft / modified MBC1)?\n    this.cTIMER = false; //Does the cartridge have an RTC?\n    this.ROMBanks = [\n        2,\n        4,\n        8,\n        16,\n        32,\n        64,\n        128,\n        256,\n        512\n    ];\n    this.ROMBanks[0x52] = 72;\n    this.ROMBanks[0x53] = 80;\n    this.ROMBanks[0x54] = 96;\n    this.numRAMBanks = 0; //How many RAM banks were actually allocated?\n    ////Graphics Variables\n    this.currVRAMBank = 0; //Current VRAM bank for GBC.\n    this.backgroundX = 0; //Register SCX (X-Scroll)\n    this.backgroundY = 0; //Register SCY (Y-Scroll)\n    this.gfxWindowDisplay = false; //Is the windows enabled?\n    this.gfxSpriteShow = false; //Are sprites enabled?\n    this.gfxSpriteNormalHeight = true; //Are we doing 8x8 or 8x16 sprites?\n    this.bgEnabled = true; //Is the BG enabled?\n    this.BGPriorityEnabled = true; //Can we flag the BG for priority over sprites?\n    this.gfxWindowCHRBankPosition = 0; //The current bank of the character map the window uses.\n    this.gfxBackgroundCHRBankPosition = 0; //The current bank of the character map the BG uses.\n    this.gfxBackgroundBankOffset = 0x80; //Fast mapping of the tile numbering/\n    this.windowY = 0; //Current Y offset of the window.\n    this.windowX = 0; //Current X offset of the window.\n    this.drewBlank = 0; //To prevent the repeating of drawing a blank screen.\n    this.drewFrame = false; //Throttle how many draws we can do to once per iteration.\n    this.midScanlineOffset = -1; //mid-scanline rendering offset.\n    this.pixelEnd = 0; //track the x-coord limit for line rendering (mid-scanline usage).\n    this.currentX = 0; //The x-coord we left off at for mid-scanline rendering.\n    //BG Tile Pointer Caches:\n    this.BGCHRBank1 = null;\n    this.BGCHRBank2 = null;\n    this.BGCHRCurrentBank = null;\n    //Tile Data Cache:\n    this.tileCache = null;\n    //Palettes:\n    this.colors = [\n        0xEFFFDE,\n        0xADD794,\n        0x529273,\n        0x183442\n    ]; //\"Classic\" GameBoy palette colors.\n    this.OBJPalette = null;\n    this.BGPalette = null;\n    this.gbcOBJRawPalette = null;\n    this.gbcBGRawPalette = null;\n    this.gbOBJPalette = null;\n    this.gbBGPalette = null;\n    this.gbcOBJPalette = null;\n    this.gbcBGPalette = null;\n    this.gbBGColorizedPalette = null;\n    this.gbOBJColorizedPalette = null;\n    this.cachedBGPaletteConversion = null;\n    this.cachedOBJPaletteConversion = null;\n    this.updateGBBGPalette = this.updateGBRegularBGPalette;\n    this.updateGBOBJPalette = this.updateGBRegularOBJPalette;\n    this.colorizedGBPalettes = false;\n    this.BGLayerRender = null; //Reference to the BG rendering function.\n    this.WindowLayerRender = null; //Reference to the window rendering function.\n    this.SpriteLayerRender = null; //Reference to the OAM rendering function.\n    this.frameBuffer = []; //The internal frame-buffer.\n    this.swizzledFrame = null; //The secondary gfx buffer that holds the converted RGBA values.\n    this.canvasBuffer = null; //imageData handle\n    this.pixelStart = 0; //Temp variable for holding the current working framebuffer offset.\n    //Variables used for scaling in JS:\n    this.onscreenWidth = this.offscreenWidth = 160;\n    this.onscreenHeight = this.offScreenheight = 144;\n    this.offscreenRGBCount = this.onscreenWidth * this.onscreenHeight * 4;\n    this.resizePathClear = true;\n    //Initialize the white noise cache tables ahead of time:\n    this.intializeWhiteNoise();\n}\n$a9f5d76ceefeeace$exports = $a9f5d76ceefeeace$var$Instance;\n\n\nvar $2a65eeefd956ad48$exports = {};\nvar $2a65eeefd956ad48$var$settings = [\n    true,\n    true,\n    false,\n    1,\n    true,\n    false,\n    8,\n    10,\n    20,\n    false,\n    false,\n    false,\n    false,\n    true,\n    [\n        true,\n        true,\n        true,\n        true\n    ] //User controlled channel enables.\n];\n$2a65eeefd956ad48$exports = $2a65eeefd956ad48$var$settings;\n\n\nvar $c66bd72ba8d42551$export$fb931cd598921492;\nvar $c66bd72ba8d42551$export$8f9fb363b058ffe1;\nvar $c66bd72ba8d42551$var$saveState = function() {\n    return [\n        this.fromTypedArray(this.ROM),\n        this.inBootstrap,\n        this.registerA,\n        this.FZero,\n        this.FSubtract,\n        this.FHalfCarry,\n        this.FCarry,\n        this.registerB,\n        this.registerC,\n        this.registerD,\n        this.registerE,\n        this.registersHL,\n        this.stackPointer,\n        this.programCounter,\n        this.halt,\n        this.IME,\n        this.hdmaRunning,\n        this.CPUTicks,\n        this.doubleSpeedShifter,\n        this.fromTypedArray(this.memory),\n        this.fromTypedArray(this.MBCRam),\n        this.fromTypedArray(this.VRAM),\n        this.currVRAMBank,\n        this.fromTypedArray(this.GBCMemory),\n        this.MBC1Mode,\n        this.MBCRAMBanksEnabled,\n        this.currMBCRAMBank,\n        this.currMBCRAMBankPosition,\n        this.cGBC,\n        this.gbcRamBank,\n        this.gbcRamBankPosition,\n        this.ROMBank1offs,\n        this.currentROMBank,\n        this.cartridgeType,\n        this.name,\n        this.gameCode,\n        this.modeSTAT,\n        this.LYCMatchTriggerSTAT,\n        this.mode2TriggerSTAT,\n        this.mode1TriggerSTAT,\n        this.mode0TriggerSTAT,\n        this.LCDisOn,\n        this.gfxWindowCHRBankPosition,\n        this.gfxWindowDisplay,\n        this.gfxSpriteShow,\n        this.gfxSpriteNormalHeight,\n        this.gfxBackgroundCHRBankPosition,\n        this.gfxBackgroundBankOffset,\n        this.TIMAEnabled,\n        this.DIVTicks,\n        this.LCDTicks,\n        this.timerTicks,\n        this.TACClocker,\n        this.serialTimer,\n        this.serialShiftTimer,\n        this.serialShiftTimerAllocated,\n        this.IRQEnableDelay,\n        this.lastIteration,\n        this.cMBC1,\n        this.cMBC2,\n        this.cMBC3,\n        this.cMBC5,\n        this.cMBC7,\n        this.cSRAM,\n        this.cMMMO1,\n        this.cRUMBLE,\n        this.cCamera,\n        this.cTAMA5,\n        this.cHuC3,\n        this.cHuC1,\n        this.drewBlank,\n        this.fromTypedArray(this.frameBuffer),\n        this.bgEnabled,\n        this.BGPriorityEnabled,\n        this.channel1FrequencyTracker,\n        this.channel1FrequencyCounter,\n        this.channel1totalLength,\n        this.channel1envelopeVolume,\n        this.channel1envelopeType,\n        this.channel1envelopeSweeps,\n        this.channel1envelopeSweepsLast,\n        this.channel1consecutive,\n        this.channel1frequency,\n        this.channel1SweepFault,\n        this.channel1ShadowFrequency,\n        this.channel1timeSweep,\n        this.channel1lastTimeSweep,\n        this.channel1Swept,\n        this.channel1frequencySweepDivider,\n        this.channel1decreaseSweep,\n        this.channel2FrequencyTracker,\n        this.channel2FrequencyCounter,\n        this.channel2totalLength,\n        this.channel2envelopeVolume,\n        this.channel2envelopeType,\n        this.channel2envelopeSweeps,\n        this.channel2envelopeSweepsLast,\n        this.channel2consecutive,\n        this.channel2frequency,\n        this.channel3canPlay,\n        this.channel3totalLength,\n        this.channel3patternType,\n        this.channel3frequency,\n        this.channel3consecutive,\n        this.fromTypedArray(this.channel3PCM),\n        this.channel4FrequencyPeriod,\n        this.channel4lastSampleLookup,\n        this.channel4totalLength,\n        this.channel4envelopeVolume,\n        this.channel4currentVolume,\n        this.channel4envelopeType,\n        this.channel4envelopeSweeps,\n        this.channel4envelopeSweepsLast,\n        this.channel4consecutive,\n        this.channel4BitRange,\n        this.soundMasterEnabled,\n        this.VinLeftChannelMasterVolume,\n        this.VinRightChannelMasterVolume,\n        this.leftChannel1,\n        this.leftChannel2,\n        this.leftChannel3,\n        this.leftChannel4,\n        this.rightChannel1,\n        this.rightChannel2,\n        this.rightChannel3,\n        this.rightChannel4,\n        this.channel1currentSampleLeft,\n        this.channel1currentSampleRight,\n        this.channel2currentSampleLeft,\n        this.channel2currentSampleRight,\n        this.channel3currentSampleLeft,\n        this.channel3currentSampleRight,\n        this.channel4currentSampleLeft,\n        this.channel4currentSampleRight,\n        this.channel1currentSampleLeftSecondary,\n        this.channel1currentSampleRightSecondary,\n        this.channel2currentSampleLeftSecondary,\n        this.channel2currentSampleRightSecondary,\n        this.channel3currentSampleLeftSecondary,\n        this.channel3currentSampleRightSecondary,\n        this.channel4currentSampleLeftSecondary,\n        this.channel4currentSampleRightSecondary,\n        this.channel1currentSampleLeftTrimary,\n        this.channel1currentSampleRightTrimary,\n        this.channel2currentSampleLeftTrimary,\n        this.channel2currentSampleRightTrimary,\n        this.mixerOutputCache,\n        this.channel1DutyTracker,\n        this.channel1CachedDuty,\n        this.channel2DutyTracker,\n        this.channel2CachedDuty,\n        this.channel1Enabled,\n        this.channel2Enabled,\n        this.channel3Enabled,\n        this.channel4Enabled,\n        this.sequencerClocks,\n        this.sequencePosition,\n        this.channel3Counter,\n        this.channel4Counter,\n        this.cachedChannel3Sample,\n        this.cachedChannel4Sample,\n        this.channel3FrequencyPeriod,\n        this.channel3lastSampleLookup,\n        this.actualScanLine,\n        this.lastUnrenderedLine,\n        this.queuedScanLines,\n        this.RTCisLatched,\n        this.latchedSeconds,\n        this.latchedMinutes,\n        this.latchedHours,\n        this.latchedLDays,\n        this.latchedHDays,\n        this.RTCSeconds,\n        this.RTCMinutes,\n        this.RTCHours,\n        this.RTCDays,\n        this.RTCDayOverFlow,\n        this.RTCHALT,\n        this.usedBootROM,\n        this.skipPCIncrement,\n        this.STATTracker,\n        this.gbcRamBankPositionECHO,\n        this.numRAMBanks,\n        this.windowY,\n        this.windowX,\n        this.fromTypedArray(this.gbcOBJRawPalette),\n        this.fromTypedArray(this.gbcBGRawPalette),\n        this.fromTypedArray(this.gbOBJPalette),\n        this.fromTypedArray(this.gbBGPalette),\n        this.fromTypedArray(this.gbcOBJPalette),\n        this.fromTypedArray(this.gbcBGPalette),\n        this.fromTypedArray(this.gbBGColorizedPalette),\n        this.fromTypedArray(this.gbOBJColorizedPalette),\n        this.fromTypedArray(this.cachedBGPaletteConversion),\n        this.fromTypedArray(this.cachedOBJPaletteConversion),\n        this.fromTypedArray(this.BGCHRBank1),\n        this.fromTypedArray(this.BGCHRBank2),\n        this.haltPostClocks,\n        this.interruptsRequested,\n        this.interruptsEnabled,\n        this.remainingClocks,\n        this.colorizedGBPalettes,\n        this.backgroundY,\n        this.backgroundX,\n        this.CPUStopped,\n        this.audioClocksUntilNextEvent,\n        this.audioClocksUntilNextEventCounter\n    ];\n};\nvar $c66bd72ba8d42551$var$returnFromState = function(returnedFrom) {\n    var index = 0;\n    var state = returnedFrom.slice(0);\n    this.ROM = this.toTypedArray(state[index++], \"uint8\");\n    this.ROMBankEdge = Math.floor(this.ROM.length / 0x4000);\n    this.inBootstrap = state[index++];\n    this.registerA = state[index++];\n    this.FZero = state[index++];\n    this.FSubtract = state[index++];\n    this.FHalfCarry = state[index++];\n    this.FCarry = state[index++];\n    this.registerB = state[index++];\n    this.registerC = state[index++];\n    this.registerD = state[index++];\n    this.registerE = state[index++];\n    this.registersHL = state[index++];\n    this.stackPointer = state[index++];\n    this.programCounter = state[index++];\n    this.halt = state[index++];\n    this.IME = state[index++];\n    this.hdmaRunning = state[index++];\n    this.CPUTicks = state[index++];\n    this.doubleSpeedShifter = state[index++];\n    this.memory = this.toTypedArray(state[index++], \"uint8\");\n    this.MBCRam = this.toTypedArray(state[index++], \"uint8\");\n    this.VRAM = this.toTypedArray(state[index++], \"uint8\");\n    this.currVRAMBank = state[index++];\n    this.GBCMemory = this.toTypedArray(state[index++], \"uint8\");\n    this.MBC1Mode = state[index++];\n    this.MBCRAMBanksEnabled = state[index++];\n    this.currMBCRAMBank = state[index++];\n    this.currMBCRAMBankPosition = state[index++];\n    this.cGBC = state[index++];\n    this.gbcRamBank = state[index++];\n    this.gbcRamBankPosition = state[index++];\n    this.ROMBank1offs = state[index++];\n    this.currentROMBank = state[index++];\n    this.cartridgeType = state[index++];\n    this.name = state[index++];\n    this.gameCode = state[index++];\n    this.modeSTAT = state[index++];\n    this.LYCMatchTriggerSTAT = state[index++];\n    this.mode2TriggerSTAT = state[index++];\n    this.mode1TriggerSTAT = state[index++];\n    this.mode0TriggerSTAT = state[index++];\n    this.LCDisOn = state[index++];\n    this.gfxWindowCHRBankPosition = state[index++];\n    this.gfxWindowDisplay = state[index++];\n    this.gfxSpriteShow = state[index++];\n    this.gfxSpriteNormalHeight = state[index++];\n    this.gfxBackgroundCHRBankPosition = state[index++];\n    this.gfxBackgroundBankOffset = state[index++];\n    this.TIMAEnabled = state[index++];\n    this.DIVTicks = state[index++];\n    this.LCDTicks = state[index++];\n    this.timerTicks = state[index++];\n    this.TACClocker = state[index++];\n    this.serialTimer = state[index++];\n    this.serialShiftTimer = state[index++];\n    this.serialShiftTimerAllocated = state[index++];\n    this.IRQEnableDelay = state[index++];\n    this.lastIteration = state[index++];\n    this.cMBC1 = state[index++];\n    this.cMBC2 = state[index++];\n    this.cMBC3 = state[index++];\n    this.cMBC5 = state[index++];\n    this.cMBC7 = state[index++];\n    this.cSRAM = state[index++];\n    this.cMMMO1 = state[index++];\n    this.cRUMBLE = state[index++];\n    this.cCamera = state[index++];\n    this.cTAMA5 = state[index++];\n    this.cHuC3 = state[index++];\n    this.cHuC1 = state[index++];\n    this.drewBlank = state[index++];\n    this.frameBuffer = this.toTypedArray(state[index++], \"int32\");\n    this.bgEnabled = state[index++];\n    this.BGPriorityEnabled = state[index++];\n    this.channel1FrequencyTracker = state[index++];\n    this.channel1FrequencyCounter = state[index++];\n    this.channel1totalLength = state[index++];\n    this.channel1envelopeVolume = state[index++];\n    this.channel1envelopeType = state[index++];\n    this.channel1envelopeSweeps = state[index++];\n    this.channel1envelopeSweepsLast = state[index++];\n    this.channel1consecutive = state[index++];\n    this.channel1frequency = state[index++];\n    this.channel1SweepFault = state[index++];\n    this.channel1ShadowFrequency = state[index++];\n    this.channel1timeSweep = state[index++];\n    this.channel1lastTimeSweep = state[index++];\n    this.channel1Swept = state[index++];\n    this.channel1frequencySweepDivider = state[index++];\n    this.channel1decreaseSweep = state[index++];\n    this.channel2FrequencyTracker = state[index++];\n    this.channel2FrequencyCounter = state[index++];\n    this.channel2totalLength = state[index++];\n    this.channel2envelopeVolume = state[index++];\n    this.channel2envelopeType = state[index++];\n    this.channel2envelopeSweeps = state[index++];\n    this.channel2envelopeSweepsLast = state[index++];\n    this.channel2consecutive = state[index++];\n    this.channel2frequency = state[index++];\n    this.channel3canPlay = state[index++];\n    this.channel3totalLength = state[index++];\n    this.channel3patternType = state[index++];\n    this.channel3frequency = state[index++];\n    this.channel3consecutive = state[index++];\n    this.channel3PCM = this.toTypedArray(state[index++], \"int8\");\n    this.channel4FrequencyPeriod = state[index++];\n    this.channel4lastSampleLookup = state[index++];\n    this.channel4totalLength = state[index++];\n    this.channel4envelopeVolume = state[index++];\n    this.channel4currentVolume = state[index++];\n    this.channel4envelopeType = state[index++];\n    this.channel4envelopeSweeps = state[index++];\n    this.channel4envelopeSweepsLast = state[index++];\n    this.channel4consecutive = state[index++];\n    this.channel4BitRange = state[index++];\n    this.soundMasterEnabled = state[index++];\n    this.VinLeftChannelMasterVolume = state[index++];\n    this.VinRightChannelMasterVolume = state[index++];\n    this.leftChannel1 = state[index++];\n    this.leftChannel2 = state[index++];\n    this.leftChannel3 = state[index++];\n    this.leftChannel4 = state[index++];\n    this.rightChannel1 = state[index++];\n    this.rightChannel2 = state[index++];\n    this.rightChannel3 = state[index++];\n    this.rightChannel4 = state[index++];\n    this.channel1currentSampleLeft = state[index++];\n    this.channel1currentSampleRight = state[index++];\n    this.channel2currentSampleLeft = state[index++];\n    this.channel2currentSampleRight = state[index++];\n    this.channel3currentSampleLeft = state[index++];\n    this.channel3currentSampleRight = state[index++];\n    this.channel4currentSampleLeft = state[index++];\n    this.channel4currentSampleRight = state[index++];\n    this.channel1currentSampleLeftSecondary = state[index++];\n    this.channel1currentSampleRightSecondary = state[index++];\n    this.channel2currentSampleLeftSecondary = state[index++];\n    this.channel2currentSampleRightSecondary = state[index++];\n    this.channel3currentSampleLeftSecondary = state[index++];\n    this.channel3currentSampleRightSecondary = state[index++];\n    this.channel4currentSampleLeftSecondary = state[index++];\n    this.channel4currentSampleRightSecondary = state[index++];\n    this.channel1currentSampleLeftTrimary = state[index++];\n    this.channel1currentSampleRightTrimary = state[index++];\n    this.channel2currentSampleLeftTrimary = state[index++];\n    this.channel2currentSampleRightTrimary = state[index++];\n    this.mixerOutputCache = state[index++];\n    this.channel1DutyTracker = state[index++];\n    this.channel1CachedDuty = state[index++];\n    this.channel2DutyTracker = state[index++];\n    this.channel2CachedDuty = state[index++];\n    this.channel1Enabled = state[index++];\n    this.channel2Enabled = state[index++];\n    this.channel3Enabled = state[index++];\n    this.channel4Enabled = state[index++];\n    this.sequencerClocks = state[index++];\n    this.sequencePosition = state[index++];\n    this.channel3Counter = state[index++];\n    this.channel4Counter = state[index++];\n    this.cachedChannel3Sample = state[index++];\n    this.cachedChannel4Sample = state[index++];\n    this.channel3FrequencyPeriod = state[index++];\n    this.channel3lastSampleLookup = state[index++];\n    this.actualScanLine = state[index++];\n    this.lastUnrenderedLine = state[index++];\n    this.queuedScanLines = state[index++];\n    this.RTCisLatched = state[index++];\n    this.latchedSeconds = state[index++];\n    this.latchedMinutes = state[index++];\n    this.latchedHours = state[index++];\n    this.latchedLDays = state[index++];\n    this.latchedHDays = state[index++];\n    this.RTCSeconds = state[index++];\n    this.RTCMinutes = state[index++];\n    this.RTCHours = state[index++];\n    this.RTCDays = state[index++];\n    this.RTCDayOverFlow = state[index++];\n    this.RTCHALT = state[index++];\n    this.usedBootROM = state[index++];\n    this.skipPCIncrement = state[index++];\n    this.STATTracker = state[index++];\n    this.gbcRamBankPositionECHO = state[index++];\n    this.numRAMBanks = state[index++];\n    this.windowY = state[index++];\n    this.windowX = state[index++];\n    this.gbcOBJRawPalette = this.toTypedArray(state[index++], \"uint8\");\n    this.gbcBGRawPalette = this.toTypedArray(state[index++], \"uint8\");\n    this.gbOBJPalette = this.toTypedArray(state[index++], \"int32\");\n    this.gbBGPalette = this.toTypedArray(state[index++], \"int32\");\n    this.gbcOBJPalette = this.toTypedArray(state[index++], \"int32\");\n    this.gbcBGPalette = this.toTypedArray(state[index++], \"int32\");\n    this.gbBGColorizedPalette = this.toTypedArray(state[index++], \"int32\");\n    this.gbOBJColorizedPalette = this.toTypedArray(state[index++], \"int32\");\n    this.cachedBGPaletteConversion = this.toTypedArray(state[index++], \"int32\");\n    this.cachedOBJPaletteConversion = this.toTypedArray(state[index++], \"int32\");\n    this.BGCHRBank1 = this.toTypedArray(state[index++], \"uint8\");\n    this.BGCHRBank2 = this.toTypedArray(state[index++], \"uint8\");\n    this.haltPostClocks = state[index++];\n    this.interruptsRequested = state[index++];\n    this.interruptsEnabled = state[index++];\n    this.checkIRQMatching();\n    this.remainingClocks = state[index++];\n    this.colorizedGBPalettes = state[index++];\n    this.backgroundY = state[index++];\n    this.backgroundX = state[index++];\n    this.CPUStopped = state[index++];\n    this.audioClocksUntilNextEvent = state[index++];\n    this.audioClocksUntilNextEventCounter = state[index];\n    this.fromSaveState = true;\n    this.TICKTable = this.toTypedArray(this.TICKTable, \"uint8\");\n    this.SecondaryTICKTable = this.toTypedArray(this.SecondaryTICKTable, \"uint8\");\n    this.initializeReferencesFromSaveState();\n    this.memoryReadJumpCompile();\n    this.memoryWriteJumpCompile();\n    this.initLCD();\n    this.initSound();\n    this.noiseSampleTable = this.channel4BitRange == 0x7FFF ? this.LSFR15Table : this.LSFR7Table;\n    this.channel4VolumeShifter = this.channel4BitRange == 0x7FFF ? 15 : 7;\n};\n$c66bd72ba8d42551$export$fb931cd598921492 = $c66bd72ba8d42551$var$saveState;\n$c66bd72ba8d42551$export$8f9fb363b058ffe1 = $c66bd72ba8d42551$var$returnFromState;\n\n\n//I need to mock a whole bunch of stuff on top of this.\n//var XAudioServer = require('./audio/XAudioServer.js');\n//TODO: Fix and reimplement missing function.\nfunction $6de83094d3815a3f$var$cout() {}\nfunction $6de83094d3815a3f$var$pause() {}\nfunction $6de83094d3815a3f$var$GameBoyCore(ROMImage) {\n    $a9f5d76ceefeeace$exports.call(this, ROMImage);\n    this.ROMImageIsString = \"string\" == typeof ROMImage;\n}\n\n\n\n\n\n$6de83094d3815a3f$var$GameBoyCore.prototype = {\n    constructor: $6de83094d3815a3f$var$GameBoyCore,\n    //-----------------ARCHITECTURE-------------------------\n    GBBOOTROM: [],\n    GBCBOOTROM: [],\n    ffxxDump: (parcelRequire(\"gOdab\")),\n    OPCODE: (parcelRequire(\"kE7dz\")),\n    CBOPCODE: (parcelRequire(\"aN2Be\")),\n    TICKTable: (parcelRequire(\"8QGsE\")),\n    SecondaryTICKTable: (parcelRequire(\"gOFKk\")),\n    //-------------------------------------------------------\n    //------------SAVE/LOAD----------------------------------\n    saveState: $c66bd72ba8d42551$export$fb931cd598921492,\n    saving: $c66bd72ba8d42551$export$8f9fb363b058ffe1,\n    saveSRAMState: function() {\n        if (!this.cBATT || this.MBCRam.length == 0) return []; //No bettery backup...\n        return this.fromTypedArray(this.MBCRam);\n    },\n    saveRTCState: function() {\n        if (!this.cTIMER) return []; //No battery backup\n        //Return the MBC RAM for backup...\n        return [\n            this.lastIteration,\n            this.RTCisLatched,\n            this.latchedSeconds,\n            this.latchedMinutes,\n            this.latchedHours,\n            this.latchedLDays,\n            this.latchedHDays,\n            this.RTCSeconds,\n            this.RTCMinutes,\n            this.RTCHours,\n            this.RTCDays,\n            this.RTCDayOverFlow,\n            this.RTCHALT\n        ];\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.returnFromRTCState = function() {\n    if (typeof this.openRTC == \"function\" && this.cTIMER) {\n        var rtcData = this.openRTC(this.name);\n        var index = 0;\n        this.lastIteration = rtcData[index++];\n        this.RTCisLatched = rtcData[index++];\n        this.latchedSeconds = rtcData[index++];\n        this.latchedMinutes = rtcData[index++];\n        this.latchedHours = rtcData[index++];\n        this.latchedLDays = rtcData[index++];\n        this.latchedHDays = rtcData[index++];\n        this.RTCSeconds = rtcData[index++];\n        this.RTCMinutes = rtcData[index++];\n        this.RTCHours = rtcData[index++];\n        this.RTCDays = rtcData[index++];\n        this.RTCDayOverFlow = rtcData[index++];\n        this.RTCHALT = rtcData[index];\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.start = function() {\n    this.initMemory(); //Write the startup memory.\n    this.ROMLoad(); //Load the ROM into memory and get cartridge information from it.\n    this.initLCD(); //Initialize the graphics.\n    this.initSound(); //Sound object initialization. Optional.\n    this.run(); //Start the emulation.\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.initMemory = function() {\n    //Initialize the RAM:\n    this.memory = this.getTypedArray(0x10000, 0, \"uint8\");\n    this.frameBuffer = this.getTypedArray(23040, 0xF8F8F8, \"int32\");\n    this.BGCHRBank1 = this.getTypedArray(0x800, 0, \"uint8\");\n    this.TICKTable = this.toTypedArray(this.TICKTable, \"uint8\");\n    this.SecondaryTICKTable = this.toTypedArray(this.SecondaryTICKTable, \"uint8\");\n    this.channel3PCM = this.getTypedArray(0x20, 0, \"int8\");\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.generateCacheArray = function(tileAmount) {\n    var tileArray = [];\n    var tileNumber = 0;\n    while(tileNumber < tileAmount)tileArray[tileNumber++] = this.getTypedArray(64, 0, \"uint8\");\n    return tileArray;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.initSkipBootstrap = function() {\n    //Fill in the boot ROM set register values\n    //Default values to the GB boot ROM values, then fill in the GBC boot ROM values after ROM loading\n    var index = 0xFF;\n    while(index >= 0){\n        if (index >= 0x30 && index < 0x40) this.memoryWrite(0xFF00 | index, this.ffxxDump[index]);\n        else switch(index){\n            case 0x00:\n            case 0x01:\n            case 0x02:\n            case 0x05:\n            case 0x07:\n            case 0x0F:\n            case 0xFF:\n                this.memoryWrite(0xFF00 | index, this.ffxxDump[index]);\n                break;\n            default:\n                this.memory[0xFF00 | index] = this.ffxxDump[index];\n        }\n        --index;\n    }\n    if (this.cGBC) {\n        this.memory[0xFF6C] = 0xFE;\n        this.memory[0xFF74] = 0xFE;\n    } else {\n        this.memory[0xFF48] = 0xFF;\n        this.memory[0xFF49] = 0xFF;\n        this.memory[0xFF6C] = 0xFF;\n        this.memory[0xFF74] = 0xFF;\n    }\n    //Start as an unset device:\n    $6de83094d3815a3f$var$cout(\"Starting without the GBC boot ROM.\", 0);\n    this.registerA = this.cGBC ? 0x11 : 0x1;\n    this.registerB = 0;\n    this.registerC = 0x13;\n    this.registerD = 0;\n    this.registerE = 0xD8;\n    this.FZero = true;\n    this.FSubtract = false;\n    this.FHalfCarry = true;\n    this.FCarry = true;\n    this.registersHL = 0x014D;\n    this.LCDCONTROL = this.LINECONTROL;\n    this.IME = false;\n    this.IRQLineMatched = 0;\n    this.interruptsRequested = 225;\n    this.interruptsEnabled = 0;\n    this.hdmaRunning = false;\n    this.CPUTicks = 12;\n    this.STATTracker = 0;\n    this.modeSTAT = 1;\n    this.spriteCount = 252;\n    this.LYCMatchTriggerSTAT = false;\n    this.mode2TriggerSTAT = false;\n    this.mode1TriggerSTAT = false;\n    this.mode0TriggerSTAT = false;\n    this.LCDisOn = true;\n    this.channel1FrequencyTracker = 0x2000;\n    this.channel1DutyTracker = 0;\n    this.channel1CachedDuty = this.dutyLookup[2];\n    this.channel1totalLength = 0;\n    this.channel1envelopeVolume = 0;\n    this.channel1envelopeType = false;\n    this.channel1envelopeSweeps = 0;\n    this.channel1envelopeSweepsLast = 0;\n    this.channel1consecutive = true;\n    this.channel1frequency = 1985;\n    this.channel1SweepFault = true;\n    this.channel1ShadowFrequency = 1985;\n    this.channel1timeSweep = 1;\n    this.channel1lastTimeSweep = 0;\n    this.channel1Swept = false;\n    this.channel1frequencySweepDivider = 0;\n    this.channel1decreaseSweep = false;\n    this.channel2FrequencyTracker = 0x2000;\n    this.channel2DutyTracker = 0;\n    this.channel2CachedDuty = this.dutyLookup[2];\n    this.channel2totalLength = 0;\n    this.channel2envelopeVolume = 0;\n    this.channel2envelopeType = false;\n    this.channel2envelopeSweeps = 0;\n    this.channel2envelopeSweepsLast = 0;\n    this.channel2consecutive = true;\n    this.channel2frequency = 0;\n    this.channel3canPlay = false;\n    this.channel3totalLength = 0;\n    this.channel3patternType = 4;\n    this.channel3frequency = 0;\n    this.channel3consecutive = true;\n    this.channel3Counter = 0x418;\n    this.channel4FrequencyPeriod = 8;\n    this.channel4totalLength = 0;\n    this.channel4envelopeVolume = 0;\n    this.channel4currentVolume = 0;\n    this.channel4envelopeType = false;\n    this.channel4envelopeSweeps = 0;\n    this.channel4envelopeSweepsLast = 0;\n    this.channel4consecutive = true;\n    this.channel4BitRange = 0x7FFF;\n    this.channel4VolumeShifter = 15;\n    this.channel1FrequencyCounter = 0x200;\n    this.channel2FrequencyCounter = 0x200;\n    this.channel3Counter = 0x800;\n    this.channel3FrequencyPeriod = 0x800;\n    this.channel3lastSampleLookup = 0;\n    this.channel4lastSampleLookup = 0;\n    this.VinLeftChannelMasterVolume = 8;\n    this.VinRightChannelMasterVolume = 8;\n    this.soundMasterEnabled = true;\n    this.leftChannel1 = true;\n    this.leftChannel2 = true;\n    this.leftChannel3 = true;\n    this.leftChannel4 = true;\n    this.rightChannel1 = true;\n    this.rightChannel2 = true;\n    this.rightChannel3 = false;\n    this.rightChannel4 = false;\n    this.DIVTicks = 27044;\n    this.LCDTicks = 160;\n    this.timerTicks = 0;\n    this.TIMAEnabled = false;\n    this.TACClocker = 1024;\n    this.serialTimer = 0;\n    this.serialShiftTimer = 0;\n    this.serialShiftTimerAllocated = 0;\n    this.IRQEnableDelay = 0;\n    this.actualScanLine = 144;\n    this.lastUnrenderedLine = 0;\n    this.gfxWindowDisplay = false;\n    this.gfxSpriteShow = false;\n    this.gfxSpriteNormalHeight = true;\n    this.bgEnabled = true;\n    this.BGPriorityEnabled = true;\n    this.gfxWindowCHRBankPosition = 0;\n    this.gfxBackgroundCHRBankPosition = 0;\n    this.gfxBackgroundBankOffset = 0;\n    this.windowY = 0;\n    this.windowX = 0;\n    this.drewBlank = 0;\n    this.midScanlineOffset = -1;\n    this.currentX = 0;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.initBootstrap = function() {\n    //Start as an unset device:\n    $6de83094d3815a3f$var$cout(\"Starting the selected boot ROM.\", 0);\n    this.programCounter = 0;\n    this.stackPointer = 0;\n    this.IME = false;\n    this.LCDTicks = 0;\n    this.DIVTicks = 0;\n    this.registerA = 0;\n    this.registerB = 0;\n    this.registerC = 0;\n    this.registerD = 0;\n    this.registerE = 0;\n    this.FZero = this.FSubtract = this.FHalfCarry = this.FCarry = false;\n    this.registersHL = 0;\n    this.leftChannel1 = false;\n    this.leftChannel2 = false;\n    this.leftChannel3 = false;\n    this.leftChannel4 = false;\n    this.rightChannel1 = false;\n    this.rightChannel2 = false;\n    this.rightChannel3 = false;\n    this.rightChannel4 = false;\n    this.channel2frequency = this.channel1frequency = 0;\n    this.channel4consecutive = this.channel2consecutive = this.channel1consecutive = false;\n    this.VinLeftChannelMasterVolume = 8;\n    this.VinRightChannelMasterVolume = 8;\n    this.memory[0xFF00] = 0xF; //Set the joypad state.\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.ROMLoad = function() {\n    //Load the first two ROM banks (0x0000 - 0x7FFF) into regular gameboy memory:\n    this.ROM = [];\n    this.usedBootROM = $2a65eeefd956ad48$exports[1] && (!$2a65eeefd956ad48$exports[11] && this.GBCBOOTROM.length == 0x800 || $2a65eeefd956ad48$exports[11] && this.GBBOOTROM.length == 0x100);\n    var maxLength = this.ROMImage.length;\n    if (maxLength < 0x4000) throw new Error(\"ROM image size too small.\");\n    this.ROM = this.getTypedArray(maxLength, 0, \"uint8\");\n    var romIndex = 0;\n    if (this.usedBootROM) {\n        if (!$2a65eeefd956ad48$exports[11]) {\n            //Patch in the GBC boot ROM into the memory map:\n            if (this.ROMImageIsString) {\n                for(; romIndex < 0x100; ++romIndex){\n                    this.memory[romIndex] = this.GBCBOOTROM[romIndex]; //Load in the GameBoy Color BOOT ROM.\n                    this.ROM[romIndex] = this.ROMImage.charCodeAt(romIndex) & 0xFF; //Decode the ROM binary for the switch out.\n                }\n                for(; romIndex < 0x200; ++romIndex)this.memory[romIndex] = this.ROM[romIndex] = this.ROMImage.charCodeAt(romIndex) & 0xFF; //Load in the game ROM.\n                for(; romIndex < 0x900; ++romIndex){\n                    this.memory[romIndex] = this.GBCBOOTROM[romIndex - 0x100]; //Load in the GameBoy Color BOOT ROM.\n                    this.ROM[romIndex] = this.ROMImage.charCodeAt(romIndex) & 0xFF; //Decode the ROM binary for the switch out.\n                }\n            } else {\n                for(; romIndex < 0x100; ++romIndex){\n                    this.memory[romIndex] = this.GBCBOOTROM[romIndex]; //Load in the GameBoy Color BOOT ROM.\n                    this.ROM[romIndex] = this.ROMImage[romIndex]; //Decode the ROM binary for the switch out.\n                }\n                for(; romIndex < 0x200; ++romIndex)this.memory[romIndex] = this.ROM[romIndex] = this.ROMImage[romIndex]; //Load in the game ROM.\n                for(; romIndex < 0x900; ++romIndex){\n                    this.memory[romIndex] = this.GBCBOOTROM[romIndex - 0x100]; //Load in the GameBoy Color BOOT ROM.\n                    this.ROM[romIndex] = this.ROMImage[romIndex]; //Decode the ROM binary for the switch out.\n                }\n            }\n            this.usedGBCBootROM = true;\n        } else {\n            if (this.ROMImageIsString) //Patch in the GBC boot ROM into the memory map:\n            for(; romIndex < 0x100; ++romIndex){\n                this.memory[romIndex] = this.GBBOOTROM[romIndex]; //Load in the GameBoy Color BOOT ROM.\n                this.ROM[romIndex] = this.ROMImage.charCodeAt(romIndex) & 0xFF; //Decode the ROM binary for the switch out.\n            }\n            else //Patch in the GBC boot ROM into the memory map:\n            for(; romIndex < 0x100; ++romIndex){\n                this.memory[romIndex] = this.GBBOOTROM[romIndex]; //Load in the GameBoy Color BOOT ROM.\n                this.ROM[romIndex] = this.ROMImage.romIndex; //Decode the ROM binary for the switch out.\n            }\n        }\n        if (this.ROMImageIsString) for(; romIndex < 0x4000; ++romIndex)this.memory[romIndex] = this.ROM[romIndex] = this.ROMImage.charCodeAt(romIndex) & 0xFF; //Load in the game ROM.\n        else for(; romIndex < 0x4000; ++romIndex)this.memory[romIndex] = this.ROM[romIndex] = this.ROMImage[romIndex]; //Load in the game ROM.\n    } else {\n        if (this.ROMImageIsString) //Don't load in the boot ROM:\n        for(; romIndex < 0x4000; ++romIndex)this.memory[romIndex] = this.ROM[romIndex] = this.ROMImage.charCodeAt(romIndex) & 0xFF; //Load in the game ROM.\n        else //Don't load in the boot ROM:\n        for(; romIndex < 0x4000; ++romIndex)this.memory[romIndex] = this.ROM[romIndex] = this.ROMImage[romIndex]; //Load in the game ROM.\n    }\n    //Finish the decoding of the ROM binary:\n    if (this.ROMImageIsString) for(; romIndex < maxLength; ++romIndex)this.ROM[romIndex] = this.ROMImage.charCodeAt(romIndex) & 0xFF;\n    else for(; romIndex < maxLength; ++romIndex)this.ROM[romIndex] = this.ROMImage[romIndex];\n    this.ROMBankEdge = Math.floor(this.ROM.length / 0x4000);\n    //Set up the emulator for the cartidge specifics:\n    this.interpretCartridge();\n    //Check for IRQ matching upon initialization:\n    this.checkIRQMatching();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.getROMImage = function() {\n    //Return the binary version of the ROM image currently running:\n    if (this.ROMImage.length > 0) return this.ROMImage.length;\n    var length = this.ROM.length;\n    for(var index = 0; index < length; index++)this.ROMImage += String.fromCharCode(this.ROM[index]);\n    return this.ROMImage;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.interpretCartridge = function() {\n    var extra;\n    if (this.ROMImageIsString) {\n        // ROM name\n        for(var index = 0x134; index < 0x13F; index++)if (this.ROMImage[index] > 0) this.name += this.ROMImage[index];\n        // ROM game code (for newer games)\n        for(var index = 0x13F; index < 0x143; index++)if (this.ROMImage[index] > 0) this.gameCode += this.ROMImage[index];\n        extra = this.ROMImage[0x143];\n    } else {\n        // ROM name\n        for(var index = 0x134; index < 0x13F; index++)if (this.ROMImage[index] > 0) this.name += String.fromCharCode(this.ROMImage[index]);\n        // ROM game code (for newer games)\n        for(var index = 0x13F; index < 0x143; index++)if (this.ROMImage[index] > 0) this.gameCode += String.fromCharCode(this.ROMImage[index]);\n        extra = String.fromCharCode(this.ROMImage[0x143]);\n    }\n    // You don't want extra output, do you?\n    // console.log(\"Game Title: \" + this.name + \"[\" + this.gameCode + \"][\" + this.ROMImage[0x143] + \"]\");\n    // Cartridge type\n    this.cartridgeType = this.ROM[0x147];\n    //console.log(\"Cartridge type #\" + this.cartridgeType);\n    //Map out ROM cartridge sub-types.\n    var MBCType = \"\";\n    switch(this.cartridgeType){\n        case 0x00:\n            //ROM w/o bank switching\n            if (!$2a65eeefd956ad48$exports[9]) {\n                MBCType = \"ROM\";\n                break;\n            }\n        case 0x01:\n            this.cMBC1 = true;\n            MBCType = \"MBC1\";\n            break;\n        case 0x02:\n            this.cMBC1 = true;\n            this.cSRAM = true;\n            MBCType = \"MBC1 + SRAM\";\n            break;\n        case 0x03:\n            this.cMBC1 = true;\n            this.cSRAM = true;\n            this.cBATT = true;\n            MBCType = \"MBC1 + SRAM + BATT\";\n            break;\n        case 0x05:\n            this.cMBC2 = true;\n            MBCType = \"MBC2\";\n            break;\n        case 0x06:\n            this.cMBC2 = true;\n            this.cBATT = true;\n            MBCType = \"MBC2 + BATT\";\n            break;\n        case 0x08:\n            this.cSRAM = true;\n            MBCType = \"ROM + SRAM\";\n            break;\n        case 0x09:\n            this.cSRAM = true;\n            this.cBATT = true;\n            MBCType = \"ROM + SRAM + BATT\";\n            break;\n        case 0x0B:\n            this.cMMMO1 = true;\n            MBCType = \"MMMO1\";\n            break;\n        case 0x0C:\n            this.cMMMO1 = true;\n            this.cSRAM = true;\n            MBCType = \"MMMO1 + SRAM\";\n            break;\n        case 0x0D:\n            this.cMMMO1 = true;\n            this.cSRAM = true;\n            this.cBATT = true;\n            MBCType = \"MMMO1 + SRAM + BATT\";\n            break;\n        case 0x0F:\n            this.cMBC3 = true;\n            this.cTIMER = true;\n            this.cBATT = true;\n            MBCType = \"MBC3 + TIMER + BATT\";\n            break;\n        case 0x10:\n            this.cMBC3 = true;\n            this.cTIMER = true;\n            this.cBATT = true;\n            this.cSRAM = true;\n            MBCType = \"MBC3 + TIMER + BATT + SRAM\";\n            break;\n        case 0x11:\n            this.cMBC3 = true;\n            MBCType = \"MBC3\";\n            break;\n        case 0x12:\n            this.cMBC3 = true;\n            this.cSRAM = true;\n            MBCType = \"MBC3 + SRAM\";\n            break;\n        case 0x13:\n            this.cMBC3 = true;\n            this.cSRAM = true;\n            this.cBATT = true;\n            MBCType = \"MBC3 + SRAM + BATT\";\n            break;\n        case 0x19:\n            this.cMBC5 = true;\n            MBCType = \"MBC5\";\n            break;\n        case 0x1A:\n            this.cMBC5 = true;\n            this.cSRAM = true;\n            MBCType = \"MBC5 + SRAM\";\n            break;\n        case 0x1B:\n            this.cMBC5 = true;\n            this.cSRAM = true;\n            this.cBATT = true;\n            MBCType = \"MBC5 + SRAM + BATT\";\n            break;\n        case 0x1C:\n            this.cRUMBLE = true;\n            MBCType = \"RUMBLE\";\n            break;\n        case 0x1D:\n            this.cRUMBLE = true;\n            this.cSRAM = true;\n            MBCType = \"RUMBLE + SRAM\";\n            break;\n        case 0x1E:\n            this.cRUMBLE = true;\n            this.cSRAM = true;\n            this.cBATT = true;\n            MBCType = \"RUMBLE + SRAM + BATT\";\n            break;\n        case 0x1F:\n            this.cCamera = true;\n            MBCType = \"GameBoy Camera\";\n            break;\n        case 0x22:\n            this.cMBC7 = true;\n            this.cSRAM = true;\n            this.cBATT = true;\n            MBCType = \"MBC7 + SRAM + BATT\";\n            break;\n        case 0xFD:\n            this.cTAMA5 = true;\n            MBCType = \"TAMA5\";\n            break;\n        case 0xFE:\n            this.cHuC3 = true;\n            MBCType = \"HuC3\";\n            break;\n        case 0xFF:\n            this.cHuC1 = true;\n            MBCType = \"HuC1\";\n            break;\n        default:\n            MBCType = \"Unknown\";\n            console.log(\"Cartridge type is unknown.\");\n            $6de83094d3815a3f$var$pause();\n    }\n    $6de83094d3815a3f$var$cout(\"Cartridge Type: \" + MBCType + \".\", 0);\n    // ROM and RAM banks\n    this.numROMBanks = this.ROMBanks[this.ROM[0x148]];\n    $6de83094d3815a3f$var$cout(this.numROMBanks + \" ROM banks.\", 0);\n    switch(this.RAMBanks[this.ROM[0x149]]){\n        case 0:\n            $6de83094d3815a3f$var$cout(\"No RAM banking requested for allocation or MBC is of type 2.\", 0);\n            break;\n        case 2:\n            $6de83094d3815a3f$var$cout(\"1 RAM bank requested for allocation.\", 0);\n            break;\n        case 3:\n            $6de83094d3815a3f$var$cout(\"4 RAM banks requested for allocation.\", 0);\n            break;\n        case 4:\n            $6de83094d3815a3f$var$cout(\"16 RAM banks requested for allocation.\", 0);\n            break;\n        default:\n            $6de83094d3815a3f$var$cout(\"RAM bank amount requested is unknown, will use maximum allowed by specified MBC type.\", 0);\n    }\n    //Check the GB/GBC mode byte:\n    if (!this.usedBootROM) {\n        switch(this.ROM[0x143]){\n            case 0x00:\n                this.cGBC = false;\n                $6de83094d3815a3f$var$cout(\"Only GB mode detected.\", 0);\n                break;\n            case 0x32:\n                if (!$2a65eeefd956ad48$exports[2] && this.name + this.gameCode + this.ROM[0x143] == \"Game and Watch 50\") {\n                    this.cGBC = true;\n                    $6de83094d3815a3f$var$cout(\"Created a boot exception for Game and Watch Gallery 2 (GBC ID byte is wrong on the cartridge).\", 1);\n                } else this.cGBC = false;\n                break;\n            case 0x80:\n                this.cGBC = !$2a65eeefd956ad48$exports[2];\n                $6de83094d3815a3f$var$cout(\"GB and GBC mode detected.\", 0);\n                break;\n            case 0xC0:\n                this.cGBC = true;\n                $6de83094d3815a3f$var$cout(\"Only GBC mode detected.\", 0);\n                break;\n            default:\n                this.cGBC = false;\n                $6de83094d3815a3f$var$cout(\"Unknown GameBoy game type code #\" + this.ROM[0x143] + \", defaulting to GB mode (Old games don't have a type code).\", 1);\n        }\n        this.inBootstrap = false;\n        this.setupRAM(); //CPU/(V)RAM initialization.\n        this.initSkipBootstrap();\n    } else {\n        this.cGBC = this.usedGBCBootROM; //Allow the GBC boot ROM to run in GBC mode...\n        this.setupRAM(); //CPU/(V)RAM initialization.\n        this.initBootstrap();\n    }\n    this.initializeModeSpecificArrays();\n    //License Code Lookup:\n    var cOldLicense = this.ROM[0x14B];\n    var cNewLicense = this.ROM[0x144] & 0xFF00 | this.ROM[0x145] & 0xFF;\n    if (cOldLicense != 0x33) //Old Style License Header\n    $6de83094d3815a3f$var$cout(\"Old style license code: \" + cOldLicense, 0);\n    else //New Style License Header\n    $6de83094d3815a3f$var$cout(\"New style license code: \" + cNewLicense, 0);\n    this.ROMImage = \"\"; //Memory consumption reduction.\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.disableBootROM = function() {\n    //Remove any traces of the boot ROM from ROM memory.\n    for(var index = 0; index < 0x100; ++index)this.memory[index] = this.ROM[index]; //Replace the GameBoy or GameBoy Color boot ROM with the game ROM.\n    if (this.usedGBCBootROM) {\n        //Remove any traces of the boot ROM from ROM memory.\n        for(index = 0x200; index < 0x900; ++index)this.memory[index] = this.ROM[index]; //Replace the GameBoy Color boot ROM with the game ROM.\n        if (!this.cGBC) //Clean up the post-boot (GB mode only) state:\n        this.GBCtoGBModeAdjust();\n        else this.recompileBootIOWriteHandling();\n    } else this.recompileBootIOWriteHandling();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.initializeTiming = function() {\n    //Emulator Timing:\n    this.clocksPerSecond = this.emulatorSpeed * 0x400000;\n    this.baseCPUCyclesPerIteration = this.clocksPerSecond / 1000 * $2a65eeefd956ad48$exports[6];\n    this.CPUCyclesTotalRoundoff = this.baseCPUCyclesPerIteration % 4;\n    this.CPUCyclesTotalBase = this.CPUCyclesTotal = this.baseCPUCyclesPerIteration - this.CPUCyclesTotalRoundoff | 0;\n    this.CPUCyclesTotalCurrent = 0;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.setSpeed = function(speed) {\n    this.emulatorSpeed = speed;\n    this.initializeTiming();\n    if (this.audioHandle) this.initSound();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.setupRAM = function() {\n    //Setup the auxilliary/switchable RAM:\n    if (this.cMBC2) this.numRAMBanks = 1 / 16;\n    else if (this.cMBC1 || this.cRUMBLE || this.cMBC3 || this.cHuC3) this.numRAMBanks = 4;\n    else if (this.cMBC5) this.numRAMBanks = 16;\n    else if (this.cSRAM) this.numRAMBanks = 1;\n    if (this.numRAMBanks > 0) {\n        if (!this.MBCRAMUtilized()) //For ROM and unknown MBC cartridges using the external RAM:\n        this.MBCRAMBanksEnabled = true;\n        //Switched RAM Used\n        var MBCRam = typeof this.openMBC == \"function\" ? this.openMBC(this.name) : [];\n        if (MBCRam.length > 0) //Flash the SRAM into memory:\n        this.MBCRam = this.toTypedArray(MBCRam, \"uint8\");\n        else this.MBCRam = this.getTypedArray(this.numRAMBanks * 0x2000, 0, \"uint8\");\n    }\n    $6de83094d3815a3f$var$cout(\"Actual bytes of MBC RAM allocated: \" + this.numRAMBanks * 0x2000, 0);\n    this.returnFromRTCState();\n    //Setup the RAM for GBC mode.\n    if (this.cGBC) {\n        this.VRAM = this.getTypedArray(0x2000, 0, \"uint8\");\n        this.GBCMemory = this.getTypedArray(0x7000, 0, \"uint8\");\n    }\n    this.memoryReadJumpCompile();\n    this.memoryWriteJumpCompile();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.MBCRAMUtilized = function() {\n    return this.cMBC1 || this.cMBC2 || this.cMBC3 || this.cMBC5 || this.cMBC7 || this.cRUMBLE;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.recomputeDimension = function() {\n    //Cache some dimension info:\n    this.onscreenWidth = 160;\n    this.onscreenHeight = 144;\n    this.offscreenWidth = 160;\n    this.offscreenHeight = 144;\n    this.offscreenRGBCount = this.offscreenWidth * this.offscreenHeight * 4;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.initLCD = function() {\n    this.recomputeDimension();\n    if (this.offscreenRGBCount != 92160) //Only create the resizer handle if we need it:\n    this.compileResizeFrameBufferFunction();\n    else //Resizer not needed:\n    this.resizer = null;\n    try {\n        this.canvasBuffer = {\n            \"data\": new Uint8ClampedArray(92160),\n            \"height\": 144,\n            \"width\": 160\n        };\n    //Taking canvas out of the picture.\n    //this.canvasBuffer = this.drawContextOffScreen.createImageData(144, 160);\n    //this.canvasBuffer.prototype = ImageData;\n    //new ImageData(160, 144);//{'width':160, 'height':144, 'data':new Array(160*144*4)};//this.drawContextOffscreen.createImageData(this.offscreenWidth, this.offscreenHeight);\n    } catch (error) {\n        console.log(\"hack failed: \" + error.message + \": falling back to getImageData initialization\");\n    //cout(\"Falling back to the getImageData initialization (Error \\\"\" + error.message + \"\\\").\", 1);\n    //this.canvasBuffer = this.drawContextOffscreen.getImageData(0, 0, this.offscreenWidth, this.offscreenHeight);\n    }\n    var index = this.offscreenRGBCount;\n    while(index > 0){\n        this.canvasBuffer.data[index -= 4] = 0xF8;\n        this.canvasBuffer.data[index + 1] = 0xF8;\n        this.canvasBuffer.data[index + 2] = 0xF8;\n        this.canvasBuffer.data[index + 3] = 0xFF;\n    }\n    //this.graphicsBlit();\n    if (this.swizzledFrame == null) this.swizzledFrame = this.getTypedArray(69120, 0xFF, \"uint8\");\n    //Test the draw system and browser vblank latching:\n    this.drewFrame = true; //Copy the latest graphics to buffer.\n    this.requestDraw();\n};\n//I think I'm just copying out framebuffer.  So maybe I dont' need to do anything?\n$6de83094d3815a3f$var$GameBoyCore.prototype.graphicsBlit = function() {\n    if (!this.currentScreenFixed) this.currentScreenFixed = [];\n    this.lastScreen = this.currentScreenFixed;\n    this.currentScreen = []; //new Uint8Array(this.canvasBuffer.data.length);\n    this.partialScreen = [];\n    for(var i = 0; i < this.canvasBuffer.data.length; i++){\n        //Build partial frame.\n        if (this.lastScreen[i] != this.canvasBuffer.data[i]) {\n            this.partialScreen.push(i);\n            this.partialScreen.push(this.canvasBuffer.data[i]);\n        }\n        //Build full frame.\n        this.currentScreenFixed[i] = this.canvasBuffer.data[i];\n        //this.currentScreen.push(i);\n        this.currentScreen.push(this.canvasBuffer.data[i]);\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.JoyPadEvent = function(key, down) {\n    if (down) {\n        this.JoyPad &= 0xFF ^ 1 << key;\n        if (!this.cGBC && (!this.usedBootROM || !this.usedGBCBootROM)) {\n            this.interruptsRequested |= 0x10; //A real GBC doesn't set this!\n            this.remainingClocks = 0;\n            this.checkIRQMatching();\n        }\n    } else this.JoyPad |= 1 << key;\n    this.memory[0xFF00] = (this.memory[0xFF00] & 0x30) + (((this.memory[0xFF00] & 0x20) == 0 ? this.JoyPad >> 4 : 0xF) & ((this.memory[0xFF00] & 0x10) == 0 ? this.JoyPad & 0xF : 0xF));\n    this.CPUStopped = false;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.GyroEvent = function(x, y) {\n    x *= -100;\n    x += 2047;\n    this.highX = x >> 8;\n    this.lowX = x & 0xFF;\n    y *= -100;\n    y += 2047;\n    this.highY = y >> 8;\n    this.lowY = y & 0xFF;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.initSound = function() {\n    this.audioResamplerFirstPassFactor = Math.max(Math.min(Math.floor(this.clocksPerSecond / 44100), Math.floor(136.53125)), 1);\n    this.downSampleInputDivider = 1 / (this.audioResamplerFirstPassFactor * 0xF0);\n    if ($2a65eeefd956ad48$exports[0]) // this.audioHandle = new XAudioServer(\n    //     2,\n    //     this.clocksPerSecond / this.audioResamplerFirstPassFactor,\n    //     0,\n    //     Math.max(this.baseCPUCyclesPerIteration * settings[8] / this.audioResamplerFirstPassFactor, 8192) << 1,\n    //     null,\n    //     settings[3],\n    //     function () {\n    //         settings[0] = false;\n    //     });\n    // console.log('Initializing Audio Buffer:');\n    // console.log(`Sample Rate: ${ this.clocksPerSecond / this.audioResamplerFirstPassFactor }`);\n    // console.log(`Max Buffer Size: ${ Math.max(this.baseCPUCyclesPerIteration * settings[8] / this.audioResamplerFirstPassFactor, 8192) << 1 }`);\n    this.initAudioBuffer();\n    else if (this.audioHandle) //Mute the audio output, as it has an immediate silencing effect:\n    this.audioHandle.changeVolume(0);\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.changeVolume = function() {\n    if ($2a65eeefd956ad48$exports[0] && this.audioHandle) this.audioHandle.changeVolume($2a65eeefd956ad48$exports[3]);\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.initAudioBuffer = function() {\n    this.audioIndex = 0;\n    this.audioDestinationPosition = 0;\n    this.downsampleInput = 0;\n    this.bufferContainAmount = Math.max(this.baseCPUCyclesPerIteration * $2a65eeefd956ad48$exports[7] / this.audioResamplerFirstPassFactor, 4096) << 1;\n    this.numSamplesTotal = this.baseCPUCyclesPerIteration / this.audioResamplerFirstPassFactor << 1;\n    this.audioBuffer = this.getTypedArray(this.numSamplesTotal, 0, \"float32\");\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.intializeWhiteNoise = function() {\n    //Noise Sample Tables:\n    var randomFactor = 1;\n    //15-bit LSFR Cache Generation:\n    this.LSFR15Table = this.getTypedArray(0x80000, 0, \"int8\");\n    var LSFR = 0x7FFF; //Seed value has all its bits set.\n    var LSFRShifted = 0x3FFF;\n    for(var index = 0; index < 0x8000; ++index){\n        //Normalize the last LSFR value for usage:\n        randomFactor = 1 - (LSFR & 1); //Docs say it's the inverse.\n        //Cache the different volume level results:\n        this.LSFR15Table[0x08000 | index] = randomFactor;\n        this.LSFR15Table[0x10000 | index] = randomFactor * 0x2;\n        this.LSFR15Table[0x18000 | index] = randomFactor * 0x3;\n        this.LSFR15Table[0x20000 | index] = randomFactor * 0x4;\n        this.LSFR15Table[0x28000 | index] = randomFactor * 0x5;\n        this.LSFR15Table[0x30000 | index] = randomFactor * 0x6;\n        this.LSFR15Table[0x38000 | index] = randomFactor * 0x7;\n        this.LSFR15Table[0x40000 | index] = randomFactor * 0x8;\n        this.LSFR15Table[0x48000 | index] = randomFactor * 0x9;\n        this.LSFR15Table[0x50000 | index] = randomFactor * 0xA;\n        this.LSFR15Table[0x58000 | index] = randomFactor * 0xB;\n        this.LSFR15Table[0x60000 | index] = randomFactor * 0xC;\n        this.LSFR15Table[0x68000 | index] = randomFactor * 0xD;\n        this.LSFR15Table[0x70000 | index] = randomFactor * 0xE;\n        this.LSFR15Table[0x78000 | index] = randomFactor * 0xF;\n        //Recompute the LSFR algorithm:\n        LSFRShifted = LSFR >> 1;\n        LSFR = LSFRShifted | ((LSFRShifted ^ LSFR) & 0x1) << 14;\n    }\n    //7-bit LSFR Cache Generation:\n    this.LSFR7Table = this.getTypedArray(0x800, 0, \"int8\");\n    LSFR = 0x7F; //Seed value has all its bits set.\n    for(index = 0; index < 0x80; ++index){\n        //Normalize the last LSFR value for usage:\n        randomFactor = 1 - (LSFR & 1); //Docs say it's the inverse.\n        //Cache the different volume level results:\n        this.LSFR7Table[0x080 | index] = randomFactor;\n        this.LSFR7Table[0x100 | index] = randomFactor * 0x2;\n        this.LSFR7Table[0x180 | index] = randomFactor * 0x3;\n        this.LSFR7Table[0x200 | index] = randomFactor * 0x4;\n        this.LSFR7Table[0x280 | index] = randomFactor * 0x5;\n        this.LSFR7Table[0x300 | index] = randomFactor * 0x6;\n        this.LSFR7Table[0x380 | index] = randomFactor * 0x7;\n        this.LSFR7Table[0x400 | index] = randomFactor * 0x8;\n        this.LSFR7Table[0x480 | index] = randomFactor * 0x9;\n        this.LSFR7Table[0x500 | index] = randomFactor * 0xA;\n        this.LSFR7Table[0x580 | index] = randomFactor * 0xB;\n        this.LSFR7Table[0x600 | index] = randomFactor * 0xC;\n        this.LSFR7Table[0x680 | index] = randomFactor * 0xD;\n        this.LSFR7Table[0x700 | index] = randomFactor * 0xE;\n        this.LSFR7Table[0x780 | index] = randomFactor * 0xF;\n        //Recompute the LSFR algorithm:\n        LSFRShifted = LSFR >> 1;\n        LSFR = LSFRShifted | ((LSFRShifted ^ LSFR) & 0x1) << 6;\n    }\n    //Set the default noise table:\n    this.noiseSampleTable = this.LSFR15Table;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.audioUnderrunAdjustment = function() {\n    if ($2a65eeefd956ad48$exports[0]) {\n        //var underrunAmount = this.audioHandle.remainingBuffer();\n        var underrunAmount = null; //I don't know what this is or why it matters.\n        //From what I can tell, this is basically just \"how much space do I have left in this buffer.\"\n        //I'm gonna need to care about that.\n        //But I'm not sure how *much* I'm going to need to care about it.\n        //If I'm working with the raw buffer, then maybe... maybe I can just change the size to fit?\n        //For now I'm going to ignore it and see what happens.\n        //I need to know what the output format of the audio is.\n        if (typeof underrunAmount == \"number\") {\n            underrunAmount = this.bufferContainAmount - Math.max(underrunAmount, 0);\n            if (underrunAmount > 0) this.recalculateIterationClockLimitForAudio((underrunAmount >> 1) * this.audioResamplerFirstPassFactor);\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.initializeAudioStartState = function() {\n    this.channel1FrequencyTracker = 0x2000;\n    this.channel1DutyTracker = 0;\n    this.channel1CachedDuty = this.dutyLookup[2];\n    this.channel1totalLength = 0;\n    this.channel1envelopeVolume = 0;\n    this.channel1envelopeType = false;\n    this.channel1envelopeSweeps = 0;\n    this.channel1envelopeSweepsLast = 0;\n    this.channel1consecutive = true;\n    this.channel1frequency = 0;\n    this.channel1SweepFault = false;\n    this.channel1ShadowFrequency = 0;\n    this.channel1timeSweep = 1;\n    this.channel1lastTimeSweep = 0;\n    this.channel1Swept = false;\n    this.channel1frequencySweepDivider = 0;\n    this.channel1decreaseSweep = false;\n    this.channel2FrequencyTracker = 0x2000;\n    this.channel2DutyTracker = 0;\n    this.channel2CachedDuty = this.dutyLookup[2];\n    this.channel2totalLength = 0;\n    this.channel2envelopeVolume = 0;\n    this.channel2envelopeType = false;\n    this.channel2envelopeSweeps = 0;\n    this.channel2envelopeSweepsLast = 0;\n    this.channel2consecutive = true;\n    this.channel2frequency = 0;\n    this.channel3canPlay = false;\n    this.channel3totalLength = 0;\n    this.channel3patternType = 4;\n    this.channel3frequency = 0;\n    this.channel3consecutive = true;\n    this.channel3Counter = 0x800;\n    this.channel4FrequencyPeriod = 8;\n    this.channel4totalLength = 0;\n    this.channel4envelopeVolume = 0;\n    this.channel4currentVolume = 0;\n    this.channel4envelopeType = false;\n    this.channel4envelopeSweeps = 0;\n    this.channel4envelopeSweepsLast = 0;\n    this.channel4consecutive = true;\n    this.channel4BitRange = 0x7FFF;\n    this.noiseSampleTable = this.LSFR15Table;\n    this.channel4VolumeShifter = 15;\n    this.channel1FrequencyCounter = 0x2000;\n    this.channel2FrequencyCounter = 0x2000;\n    this.channel3Counter = 0x800;\n    this.channel3FrequencyPeriod = 0x800;\n    this.channel3lastSampleLookup = 0;\n    this.channel4lastSampleLookup = 0;\n    this.VinLeftChannelMasterVolume = 8;\n    this.VinRightChannelMasterVolume = 8;\n    this.mixerOutputCache = 0;\n    this.sequencerClocks = 0x2000;\n    this.sequencePosition = 0;\n    this.channel4FrequencyPeriod = 8;\n    this.channel4Counter = 8;\n    this.cachedChannel3Sample = 0;\n    this.cachedChannel4Sample = 0;\n    this.channel1Enabled = false;\n    this.channel2Enabled = false;\n    this.channel3Enabled = false;\n    this.channel4Enabled = false;\n    this.channel1canPlay = false;\n    this.channel2canPlay = false;\n    this.channel4canPlay = false;\n    this.audioClocksUntilNextEvent = 1;\n    this.audioClocksUntilNextEventCounter = 1;\n    this.channel1OutputLevelCache();\n    this.channel2OutputLevelCache();\n    this.channel3OutputLevelCache();\n    this.channel4OutputLevelCache();\n    this.noiseSampleTable = this.LSFR15Table;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.outputAudio = function() {\n    this.audioBuffer[this.audioDestinationPosition++] = (this.downsampleInput >>> 16) * this.downSampleInputDivider - 1;\n    this.audioBuffer[this.audioDestinationPosition++] = (this.downsampleInput & 0xFFFF) * this.downSampleInputDivider - 1;\n    if (this.audioDestinationPosition == this.numSamplesTotal) //this.audioHandle.writeAudioNoCallback(this.audioBuffer);\n    this.audioDestinationPosition = 0;\n    this.downsampleInput = 0;\n};\n//Below are the audio generation functions timed against the CPU:\n$6de83094d3815a3f$var$GameBoyCore.prototype.generateAudio = function(numSamples) {\n    var multiplier = 0;\n    if (this.soundMasterEnabled && !this.CPUStopped) for(var clockUpTo = 0; numSamples > 0;){\n        clockUpTo = Math.min(this.audioClocksUntilNextEventCounter, this.sequencerClocks, numSamples);\n        this.audioClocksUntilNextEventCounter -= clockUpTo;\n        this.sequencerClocks -= clockUpTo;\n        numSamples -= clockUpTo;\n        while(clockUpTo > 0){\n            multiplier = Math.min(clockUpTo, this.audioResamplerFirstPassFactor - this.audioIndex);\n            clockUpTo -= multiplier;\n            this.audioIndex += multiplier;\n            this.downsampleInput += this.mixerOutputCache * multiplier;\n            if (this.audioIndex == this.audioResamplerFirstPassFactor) {\n                this.audioIndex = 0;\n                this.outputAudio();\n            }\n        }\n        if (this.sequencerClocks == 0) {\n            this.audioComputeSequencer();\n            this.sequencerClocks = 0x2000;\n        }\n        if (this.audioClocksUntilNextEventCounter == 0) this.computeAudioChannels();\n    }\n    else //SILENT OUTPUT:\n    while(numSamples > 0){\n        multiplier = Math.min(numSamples, this.audioResamplerFirstPassFactor - this.audioIndex);\n        numSamples -= multiplier;\n        this.audioIndex += multiplier;\n        if (this.audioIndex == this.audioResamplerFirstPassFactor) {\n            this.audioIndex = 0;\n            this.outputAudio();\n        }\n    }\n};\n//Generate audio, but don't actually output it (Used for when sound is disabled by user/browser):\n$6de83094d3815a3f$var$GameBoyCore.prototype.generateAudioFake = function(numSamples) {\n    if (this.soundMasterEnabled && !this.CPUStopped) for(var clockUpTo = 0; numSamples > 0;){\n        clockUpTo = Math.min(this.audioClocksUntilNextEventCounter, this.sequencerClocks, numSamples);\n        this.audioClocksUntilNextEventCounter -= clockUpTo;\n        this.sequencerClocks -= clockUpTo;\n        numSamples -= clockUpTo;\n        if (this.sequencerClocks == 0) {\n            this.audioComputeSequencer();\n            this.sequencerClocks = 0x2000;\n        }\n        if (this.audioClocksUntilNextEventCounter == 0) this.computeAudioChannels();\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.audioJIT = function() {\n    //Audio Sample Generation Timing:\n    if ($2a65eeefd956ad48$exports[0]) this.generateAudio(this.audioTicks);\n    else this.generateAudioFake(this.audioTicks);\n    this.audioTicks = 0;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.audioComputeSequencer = function() {\n    switch(this.sequencePosition++){\n        case 0:\n            this.clockAudioLength();\n            break;\n        case 2:\n            this.clockAudioLength();\n            this.clockAudioSweep();\n            break;\n        case 4:\n            this.clockAudioLength();\n            break;\n        case 6:\n            this.clockAudioLength();\n            this.clockAudioSweep();\n            break;\n        case 7:\n            this.clockAudioEnvelope();\n            this.sequencePosition = 0;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.clockAudioLength = function() {\n    //Channel 1:\n    if (this.channel1totalLength > 1) --this.channel1totalLength;\n    else if (this.channel1totalLength == 1) {\n        this.channel1totalLength = 0;\n        this.channel1EnableCheck();\n        this.memory[0xFF26] &= 0xFE; //Channel #1 On Flag Off\n    }\n    //Channel 2:\n    if (this.channel2totalLength > 1) --this.channel2totalLength;\n    else if (this.channel2totalLength == 1) {\n        this.channel2totalLength = 0;\n        this.channel2EnableCheck();\n        this.memory[0xFF26] &= 0xFD; //Channel #2 On Flag Off\n    }\n    //Channel 3:\n    if (this.channel3totalLength > 1) --this.channel3totalLength;\n    else if (this.channel3totalLength == 1) {\n        this.channel3totalLength = 0;\n        this.channel3EnableCheck();\n        this.memory[0xFF26] &= 0xFB; //Channel #3 On Flag Off\n    }\n    //Channel 4:\n    if (this.channel4totalLength > 1) --this.channel4totalLength;\n    else if (this.channel4totalLength == 1) {\n        this.channel4totalLength = 0;\n        this.channel4EnableCheck();\n        this.memory[0xFF26] &= 0xF7; //Channel #4 On Flag Off\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.clockAudioSweep = function() {\n    //Channel 1:\n    if (!this.channel1SweepFault && this.channel1timeSweep > 0) {\n        if (--this.channel1timeSweep == 0) this.runAudioSweep();\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.runAudioSweep = function() {\n    //Channel 1:\n    if (this.channel1lastTimeSweep > 0) {\n        if (this.channel1frequencySweepDivider > 0) {\n            this.channel1Swept = true;\n            if (this.channel1decreaseSweep) {\n                this.channel1ShadowFrequency -= this.channel1ShadowFrequency >> this.channel1frequencySweepDivider;\n                this.channel1frequency = this.channel1ShadowFrequency & 0x7FF;\n                this.channel1FrequencyTracker = 0x800 - this.channel1frequency << 2;\n            } else {\n                this.channel1ShadowFrequency += this.channel1ShadowFrequency >> this.channel1frequencySweepDivider;\n                this.channel1frequency = this.channel1ShadowFrequency;\n                if (this.channel1ShadowFrequency <= 0x7FF) {\n                    this.channel1FrequencyTracker = 0x800 - this.channel1frequency << 2;\n                    //Run overflow check twice:\n                    if (this.channel1ShadowFrequency + (this.channel1ShadowFrequency >> this.channel1frequencySweepDivider) > 0x7FF) {\n                        this.channel1SweepFault = true;\n                        this.channel1EnableCheck();\n                        this.memory[0xFF26] &= 0xFE; //Channel #1 On Flag Off\n                    }\n                } else {\n                    this.channel1frequency &= 0x7FF;\n                    this.channel1SweepFault = true;\n                    this.channel1EnableCheck();\n                    this.memory[0xFF26] &= 0xFE; //Channel #1 On Flag Off\n                }\n            }\n            this.channel1timeSweep = this.channel1lastTimeSweep;\n        } else {\n            //Channel has sweep disabled and timer becomes a length counter:\n            this.channel1SweepFault = true;\n            this.channel1EnableCheck();\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel1AudioSweepPerformDummy = function() {\n    //Channel 1:\n    if (this.channel1frequencySweepDivider > 0) {\n        if (!this.channel1decreaseSweep) {\n            var channel1ShadowFrequency = this.channel1ShadowFrequency + (this.channel1ShadowFrequency >> this.channel1frequencySweepDivider);\n            if (channel1ShadowFrequency <= 0x7FF) //Run overflow check twice:\n            {\n                if (channel1ShadowFrequency + (channel1ShadowFrequency >> this.channel1frequencySweepDivider) > 0x7FF) {\n                    this.channel1SweepFault = true;\n                    this.channel1EnableCheck();\n                    this.memory[0xFF26] &= 0xFE; //Channel #1 On Flag Off\n                }\n            } else {\n                this.channel1SweepFault = true;\n                this.channel1EnableCheck();\n                this.memory[0xFF26] &= 0xFE; //Channel #1 On Flag Off\n            }\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.clockAudioEnvelope = function() {\n    //Channel 1:\n    if (this.channel1envelopeSweepsLast > -1) {\n        if (this.channel1envelopeSweeps > 0) --this.channel1envelopeSweeps;\n        else {\n            if (!this.channel1envelopeType) {\n                if (this.channel1envelopeVolume > 0) {\n                    --this.channel1envelopeVolume;\n                    this.channel1envelopeSweeps = this.channel1envelopeSweepsLast;\n                    this.channel1OutputLevelCache();\n                } else this.channel1envelopeSweepsLast = -1;\n            } else if (this.channel1envelopeVolume < 0xF) {\n                ++this.channel1envelopeVolume;\n                this.channel1envelopeSweeps = this.channel1envelopeSweepsLast;\n                this.channel1OutputLevelCache();\n            } else this.channel1envelopeSweepsLast = -1;\n        }\n    }\n    //Channel 2:\n    if (this.channel2envelopeSweepsLast > -1) {\n        if (this.channel2envelopeSweeps > 0) --this.channel2envelopeSweeps;\n        else {\n            if (!this.channel2envelopeType) {\n                if (this.channel2envelopeVolume > 0) {\n                    --this.channel2envelopeVolume;\n                    this.channel2envelopeSweeps = this.channel2envelopeSweepsLast;\n                    this.channel2OutputLevelCache();\n                } else this.channel2envelopeSweepsLast = -1;\n            } else if (this.channel2envelopeVolume < 0xF) {\n                ++this.channel2envelopeVolume;\n                this.channel2envelopeSweeps = this.channel2envelopeSweepsLast;\n                this.channel2OutputLevelCache();\n            } else this.channel2envelopeSweepsLast = -1;\n        }\n    }\n    //Channel 4:\n    if (this.channel4envelopeSweepsLast > -1) {\n        if (this.channel4envelopeSweeps > 0) --this.channel4envelopeSweeps;\n        else {\n            if (!this.channel4envelopeType) {\n                if (this.channel4envelopeVolume > 0) {\n                    this.channel4currentVolume = --this.channel4envelopeVolume << this.channel4VolumeShifter;\n                    this.channel4envelopeSweeps = this.channel4envelopeSweepsLast;\n                    this.channel4UpdateCache();\n                } else this.channel4envelopeSweepsLast = -1;\n            } else if (this.channel4envelopeVolume < 0xF) {\n                this.channel4currentVolume = ++this.channel4envelopeVolume << this.channel4VolumeShifter;\n                this.channel4envelopeSweeps = this.channel4envelopeSweepsLast;\n                this.channel4UpdateCache();\n            } else this.channel4envelopeSweepsLast = -1;\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.computeAudioChannels = function() {\n    //Clock down the four audio channels to the next closest audio event:\n    this.channel1FrequencyCounter -= this.audioClocksUntilNextEvent;\n    this.channel2FrequencyCounter -= this.audioClocksUntilNextEvent;\n    this.channel3Counter -= this.audioClocksUntilNextEvent;\n    this.channel4Counter -= this.audioClocksUntilNextEvent;\n    //Channel 1 counter:\n    if (this.channel1FrequencyCounter == 0) {\n        this.channel1FrequencyCounter = this.channel1FrequencyTracker;\n        this.channel1DutyTracker = this.channel1DutyTracker + 1 & 0x7;\n        this.channel1OutputLevelTrimaryCache();\n    }\n    //Channel 2 counter:\n    if (this.channel2FrequencyCounter == 0) {\n        this.channel2FrequencyCounter = this.channel2FrequencyTracker;\n        this.channel2DutyTracker = this.channel2DutyTracker + 1 & 0x7;\n        this.channel2OutputLevelTrimaryCache();\n    }\n    //Channel 3 counter:\n    if (this.channel3Counter == 0) {\n        if (this.channel3canPlay) this.channel3lastSampleLookup = this.channel3lastSampleLookup + 1 & 0x1F;\n        this.channel3Counter = this.channel3FrequencyPeriod;\n        this.channel3UpdateCache();\n    }\n    //Channel 4 counter:\n    if (this.channel4Counter == 0) {\n        this.channel4lastSampleLookup = this.channel4lastSampleLookup + 1 & this.channel4BitRange;\n        this.channel4Counter = this.channel4FrequencyPeriod;\n        this.channel4UpdateCache();\n    }\n    //Find the number of clocks to next closest counter event:\n    this.audioClocksUntilNextEventCounter = this.audioClocksUntilNextEvent = Math.min(this.channel1FrequencyCounter, this.channel2FrequencyCounter, this.channel3Counter, this.channel4Counter);\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel1EnableCheck = function() {\n    this.channel1Enabled = (this.channel1consecutive || this.channel1totalLength > 0) && !this.channel1SweepFault && this.channel1canPlay;\n    this.channel1OutputLevelSecondaryCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel1VolumeEnableCheck = function() {\n    this.channel1canPlay = this.memory[0xFF12] > 7;\n    this.channel1EnableCheck();\n    this.channel1OutputLevelSecondaryCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel1OutputLevelCache = function() {\n    this.channel1currentSampleLeft = this.leftChannel1 ? this.channel1envelopeVolume : 0;\n    this.channel1currentSampleRight = this.rightChannel1 ? this.channel1envelopeVolume : 0;\n    this.channel1OutputLevelSecondaryCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel1OutputLevelSecondaryCache = function() {\n    if (this.channel1Enabled) {\n        this.channel1currentSampleLeftSecondary = this.channel1currentSampleLeft;\n        this.channel1currentSampleRightSecondary = this.channel1currentSampleRight;\n    } else {\n        this.channel1currentSampleLeftSecondary = 0;\n        this.channel1currentSampleRightSecondary = 0;\n    }\n    this.channel1OutputLevelTrimaryCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel1OutputLevelTrimaryCache = function() {\n    if (this.channel1CachedDuty[this.channel1DutyTracker] && $2a65eeefd956ad48$exports[14][0]) {\n        this.channel1currentSampleLeftTrimary = this.channel1currentSampleLeftSecondary;\n        this.channel1currentSampleRightTrimary = this.channel1currentSampleRightSecondary;\n    } else {\n        this.channel1currentSampleLeftTrimary = 0;\n        this.channel1currentSampleRightTrimary = 0;\n    }\n    this.mixerOutputLevelCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel2EnableCheck = function() {\n    this.channel2Enabled = (this.channel2consecutive || this.channel2totalLength > 0) && this.channel2canPlay;\n    this.channel2OutputLevelSecondaryCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel2VolumeEnableCheck = function() {\n    this.channel2canPlay = this.memory[0xFF17] > 7;\n    this.channel2EnableCheck();\n    this.channel2OutputLevelSecondaryCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel2OutputLevelCache = function() {\n    this.channel2currentSampleLeft = this.leftChannel2 ? this.channel2envelopeVolume : 0;\n    this.channel2currentSampleRight = this.rightChannel2 ? this.channel2envelopeVolume : 0;\n    this.channel2OutputLevelSecondaryCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel2OutputLevelSecondaryCache = function() {\n    if (this.channel2Enabled) {\n        this.channel2currentSampleLeftSecondary = this.channel2currentSampleLeft;\n        this.channel2currentSampleRightSecondary = this.channel2currentSampleRight;\n    } else {\n        this.channel2currentSampleLeftSecondary = 0;\n        this.channel2currentSampleRightSecondary = 0;\n    }\n    this.channel2OutputLevelTrimaryCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel2OutputLevelTrimaryCache = function() {\n    if (this.channel2CachedDuty[this.channel2DutyTracker] && $2a65eeefd956ad48$exports[14][1]) {\n        this.channel2currentSampleLeftTrimary = this.channel2currentSampleLeftSecondary;\n        this.channel2currentSampleRightTrimary = this.channel2currentSampleRightSecondary;\n    } else {\n        this.channel2currentSampleLeftTrimary = 0;\n        this.channel2currentSampleRightTrimary = 0;\n    }\n    this.mixerOutputLevelCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel3EnableCheck = function() {\n    this.channel3Enabled = /*this.channel3canPlay && */ this.channel3consecutive || this.channel3totalLength > 0;\n    this.channel3OutputLevelSecondaryCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel3OutputLevelCache = function() {\n    this.channel3currentSampleLeft = this.leftChannel3 ? this.cachedChannel3Sample : 0;\n    this.channel3currentSampleRight = this.rightChannel3 ? this.cachedChannel3Sample : 0;\n    this.channel3OutputLevelSecondaryCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel3OutputLevelSecondaryCache = function() {\n    if (this.channel3Enabled && $2a65eeefd956ad48$exports[14][2]) {\n        this.channel3currentSampleLeftSecondary = this.channel3currentSampleLeft;\n        this.channel3currentSampleRightSecondary = this.channel3currentSampleRight;\n    } else {\n        this.channel3currentSampleLeftSecondary = 0;\n        this.channel3currentSampleRightSecondary = 0;\n    }\n    this.mixerOutputLevelCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel4EnableCheck = function() {\n    this.channel4Enabled = (this.channel4consecutive || this.channel4totalLength > 0) && this.channel4canPlay;\n    this.channel4OutputLevelSecondaryCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel4VolumeEnableCheck = function() {\n    this.channel4canPlay = this.memory[0xFF21] > 7;\n    this.channel4EnableCheck();\n    this.channel4OutputLevelSecondaryCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel4OutputLevelCache = function() {\n    this.channel4currentSampleLeft = this.leftChannel4 ? this.cachedChannel4Sample : 0;\n    this.channel4currentSampleRight = this.rightChannel4 ? this.cachedChannel4Sample : 0;\n    this.channel4OutputLevelSecondaryCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel4OutputLevelSecondaryCache = function() {\n    if (this.channel4Enabled && $2a65eeefd956ad48$exports[14][3]) {\n        this.channel4currentSampleLeftSecondary = this.channel4currentSampleLeft;\n        this.channel4currentSampleRightSecondary = this.channel4currentSampleRight;\n    } else {\n        this.channel4currentSampleLeftSecondary = 0;\n        this.channel4currentSampleRightSecondary = 0;\n    }\n    this.mixerOutputLevelCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.mixerOutputLevelCache = function() {\n    this.mixerOutputCache = (this.channel1currentSampleLeftTrimary + this.channel2currentSampleLeftTrimary + this.channel3currentSampleLeftSecondary + this.channel4currentSampleLeftSecondary) * this.VinLeftChannelMasterVolume << 16 | (this.channel1currentSampleRightTrimary + this.channel2currentSampleRightTrimary + this.channel3currentSampleRightSecondary + this.channel4currentSampleRightSecondary) * this.VinRightChannelMasterVolume;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel3UpdateCache = function() {\n    this.cachedChannel3Sample = this.channel3PCM[this.channel3lastSampleLookup] >> this.channel3patternType;\n    this.channel3OutputLevelCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel3WriteRAM = function(address, data) {\n    if (this.channel3canPlay) this.audioJIT();\n    this.memory[0xFF30 | address] = data;\n    address <<= 1;\n    this.channel3PCM[address] = data >> 4;\n    this.channel3PCM[address | 1] = data & 0xF;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.channel4UpdateCache = function() {\n    this.cachedChannel4Sample = this.noiseSampleTable[this.channel4currentVolume | this.channel4lastSampleLookup];\n    this.channel4OutputLevelCache();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.run = function() {\n    //The preprocessing before the actual iteration loop:\n    if ((this.stopEmulator & 2) == 0) {\n        if ((this.stopEmulator & 1) == 1) {\n            if (!this.CPUStopped) {\n                this.stopEmulator = 0;\n                this.audioUnderrunAdjustment();\n                this.clockUpdate(); //RTC clocking.\n                if (!this.halt) this.executeIteration();\n                else {\n                    this.CPUTicks = 0;\n                    this.calculateHALTPeriod();\n                    if (this.halt) {\n                        this.updateCore();\n                        this.iterationEndRoutine();\n                    } else this.executeIteration();\n                }\n                //Request the graphics target to be updated:\n                this.requestDraw();\n                this.frameDone = true;\n            } else {\n                this.audioUnderrunAdjustment();\n                this.audioTicks += this.CPUCyclesTotal;\n                this.audioJIT();\n                this.stopEmulator |= 1; //End current loop.\n            }\n        } else {\n            console.log(\"Iterator restarted a faulted core.\");\n            $6de83094d3815a3f$var$pause();\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.executeIteration = function() {\n    //Iterate the interpreter loop:\n    var opcodeToExecute = 0;\n    var timedTicks = 0;\n    while(this.stopEmulator == 0){\n        //Interrupt Arming:\n        switch(this.IRQEnableDelay){\n            case 1:\n                this.IME = true;\n                this.checkIRQMatching();\n            case 2:\n                --this.IRQEnableDelay;\n        }\n        //Is an IRQ set to fire?:\n        if (this.IRQLineMatched > 0) //IME is true and and interrupt was matched:\n        this.launchIRQ();\n        //Fetch the current opcode:\n        opcodeToExecute = this.memoryReader[this.programCounter](this, this.programCounter);\n        //Increment the program counter to the next instruction:\n        this.programCounter = this.programCounter + 1 & 0xFFFF;\n        //Check for the program counter quirk:\n        if (this.skipPCIncrement) {\n            this.programCounter = this.programCounter - 1 & 0xFFFF;\n            this.skipPCIncrement = false;\n        }\n        //Get how many CPU cycles the current instruction counts for:\n        this.CPUTicks = this.TICKTable[opcodeToExecute];\n        //Execute the current instruction:\n        this.OPCODE[opcodeToExecute](this);\n        //Update the state (Inlined updateCoreFull manually here):\n        //Update the clocking for the LCD emulation:\n        this.LCDTicks += this.CPUTicks >> this.doubleSpeedShifter; //LCD Timing\n        this.LCDCONTROL[this.actualScanLine](this); //Scan Line and STAT Mode Control\n        //Single-speed relative timing for A/V emulation:\n        timedTicks = this.CPUTicks >> this.doubleSpeedShifter; //CPU clocking can be updated from the LCD handling.\n        this.audioTicks += timedTicks; //Audio Timing\n        this.emulatorTicks += timedTicks; //Emulator Timing\n        //CPU Timers:\n        this.DIVTicks += this.CPUTicks; //DIV Timing\n        if (this.TIMAEnabled) {\n            this.timerTicks += this.CPUTicks;\n            while(this.timerTicks >= this.TACClocker){\n                this.timerTicks -= this.TACClocker;\n                if (++this.memory[0xFF05] == 0x100) {\n                    this.memory[0xFF05] = this.memory[0xFF06];\n                    this.interruptsRequested |= 0x4;\n                    this.checkIRQMatching();\n                }\n            }\n        }\n        if (this.serialTimer > 0) {\n            //IRQ Counter:\n            this.serialTimer -= this.CPUTicks;\n            if (this.serialTimer <= 0) {\n                this.interruptsRequested |= 0x8;\n                this.checkIRQMatching();\n            }\n            //Bit Shit Counter:\n            this.serialShiftTimer -= this.CPUTicks;\n            if (this.serialShiftTimer <= 0) {\n                this.serialShiftTimer = this.serialShiftTimerAllocated;\n                this.memory[0xFF01] = this.memory[0xFF01] << 1 & 0xFE | 0x01; //We could shift in actual link data here if we were to implement such!!!\n            }\n        }\n        //End of iteration routine:\n        if (this.emulatorTicks >= this.CPUCyclesTotal) this.iterationEndRoutine();\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.iterationEndRoutine = function() {\n    if ((this.stopEmulator & 0x1) == 0) {\n        this.audioJIT(); //Make sure we at least output once per iteration.\n        //Update DIV Alignment (Integer overflow safety):\n        this.memory[0xFF04] = this.memory[0xFF04] + (this.DIVTicks >> 8) & 0xFF;\n        this.DIVTicks &= 0xFF;\n        //Update emulator flags:\n        this.stopEmulator |= 1; //End current loop.\n        this.emulatorTicks -= this.CPUCyclesTotal;\n        this.CPUCyclesTotalCurrent += this.CPUCyclesTotalRoundoff;\n        this.recalculateIterationClockLimit();\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.handleSTOP = function() {\n    this.CPUStopped = true; //Stop CPU until joypad input changes.\n    this.iterationEndRoutine();\n    if (this.emulatorTicks < 0) {\n        this.audioTicks -= this.emulatorTicks;\n        this.audioJIT();\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.recalculateIterationClockLimit = function() {\n    var endModulus = this.CPUCyclesTotalCurrent % 4;\n    this.CPUCyclesTotal = this.CPUCyclesTotalBase + this.CPUCyclesTotalCurrent - endModulus;\n    this.CPUCyclesTotalCurrent = endModulus;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.recalculateIterationClockLimitForAudio = function(audioClocking) {\n    this.CPUCyclesTotal += Math.min(audioClocking >> 2 << 2, this.CPUCyclesTotalBase << 1);\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.scanLineMode2 = function() {\n    if (this.STATTracker != 1) {\n        if (this.mode2TriggerSTAT) {\n            this.interruptsRequested |= 0x2;\n            this.checkIRQMatching();\n        }\n        this.STATTracker = 1;\n        this.modeSTAT = 2;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.scanLineMode3 = function() {\n    if (this.modeSTAT != 3) {\n        if (this.STATTracker == 0 && this.mode2TriggerSTAT) {\n            this.interruptsRequested |= 0x2;\n            this.checkIRQMatching();\n        }\n        this.STATTracker = 1;\n        this.modeSTAT = 3;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.scanLineMode0 = function() {\n    if (this.modeSTAT != 0) {\n        if (this.STATTracker != 2) {\n            if (this.STATTracker == 0) {\n                if (this.mode2TriggerSTAT) {\n                    this.interruptsRequested |= 0x2;\n                    this.checkIRQMatching();\n                }\n                this.modeSTAT = 3;\n            }\n            this.incrementScanLineQueue();\n            this.updateSpriteCount(this.actualScanLine);\n            this.STATTracker = 2;\n        }\n        if (this.LCDTicks >= this.spriteCount) {\n            if (this.hdmaRunning) this.executeHDMA();\n            if (this.mode0TriggerSTAT) {\n                this.interruptsRequested |= 0x2;\n                this.checkIRQMatching();\n            }\n            this.STATTracker = 3;\n            this.modeSTAT = 0;\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.clocksUntilLYCMatch = function() {\n    if (this.memory[0xFF45] != 0) {\n        if (this.memory[0xFF45] > this.actualScanLine) return 456 * (this.memory[0xFF45] - this.actualScanLine);\n        return 456 * (154 - this.actualScanLine + this.memory[0xFF45]);\n    }\n    return 456 * (this.actualScanLine == 153 && this.memory[0xFF44] == 0 ? 154 : 153 - this.actualScanLine) + 8;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.clocksUntilMode0 = function() {\n    switch(this.modeSTAT){\n        case 0:\n            if (this.actualScanLine == 143) {\n                this.updateSpriteCount(0);\n                return this.spriteCount + 5016;\n            }\n            this.updateSpriteCount(this.actualScanLine + 1);\n            return this.spriteCount + 456;\n        case 2:\n        case 3:\n            this.updateSpriteCount(this.actualScanLine);\n            return this.spriteCount;\n        case 1:\n            this.updateSpriteCount(0);\n            return this.spriteCount + 456 * (154 - this.actualScanLine);\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.updateSpriteCount = function(line) {\n    this.spriteCount = 252;\n    if (this.cGBC && this.gfxSpriteShow) {\n        var lineAdjusted = line + 0x10;\n        var yoffset = 0;\n        var yCap = this.gfxSpriteNormalHeight ? 0x8 : 0x10;\n        for(var OAMAddress = 0xFE00; OAMAddress < 0xFEA0 && this.spriteCount < 312; OAMAddress += 4){\n            yoffset = lineAdjusted - this.memory[OAMAddress];\n            if (yoffset > -1 && yoffset < yCap) this.spriteCount += 6;\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.matchLYC = function() {\n    if (this.memory[0xFF44] == this.memory[0xFF45]) {\n        this.memory[0xFF41] |= 0x04;\n        if (this.LYCMatchTriggerSTAT) {\n            this.interruptsRequested |= 0x2;\n            this.checkIRQMatching();\n        }\n    } else this.memory[0xFF41] &= 0x7B;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.updateCore = function() {\n    //Update the clocking for the LCD emulation:\n    this.LCDTicks += this.CPUTicks >> this.doubleSpeedShifter; //LCD Timing\n    this.LCDCONTROL[this.actualScanLine](this); //Scan Line and STAT Mode Control\n    //Single-speed relative timing for A/V emulation:\n    var timedTicks = this.CPUTicks >> this.doubleSpeedShifter; //CPU clocking can be updated from the LCD handling.\n    this.audioTicks += timedTicks; //Audio Timing\n    this.emulatorTicks += timedTicks; //Emulator Timing\n    //CPU Timers:\n    this.DIVTicks += this.CPUTicks; //DIV Timing\n    if (this.TIMAEnabled) {\n        this.timerTicks += this.CPUTicks;\n        while(this.timerTicks >= this.TACClocker){\n            this.timerTicks -= this.TACClocker;\n            if (++this.memory[0xFF05] == 0x100) {\n                this.memory[0xFF05] = this.memory[0xFF06];\n                this.interruptsRequested |= 0x4;\n                this.checkIRQMatching();\n            }\n        }\n    }\n    if (this.serialTimer > 0) {\n        //IRQ Counter:\n        this.serialTimer -= this.CPUTicks;\n        if (this.serialTimer <= 0) {\n            this.interruptsRequested |= 0x8;\n            this.checkIRQMatching();\n        }\n        //Bit Shit Counter:\n        this.serialShiftTimer -= this.CPUTicks;\n        if (this.serialShiftTimer <= 0) {\n            this.serialShiftTimer = this.serialShiftTimerAllocated;\n            this.memory[0xFF01] = this.memory[0xFF01] << 1 & 0xFE | 0x01; //We could shift in actual link data here if we were to implement such!!!\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.updateCoreFull = function() {\n    //Update the state machine:\n    this.updateCore();\n    //End of iteration routine:\n    if (this.emulatorTicks >= this.CPUCyclesTotal) this.iterationEndRoutine();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.initializeLCDController = function() {\n    //Display on hanlding:\n    var line = 0;\n    while(line < 154){\n        if (line < 143) //We're on a normal scan line:\n        this.LINECONTROL[line] = function(parentObj) {\n            if (parentObj.LCDTicks < 80) parentObj.scanLineMode2();\n            else if (parentObj.LCDTicks < 252) parentObj.scanLineMode3();\n            else if (parentObj.LCDTicks < 456) parentObj.scanLineMode0();\n            else {\n                //We're on a new scan line:\n                parentObj.LCDTicks -= 456;\n                if (parentObj.STATTracker != 3) {\n                    //Make sure the mode 0 handler was run at least once per scan line:\n                    if (parentObj.STATTracker != 2) {\n                        if (parentObj.STATTracker == 0 && parentObj.mode2TriggerSTAT) parentObj.interruptsRequested |= 0x2;\n                        parentObj.incrementScanLineQueue();\n                    }\n                    if (parentObj.hdmaRunning) parentObj.executeHDMA();\n                    if (parentObj.mode0TriggerSTAT) parentObj.interruptsRequested |= 0x2;\n                }\n                //Update the scanline registers and assert the LYC counter:\n                parentObj.actualScanLine = ++parentObj.memory[0xFF44];\n                //Perform a LYC counter assert:\n                if (parentObj.actualScanLine == parentObj.memory[0xFF45]) {\n                    parentObj.memory[0xFF41] |= 0x04;\n                    if (parentObj.LYCMatchTriggerSTAT) parentObj.interruptsRequested |= 0x2;\n                } else parentObj.memory[0xFF41] &= 0x7B;\n                parentObj.checkIRQMatching();\n                //Reset our mode contingency variables:\n                parentObj.STATTracker = 0;\n                parentObj.modeSTAT = 2;\n                parentObj.LINECONTROL[parentObj.actualScanLine](parentObj); //Scan Line and STAT Mode Control.\n            }\n        };\n        else if (line == 143) //We're on the last visible scan line of the LCD screen:\n        this.LINECONTROL[143] = function(parentObj) {\n            if (parentObj.LCDTicks < 80) parentObj.scanLineMode2();\n            else if (parentObj.LCDTicks < 252) parentObj.scanLineMode3();\n            else if (parentObj.LCDTicks < 456) parentObj.scanLineMode0();\n            else {\n                //Starting V-Blank:\n                //Just finished the last visible scan line:\n                parentObj.LCDTicks -= 456;\n                if (parentObj.STATTracker != 3) {\n                    //Make sure the mode 0 handler was run at least once per scan line:\n                    if (parentObj.STATTracker != 2) {\n                        if (parentObj.STATTracker == 0 && parentObj.mode2TriggerSTAT) parentObj.interruptsRequested |= 0x2;\n                        parentObj.incrementScanLineQueue();\n                    }\n                    if (parentObj.hdmaRunning) parentObj.executeHDMA();\n                    if (parentObj.mode0TriggerSTAT) parentObj.interruptsRequested |= 0x2;\n                }\n                //Update the scanline registers and assert the LYC counter:\n                parentObj.actualScanLine = parentObj.memory[0xFF44] = 144;\n                //Perform a LYC counter assert:\n                if (parentObj.memory[0xFF45] == 144) {\n                    parentObj.memory[0xFF41] |= 0x04;\n                    if (parentObj.LYCMatchTriggerSTAT) parentObj.interruptsRequested |= 0x2;\n                } else parentObj.memory[0xFF41] &= 0x7B;\n                //Reset our mode contingency variables:\n                parentObj.STATTracker = 0;\n                //Update our state for v-blank:\n                parentObj.modeSTAT = 1;\n                parentObj.interruptsRequested |= parentObj.mode1TriggerSTAT ? 0x3 : 0x1;\n                parentObj.checkIRQMatching();\n                //Attempt to blit out to our canvas:\n                if (parentObj.drewBlank == 0) //Ensure JIT framing alignment:\n                {\n                    if (parentObj.totalLinesPassed < 144 || parentObj.totalLinesPassed == 144 && parentObj.midScanlineOffset > -1) {\n                        //Make sure our gfx are up-to-date:\n                        parentObj.graphicsJITVBlank();\n                        //Draw the frame:\n                        parentObj.prepareFrame();\n                    }\n                } else //LCD off takes at least 2 frames:\n                --parentObj.drewBlank;\n                parentObj.LINECONTROL[144](parentObj); //Scan Line and STAT Mode Control.\n            }\n        };\n        else if (line < 153) //In VBlank\n        this.LINECONTROL[line] = function(parentObj) {\n            if (parentObj.LCDTicks >= 456) {\n                //We're on a new scan line:\n                parentObj.LCDTicks -= 456;\n                parentObj.actualScanLine = ++parentObj.memory[0xFF44];\n                //Perform a LYC counter assert:\n                if (parentObj.actualScanLine == parentObj.memory[0xFF45]) {\n                    parentObj.memory[0xFF41] |= 0x04;\n                    if (parentObj.LYCMatchTriggerSTAT) {\n                        parentObj.interruptsRequested |= 0x2;\n                        parentObj.checkIRQMatching();\n                    }\n                } else parentObj.memory[0xFF41] &= 0x7B;\n                parentObj.LINECONTROL[parentObj.actualScanLine](parentObj); //Scan Line and STAT Mode Control.\n            }\n        };\n        else //VBlank Ending (We're on the last actual scan line)\n        this.LINECONTROL[153] = function(parentObj) {\n            if (parentObj.LCDTicks >= 8) {\n                if (parentObj.STATTracker != 4 && parentObj.memory[0xFF44] == 153) {\n                    parentObj.memory[0xFF44] = 0; //LY register resets to 0 early.\n                    //Perform a LYC counter assert:\n                    if (parentObj.memory[0xFF45] == 0) {\n                        parentObj.memory[0xFF41] |= 0x04;\n                        if (parentObj.LYCMatchTriggerSTAT) {\n                            parentObj.interruptsRequested |= 0x2;\n                            parentObj.checkIRQMatching();\n                        }\n                    } else parentObj.memory[0xFF41] &= 0x7B;\n                    parentObj.STATTracker = 4;\n                }\n                if (parentObj.LCDTicks >= 456) {\n                    //We reset back to the beginning:\n                    parentObj.LCDTicks -= 456;\n                    parentObj.STATTracker = parentObj.actualScanLine = 0;\n                    parentObj.LINECONTROL[0](parentObj); //Scan Line and STAT Mode Control.\n                }\n            }\n        };\n        ++line;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.DisplayShowOff = function() {\n    if (this.drewBlank == 0) {\n        //Output a blank screen to the output framebuffer:\n        this.clearFrameBuffer();\n        this.drewFrame = true;\n    }\n    this.drewBlank = 2;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.executeHDMA = function() {\n    this.DMAWrite(1);\n    if (this.halt) {\n        if (this.LCDTicks - this.spriteCount < (4 >> this.doubleSpeedShifter | 0x20)) {\n            //HALT clocking correction:\n            this.CPUTicks = 4 + (0x20 + this.spriteCount << this.doubleSpeedShifter);\n            this.LCDTicks = this.spriteCount + (4 >> this.doubleSpeedShifter | 0x20);\n        }\n    } else this.LCDTicks += 4 >> this.doubleSpeedShifter | 0x20; //LCD Timing Update For HDMA.\n    if (this.memory[0xFF55] == 0) {\n        this.hdmaRunning = false;\n        this.memory[0xFF55] = 0xFF; //Transfer completed (\"Hidden last step,\" since some ROMs don't imply this, but most do).\n    } else --this.memory[0xFF55];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.clockUpdate = function() {\n    if (this.cTIMER) {\n        var dateObj = new Date();\n        var newTime = dateObj.getTime();\n        var timeElapsed = newTime - this.lastIteration; //Get the numnber of milliseconds since this last executed.\n        this.lastIteration = newTime;\n        if (this.cTIMER && !this.RTCHALT) {\n            //Update the MBC3 RTC:\n            this.RTCSeconds += timeElapsed / 1000;\n            while(this.RTCSeconds >= 60){\n                this.RTCSeconds -= 60;\n                ++this.RTCMinutes;\n                if (this.RTCMinutes >= 60) {\n                    this.RTCMinutes -= 60;\n                    ++this.RTCHours;\n                    if (this.RTCHours >= 24) {\n                        this.RTCHours -= 24;\n                        ++this.RTCDays;\n                        if (this.RTCDays >= 512) {\n                            this.RTCDays -= 512;\n                            this.RTCDayOverFlow = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.prepareFrame = function() {\n    //Copy the internal frame buffer to the output buffer:\n    this.swizzleFrameBuffer();\n    this.drewFrame = true;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.requestDraw = function() {\n    if (this.drewFrame) this.dispatchDraw();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.dispatchDraw = function() {\n    if (this.offscreenRGBCount > 0) {\n        //We actually updated the graphics internally, so copy out:\n        if (this.offscreenRGBCount == 92160) this.processDraw(this.swizzledFrame);\n        else this.resizeFrameBuffer();\n    }\n};\n//ToDo: Remove this method, I don't think it's necessary.\n//Converts rgb canvas into rgba.\n$6de83094d3815a3f$var$GameBoyCore.prototype.processDraw = function(frameBuffer) {\n    var canvasRGBALength = this.offscreenRGBCount;\n    var canvasData = this.canvasBuffer.data;\n    var bufferIndex = 0;\n    for(var canvasIndex = 0; canvasIndex < canvasRGBALength; ++canvasIndex){\n        canvasData[canvasIndex++] = frameBuffer[bufferIndex++];\n        canvasData[canvasIndex++] = frameBuffer[bufferIndex++];\n        canvasData[canvasIndex++] = frameBuffer[bufferIndex++];\n    }\n    this.graphicsBlit();\n    this.drewFrame = false;\n};\n//Which means I want to grab the swizzledFrame, not the normal frameBuffer(?)\n//ToDo: I believe (but am not sure) that I can remove this too.\n$6de83094d3815a3f$var$GameBoyCore.prototype.swizzleFrameBuffer = function() {\n    //Convert our dirty 24-bit (24-bit, with internal render flags above it) framebuffer to an 8-bit buffer with separate indices for the RGB channels:\n    var frameBuffer = this.frameBuffer;\n    var swizzledFrame = this.swizzledFrame;\n    var bufferIndex = 0;\n    for(var canvasIndex = 0; canvasIndex < 69120;){\n        swizzledFrame[canvasIndex++] = frameBuffer[bufferIndex] >> 16 & 0xFF; //Red\n        swizzledFrame[canvasIndex++] = frameBuffer[bufferIndex] >> 8 & 0xFF; //Green\n        swizzledFrame[canvasIndex++] = frameBuffer[bufferIndex++] & 0xFF; //Blue\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.clearFrameBuffer = function() {\n    var bufferIndex = 0;\n    var frameBuffer = this.swizzledFrame;\n    if (this.cGBC || this.colorizedGBPalettes) while(bufferIndex < 69120)frameBuffer[bufferIndex++] = 248;\n    else while(bufferIndex < 69120){\n        frameBuffer[bufferIndex++] = 239;\n        frameBuffer[bufferIndex++] = 255;\n        frameBuffer[bufferIndex++] = 222;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.resizeFrameBuffer = function() {\n    //Resize in javascript with resize.js:\n    if (this.resizePathClear) {\n        this.resizePathClear = false;\n        this.resizer.resize(this.swizzledFrame);\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.compileResizeFrameBufferFunction = function() {\n    if (this.offscreenRGBCount > 0) {\n        var parentObj = this;\n        this.resizer = new Resize(160, 144, this.offscreenWidth, this.offscreenHeight, false, $2a65eeefd956ad48$exports[13], false, function(buffer) {\n            if (buffer.length / 3 * 4 == parentObj.offscreenRGBCount) parentObj.processDraw(buffer);\n            parentObj.resizePathClear = true;\n        });\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.renderScanLine = function(scanlineToRender) {\n    this.pixelStart = scanlineToRender * 160;\n    if (this.bgEnabled) {\n        this.pixelEnd = 160;\n        this.BGLayerRender(scanlineToRender);\n        this.WindowLayerRender(scanlineToRender);\n    } else {\n        var pixelLine = (scanlineToRender + 1) * 160;\n        var defaultColor = this.cGBC || this.colorizedGBPalettes ? 0xF8F8F8 : 0xEFFFDE;\n        for(var pixelPosition = scanlineToRender * 160 + this.currentX; pixelPosition < pixelLine; pixelPosition++)this.frameBuffer[pixelPosition] = defaultColor;\n    }\n    this.SpriteLayerRender(scanlineToRender);\n    this.currentX = 0;\n    this.midScanlineOffset = -1;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.renderMidScanLine = function() {\n    if (this.actualScanLine < 144 && this.modeSTAT == 3) {\n        //TODO: Get this accurate:\n        if (this.midScanlineOffset == -1) this.midScanlineOffset = this.backgroundX & 0x7;\n        if (this.LCDTicks >= 82) {\n            this.pixelEnd = this.LCDTicks - 74;\n            this.pixelEnd = Math.min(this.pixelEnd - this.midScanlineOffset - this.pixelEnd % 0x8, 160);\n            if (this.bgEnabled) {\n                this.pixelStart = this.lastUnrenderedLine * 160;\n                this.BGLayerRender(this.lastUnrenderedLine);\n                this.WindowLayerRender(this.lastUnrenderedLine);\n            //TODO: Do midscanline JIT for sprites...\n            } else {\n                var pixelLine = this.lastUnrenderedLine * 160 + this.pixelEnd;\n                var defaultColor = this.cGBC || this.colorizedGBPalettes ? 0xF8F8F8 : 0xEFFFDE;\n                for(var pixelPosition = this.lastUnrenderedLine * 160 + this.currentX; pixelPosition < pixelLine; pixelPosition++)this.frameBuffer[pixelPosition] = defaultColor;\n            }\n            this.currentX = this.pixelEnd;\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.initializeModeSpecificArrays = function() {\n    this.LCDCONTROL = this.LCDisOn ? this.LINECONTROL : this.DISPLAYOFFCONTROL;\n    if (this.cGBC) {\n        this.gbcOBJRawPalette = this.getTypedArray(0x40, 0, \"uint8\");\n        this.gbcBGRawPalette = this.getTypedArray(0x40, 0, \"uint8\");\n        this.gbcOBJPalette = this.getTypedArray(0x20, 0x1000000, \"int32\");\n        this.gbcBGPalette = this.getTypedArray(0x40, 0, \"int32\");\n        this.BGCHRBank2 = this.getTypedArray(0x800, 0, \"uint8\");\n        this.BGCHRCurrentBank = this.currVRAMBank > 0 ? this.BGCHRBank2 : this.BGCHRBank1;\n        this.tileCache = this.generateCacheArray(0xF80);\n    } else {\n        this.gbOBJPalette = this.getTypedArray(8, 0, \"int32\");\n        this.gbBGPalette = this.getTypedArray(4, 0, \"int32\");\n        this.BGPalette = this.gbBGPalette;\n        this.OBJPalette = this.gbOBJPalette;\n        this.tileCache = this.generateCacheArray(0x700);\n        this.sortBuffer = this.getTypedArray(0x100, 0, \"uint8\");\n        this.OAMAddressCache = this.getTypedArray(10, 0, \"int32\");\n    }\n    this.renderPathBuild();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.GBCtoGBModeAdjust = function() {\n    $6de83094d3815a3f$var$cout(\"Stepping down from GBC mode.\", 0);\n    this.VRAM = this.GBCMemory = this.BGCHRCurrentBank = this.BGCHRBank2 = null;\n    this.tileCache.length = 0x700;\n    if ($2a65eeefd956ad48$exports[4]) {\n        this.gbBGColorizedPalette = this.getTypedArray(4, 0, \"int32\");\n        this.gbOBJColorizedPalette = this.getTypedArray(8, 0, \"int32\");\n        this.cachedBGPaletteConversion = this.getTypedArray(4, 0, \"int32\");\n        this.cachedOBJPaletteConversion = this.getTypedArray(8, 0, \"int32\");\n        this.BGPalette = this.gbBGColorizedPalette;\n        this.OBJPalette = this.gbOBJColorizedPalette;\n        this.gbOBJPalette = this.gbBGPalette = null;\n        this.getGBCColor();\n    } else {\n        this.gbOBJPalette = this.getTypedArray(8, 0, \"int32\");\n        this.gbBGPalette = this.getTypedArray(4, 0, \"int32\");\n        this.BGPalette = this.gbBGPalette;\n        this.OBJPalette = this.gbOBJPalette;\n    }\n    this.sortBuffer = this.getTypedArray(0x100, 0, \"uint8\");\n    this.OAMAddressCache = this.getTypedArray(10, 0, \"int32\");\n    this.renderPathBuild();\n    this.memoryReadJumpCompile();\n    this.memoryWriteJumpCompile();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.renderPathBuild = function() {\n    if (!this.cGBC) {\n        this.BGLayerRender = this.BGGBLayerRender;\n        this.WindowLayerRender = this.WindowGBLayerRender;\n        this.SpriteLayerRender = this.SpriteGBLayerRender;\n    } else {\n        this.priorityFlaggingPathRebuild();\n        this.SpriteLayerRender = this.SpriteGBCLayerRender;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.priorityFlaggingPathRebuild = function() {\n    if (this.BGPriorityEnabled) {\n        this.BGLayerRender = this.BGGBCLayerRender;\n        this.WindowLayerRender = this.WindowGBCLayerRender;\n    } else {\n        this.BGLayerRender = this.BGGBCLayerRenderNoPriorityFlagging;\n        this.WindowLayerRender = this.WindowGBCLayerRenderNoPriorityFlagging;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.initializeReferencesFromSaveState = function() {\n    this.LCDCONTROL = this.LCDisOn ? this.LINECONTROL : this.DISPLAYOFFCONTROL;\n    var tileIndex = 0;\n    if (!this.cGBC) {\n        if (this.colorizedGBPalettes) {\n            this.BGPalette = this.gbBGColorizedPalette;\n            this.OBJPalette = this.gbOBJColorizedPalette;\n            this.updateGBBGPalette = this.updateGBColorizedBGPalette;\n            this.updateGBOBJPalette = this.updateGBColorizedOBJPalette;\n        } else {\n            this.BGPalette = this.gbBGPalette;\n            this.OBJPalette = this.gbOBJPalette;\n        }\n        this.tileCache = this.generateCacheArray(0x700);\n        for(tileIndex = 0x8000; tileIndex < 0x9000; tileIndex += 2)this.generateGBOAMTileLine(tileIndex);\n        for(tileIndex = 0x9000; tileIndex < 0x9800; tileIndex += 2)this.generateGBTileLine(tileIndex);\n        this.sortBuffer = this.getTypedArray(0x100, 0, \"uint8\");\n        this.OAMAddressCache = this.getTypedArray(10, 0, \"int32\");\n    } else {\n        this.BGCHRCurrentBank = this.currVRAMBank > 0 ? this.BGCHRBank2 : this.BGCHRBank1;\n        this.tileCache = this.generateCacheArray(0xF80);\n        for(; tileIndex < 0x1800; tileIndex += 0x10){\n            this.generateGBCTileBank1(tileIndex);\n            this.generateGBCTileBank2(tileIndex);\n        }\n    }\n    this.renderPathBuild();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.RGBTint = function(value) {\n    //Adjustment for the GBC's tinting (According to Gambatte):\n    var r = value & 0x1F;\n    var g = value >> 5 & 0x1F;\n    var b = value >> 10 & 0x1F;\n    return r * 13 + g * 2 + b >> 1 << 16 | g * 3 + b << 9 | r * 3 + g * 2 + b * 11 >> 1;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.getGBCColor = function() {\n    //GBC Colorization of DMG ROMs:\n    //BG\n    for(var counter = 0; counter < 4; counter++){\n        var adjustedIndex = counter << 1;\n        //BG\n        this.cachedBGPaletteConversion[counter] = this.RGBTint(this.gbcBGRawPalette[adjustedIndex | 1] << 8 | this.gbcBGRawPalette[adjustedIndex]);\n        //OBJ 1\n        this.cachedOBJPaletteConversion[counter] = this.RGBTint(this.gbcOBJRawPalette[adjustedIndex | 1] << 8 | this.gbcOBJRawPalette[adjustedIndex]);\n    }\n    //OBJ 2\n    for(counter = 4; counter < 8; counter++){\n        adjustedIndex = counter << 1;\n        this.cachedOBJPaletteConversion[counter] = this.RGBTint(this.gbcOBJRawPalette[adjustedIndex | 1] << 8 | this.gbcOBJRawPalette[adjustedIndex]);\n    }\n    //Update the palette entries:\n    this.updateGBBGPalette = this.updateGBColorizedBGPalette;\n    this.updateGBOBJPalette = this.updateGBColorizedOBJPalette;\n    this.updateGBBGPalette(this.memory[0xFF47]);\n    this.updateGBOBJPalette(0, this.memory[0xFF48]);\n    this.updateGBOBJPalette(1, this.memory[0xFF49]);\n    this.colorizedGBPalettes = true;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.updateGBRegularBGPalette = function(data) {\n    this.gbBGPalette[0] = this.colors[data & 0x03] | 0x2000000;\n    this.gbBGPalette[1] = this.colors[data >> 2 & 0x03];\n    this.gbBGPalette[2] = this.colors[data >> 4 & 0x03];\n    this.gbBGPalette[3] = this.colors[data >> 6];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.updateGBColorizedBGPalette = function(data) {\n    //GB colorization:\n    this.gbBGColorizedPalette[0] = this.cachedBGPaletteConversion[data & 0x03] | 0x2000000;\n    this.gbBGColorizedPalette[1] = this.cachedBGPaletteConversion[data >> 2 & 0x03];\n    this.gbBGColorizedPalette[2] = this.cachedBGPaletteConversion[data >> 4 & 0x03];\n    this.gbBGColorizedPalette[3] = this.cachedBGPaletteConversion[data >> 6];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.updateGBRegularOBJPalette = function(index, data) {\n    this.gbOBJPalette[index | 1] = this.colors[data >> 2 & 0x03];\n    this.gbOBJPalette[index | 2] = this.colors[data >> 4 & 0x03];\n    this.gbOBJPalette[index | 3] = this.colors[data >> 6];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.updateGBColorizedOBJPalette = function(index, data) {\n    //GB colorization:\n    this.gbOBJColorizedPalette[index | 1] = this.cachedOBJPaletteConversion[index | data >> 2 & 0x03];\n    this.gbOBJColorizedPalette[index | 2] = this.cachedOBJPaletteConversion[index | data >> 4 & 0x03];\n    this.gbOBJColorizedPalette[index | 3] = this.cachedOBJPaletteConversion[index | data >> 6];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.updateGBCBGPalette = function(index, data) {\n    if (this.gbcBGRawPalette[index] != data) {\n        this.midScanLineJIT();\n        //Update the color palette for BG tiles since it changed:\n        this.gbcBGRawPalette[index] = data;\n        if ((index & 0x06) == 0) {\n            //Palette 0 (Special tile Priority stuff)\n            data = 0x2000000 | this.RGBTint(this.gbcBGRawPalette[index | 1] << 8 | this.gbcBGRawPalette[index & 0x3E]);\n            index >>= 1;\n            this.gbcBGPalette[index] = data;\n            this.gbcBGPalette[0x20 | index] = 0x1000000 | data;\n        } else {\n            //Regular Palettes (No special crap)\n            data = this.RGBTint(this.gbcBGRawPalette[index | 1] << 8 | this.gbcBGRawPalette[index & 0x3E]);\n            index >>= 1;\n            this.gbcBGPalette[index] = data;\n            this.gbcBGPalette[0x20 | index] = 0x1000000 | data;\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.updateGBCOBJPalette = function(index, data) {\n    if (this.gbcOBJRawPalette[index] != data) {\n        //Update the color palette for OBJ tiles since it changed:\n        this.gbcOBJRawPalette[index] = data;\n        if ((index & 0x06) > 0) {\n            //Regular Palettes (No special crap)\n            this.midScanLineJIT();\n            this.gbcOBJPalette[index >> 1] = 0x1000000 | this.RGBTint(this.gbcOBJRawPalette[index | 1] << 8 | this.gbcOBJRawPalette[index & 0x3E]);\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.BGGBLayerRender = function(scanlineToRender) {\n    var scrollYAdjusted = this.backgroundY + scanlineToRender & 0xFF; //The line of the BG we're at.\n    var tileYLine = (scrollYAdjusted & 7) << 3;\n    var tileYDown = this.gfxBackgroundCHRBankPosition | (scrollYAdjusted & 0xF8) << 2; //The row of cached tiles we're fetching from.\n    var scrollXAdjusted = this.backgroundX + this.currentX & 0xFF; //The scroll amount of the BG.\n    var pixelPosition = this.pixelStart + this.currentX; //Current pixel we're working on.\n    var pixelPositionEnd = this.pixelStart + (this.gfxWindowDisplay && scanlineToRender - this.windowY >= 0 ? Math.min(Math.max(this.windowX, 0) + this.currentX, this.pixelEnd) : this.pixelEnd); //Make sure we do at most 160 pixels a scanline.\n    var tileNumber = tileYDown + (scrollXAdjusted >> 3);\n    var chrCode = this.BGCHRBank1[tileNumber];\n    if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n    var tile = this.tileCache[chrCode];\n    for(var texel = scrollXAdjusted & 0x7; texel < 8 && pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted)this.frameBuffer[pixelPosition++] = this.BGPalette[tile[tileYLine | texel++]];\n    var scrollXAdjustedAligned = Math.min(pixelPositionEnd - pixelPosition, 0x100 - scrollXAdjusted) >> 3;\n    scrollXAdjusted += scrollXAdjustedAligned << 3;\n    scrollXAdjustedAligned += tileNumber;\n    while(tileNumber < scrollXAdjustedAligned){\n        chrCode = this.BGCHRBank1[++tileNumber];\n        if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n        tile = this.tileCache[chrCode];\n        texel = tileYLine;\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel]];\n    }\n    if (pixelPosition < pixelPositionEnd) {\n        if (scrollXAdjusted < 0x100) {\n            chrCode = this.BGCHRBank1[++tileNumber];\n            if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n            tile = this.tileCache[chrCode];\n            for(texel = tileYLine - 1; pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted)this.frameBuffer[pixelPosition++] = this.BGPalette[tile[++texel]];\n        }\n        scrollXAdjustedAligned = (pixelPositionEnd - pixelPosition >> 3) + tileYDown;\n        while(tileYDown < scrollXAdjustedAligned){\n            chrCode = this.BGCHRBank1[tileYDown++];\n            if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n            tile = this.tileCache[chrCode];\n            texel = tileYLine;\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel]];\n        }\n        if (pixelPosition < pixelPositionEnd) {\n            chrCode = this.BGCHRBank1[tileYDown];\n            if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n            tile = this.tileCache[chrCode];\n            switch(pixelPositionEnd - pixelPosition){\n                case 7:\n                    this.frameBuffer[pixelPosition + 6] = this.BGPalette[tile[tileYLine | 6]];\n                case 6:\n                    this.frameBuffer[pixelPosition + 5] = this.BGPalette[tile[tileYLine | 5]];\n                case 5:\n                    this.frameBuffer[pixelPosition + 4] = this.BGPalette[tile[tileYLine | 4]];\n                case 4:\n                    this.frameBuffer[pixelPosition + 3] = this.BGPalette[tile[tileYLine | 3]];\n                case 3:\n                    this.frameBuffer[pixelPosition + 2] = this.BGPalette[tile[tileYLine | 2]];\n                case 2:\n                    this.frameBuffer[pixelPosition + 1] = this.BGPalette[tile[tileYLine | 1]];\n                case 1:\n                    this.frameBuffer[pixelPosition] = this.BGPalette[tile[tileYLine]];\n            }\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.BGGBCLayerRender = function(scanlineToRender) {\n    var scrollYAdjusted = this.backgroundY + scanlineToRender & 0xFF; //The line of the BG we're at.\n    var tileYLine = (scrollYAdjusted & 7) << 3;\n    var tileYDown = this.gfxBackgroundCHRBankPosition | (scrollYAdjusted & 0xF8) << 2; //The row of cached tiles we're fetching from.\n    var scrollXAdjusted = this.backgroundX + this.currentX & 0xFF; //The scroll amount of the BG.\n    var pixelPosition = this.pixelStart + this.currentX; //Current pixel we're working on.\n    var pixelPositionEnd = this.pixelStart + (this.gfxWindowDisplay && scanlineToRender - this.windowY >= 0 ? Math.min(Math.max(this.windowX, 0) + this.currentX, this.pixelEnd) : this.pixelEnd); //Make sure we do at most 160 pixels a scanline.\n    var tileNumber = tileYDown + (scrollXAdjusted >> 3);\n    var chrCode = this.BGCHRBank1[tileNumber];\n    if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n    var attrCode = this.BGCHRBank2[tileNumber];\n    var tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n    var palette = (attrCode & 0x7) << 2 | (attrCode & 0x80) >> 2;\n    for(var texel = scrollXAdjusted & 0x7; texel < 8 && pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted)this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[tileYLine | texel++]];\n    var scrollXAdjustedAligned = Math.min(pixelPositionEnd - pixelPosition, 0x100 - scrollXAdjusted) >> 3;\n    scrollXAdjusted += scrollXAdjustedAligned << 3;\n    scrollXAdjustedAligned += tileNumber;\n    while(tileNumber < scrollXAdjustedAligned){\n        chrCode = this.BGCHRBank1[++tileNumber];\n        if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n        attrCode = this.BGCHRBank2[tileNumber];\n        tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n        palette = (attrCode & 0x7) << 2 | (attrCode & 0x80) >> 2;\n        texel = tileYLine;\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];\n    }\n    if (pixelPosition < pixelPositionEnd) {\n        if (scrollXAdjusted < 0x100) {\n            chrCode = this.BGCHRBank1[++tileNumber];\n            if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n            attrCode = this.BGCHRBank2[tileNumber];\n            tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n            palette = (attrCode & 0x7) << 2 | (attrCode & 0x80) >> 2;\n            for(texel = tileYLine - 1; pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted)this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[++texel]];\n        }\n        scrollXAdjustedAligned = (pixelPositionEnd - pixelPosition >> 3) + tileYDown;\n        while(tileYDown < scrollXAdjustedAligned){\n            chrCode = this.BGCHRBank1[tileYDown];\n            if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n            attrCode = this.BGCHRBank2[tileYDown++];\n            tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n            palette = (attrCode & 0x7) << 2 | (attrCode & 0x80) >> 2;\n            texel = tileYLine;\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];\n        }\n        if (pixelPosition < pixelPositionEnd) {\n            chrCode = this.BGCHRBank1[tileYDown];\n            if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n            attrCode = this.BGCHRBank2[tileYDown];\n            tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n            palette = (attrCode & 0x7) << 2 | (attrCode & 0x80) >> 2;\n            switch(pixelPositionEnd - pixelPosition){\n                case 7:\n                    this.frameBuffer[pixelPosition + 6] = this.gbcBGPalette[palette | tile[tileYLine | 6]];\n                case 6:\n                    this.frameBuffer[pixelPosition + 5] = this.gbcBGPalette[palette | tile[tileYLine | 5]];\n                case 5:\n                    this.frameBuffer[pixelPosition + 4] = this.gbcBGPalette[palette | tile[tileYLine | 4]];\n                case 4:\n                    this.frameBuffer[pixelPosition + 3] = this.gbcBGPalette[palette | tile[tileYLine | 3]];\n                case 3:\n                    this.frameBuffer[pixelPosition + 2] = this.gbcBGPalette[palette | tile[tileYLine | 2]];\n                case 2:\n                    this.frameBuffer[pixelPosition + 1] = this.gbcBGPalette[palette | tile[tileYLine | 1]];\n                case 1:\n                    this.frameBuffer[pixelPosition] = this.gbcBGPalette[palette | tile[tileYLine]];\n            }\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.BGGBCLayerRenderNoPriorityFlagging = function(scanlineToRender) {\n    var scrollYAdjusted = this.backgroundY + scanlineToRender & 0xFF; //The line of the BG we're at.\n    var tileYLine = (scrollYAdjusted & 7) << 3;\n    var tileYDown = this.gfxBackgroundCHRBankPosition | (scrollYAdjusted & 0xF8) << 2; //The row of cached tiles we're fetching from.\n    var scrollXAdjusted = this.backgroundX + this.currentX & 0xFF; //The scroll amount of the BG.\n    var pixelPosition = this.pixelStart + this.currentX; //Current pixel we're working on.\n    var pixelPositionEnd = this.pixelStart + (this.gfxWindowDisplay && scanlineToRender - this.windowY >= 0 ? Math.min(Math.max(this.windowX, 0) + this.currentX, this.pixelEnd) : this.pixelEnd); //Make sure we do at most 160 pixels a scanline.\n    var tileNumber = tileYDown + (scrollXAdjusted >> 3);\n    var chrCode = this.BGCHRBank1[tileNumber];\n    if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n    var attrCode = this.BGCHRBank2[tileNumber];\n    var tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n    var palette = (attrCode & 0x7) << 2;\n    for(var texel = scrollXAdjusted & 0x7; texel < 8 && pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted)this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[tileYLine | texel++]];\n    var scrollXAdjustedAligned = Math.min(pixelPositionEnd - pixelPosition, 0x100 - scrollXAdjusted) >> 3;\n    scrollXAdjusted += scrollXAdjustedAligned << 3;\n    scrollXAdjustedAligned += tileNumber;\n    while(tileNumber < scrollXAdjustedAligned){\n        chrCode = this.BGCHRBank1[++tileNumber];\n        if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n        attrCode = this.BGCHRBank2[tileNumber];\n        tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n        palette = (attrCode & 0x7) << 2;\n        texel = tileYLine;\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];\n    }\n    if (pixelPosition < pixelPositionEnd) {\n        if (scrollXAdjusted < 0x100) {\n            chrCode = this.BGCHRBank1[++tileNumber];\n            if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n            attrCode = this.BGCHRBank2[tileNumber];\n            tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n            palette = (attrCode & 0x7) << 2;\n            for(texel = tileYLine - 1; pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted)this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[++texel]];\n        }\n        scrollXAdjustedAligned = (pixelPositionEnd - pixelPosition >> 3) + tileYDown;\n        while(tileYDown < scrollXAdjustedAligned){\n            chrCode = this.BGCHRBank1[tileYDown];\n            if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n            attrCode = this.BGCHRBank2[tileYDown++];\n            tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n            palette = (attrCode & 0x7) << 2;\n            texel = tileYLine;\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];\n        }\n        if (pixelPosition < pixelPositionEnd) {\n            chrCode = this.BGCHRBank1[tileYDown];\n            if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n            attrCode = this.BGCHRBank2[tileYDown];\n            tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n            palette = (attrCode & 0x7) << 2;\n            switch(pixelPositionEnd - pixelPosition){\n                case 7:\n                    this.frameBuffer[pixelPosition + 6] = this.gbcBGPalette[palette | tile[tileYLine | 6]];\n                case 6:\n                    this.frameBuffer[pixelPosition + 5] = this.gbcBGPalette[palette | tile[tileYLine | 5]];\n                case 5:\n                    this.frameBuffer[pixelPosition + 4] = this.gbcBGPalette[palette | tile[tileYLine | 4]];\n                case 4:\n                    this.frameBuffer[pixelPosition + 3] = this.gbcBGPalette[palette | tile[tileYLine | 3]];\n                case 3:\n                    this.frameBuffer[pixelPosition + 2] = this.gbcBGPalette[palette | tile[tileYLine | 2]];\n                case 2:\n                    this.frameBuffer[pixelPosition + 1] = this.gbcBGPalette[palette | tile[tileYLine | 1]];\n                case 1:\n                    this.frameBuffer[pixelPosition] = this.gbcBGPalette[palette | tile[tileYLine]];\n            }\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.WindowGBLayerRender = function(scanlineToRender) {\n    if (this.gfxWindowDisplay) {\n        var scrollYAdjusted = scanlineToRender - this.windowY; //The line of the BG we're at.\n        if (scrollYAdjusted >= 0) {\n            var scrollXRangeAdjusted = this.windowX > 0 ? this.windowX + this.currentX : this.currentX;\n            var pixelPosition = this.pixelStart + scrollXRangeAdjusted;\n            var pixelPositionEnd = this.pixelStart + this.pixelEnd;\n            if (pixelPosition < pixelPositionEnd) {\n                var tileYLine = (scrollYAdjusted & 0x7) << 3;\n                var tileNumber = (this.gfxWindowCHRBankPosition | (scrollYAdjusted & 0xF8) << 2) + (this.currentX >> 3);\n                var chrCode = this.BGCHRBank1[tileNumber];\n                if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n                var tile = this.tileCache[chrCode];\n                var texel = scrollXRangeAdjusted - this.windowX & 0x7;\n                scrollXRangeAdjusted = Math.min(8, texel + pixelPositionEnd - pixelPosition);\n                while(texel < scrollXRangeAdjusted)this.frameBuffer[pixelPosition++] = this.BGPalette[tile[tileYLine | texel++]];\n                scrollXRangeAdjusted = tileNumber + (pixelPositionEnd - pixelPosition >> 3);\n                while(tileNumber < scrollXRangeAdjusted){\n                    chrCode = this.BGCHRBank1[++tileNumber];\n                    if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n                    tile = this.tileCache[chrCode];\n                    texel = tileYLine;\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel]];\n                }\n                if (pixelPosition < pixelPositionEnd) {\n                    chrCode = this.BGCHRBank1[++tileNumber];\n                    if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n                    tile = this.tileCache[chrCode];\n                    switch(pixelPositionEnd - pixelPosition){\n                        case 7:\n                            this.frameBuffer[pixelPosition + 6] = this.BGPalette[tile[tileYLine | 6]];\n                        case 6:\n                            this.frameBuffer[pixelPosition + 5] = this.BGPalette[tile[tileYLine | 5]];\n                        case 5:\n                            this.frameBuffer[pixelPosition + 4] = this.BGPalette[tile[tileYLine | 4]];\n                        case 4:\n                            this.frameBuffer[pixelPosition + 3] = this.BGPalette[tile[tileYLine | 3]];\n                        case 3:\n                            this.frameBuffer[pixelPosition + 2] = this.BGPalette[tile[tileYLine | 2]];\n                        case 2:\n                            this.frameBuffer[pixelPosition + 1] = this.BGPalette[tile[tileYLine | 1]];\n                        case 1:\n                            this.frameBuffer[pixelPosition] = this.BGPalette[tile[tileYLine]];\n                    }\n                }\n            }\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.WindowGBCLayerRender = function(scanlineToRender) {\n    if (this.gfxWindowDisplay) {\n        var scrollYAdjusted = scanlineToRender - this.windowY; //The line of the BG we're at.\n        if (scrollYAdjusted >= 0) {\n            var scrollXRangeAdjusted = this.windowX > 0 ? this.windowX + this.currentX : this.currentX;\n            var pixelPosition = this.pixelStart + scrollXRangeAdjusted;\n            var pixelPositionEnd = this.pixelStart + this.pixelEnd;\n            if (pixelPosition < pixelPositionEnd) {\n                var tileYLine = (scrollYAdjusted & 0x7) << 3;\n                var tileNumber = (this.gfxWindowCHRBankPosition | (scrollYAdjusted & 0xF8) << 2) + (this.currentX >> 3);\n                var chrCode = this.BGCHRBank1[tileNumber];\n                if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n                var attrCode = this.BGCHRBank2[tileNumber];\n                var tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n                var palette = (attrCode & 0x7) << 2 | (attrCode & 0x80) >> 2;\n                var texel = scrollXRangeAdjusted - this.windowX & 0x7;\n                scrollXRangeAdjusted = Math.min(8, texel + pixelPositionEnd - pixelPosition);\n                while(texel < scrollXRangeAdjusted)this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[tileYLine | texel++]];\n                scrollXRangeAdjusted = tileNumber + (pixelPositionEnd - pixelPosition >> 3);\n                while(tileNumber < scrollXRangeAdjusted){\n                    chrCode = this.BGCHRBank1[++tileNumber];\n                    if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n                    attrCode = this.BGCHRBank2[tileNumber];\n                    tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n                    palette = (attrCode & 0x7) << 2 | (attrCode & 0x80) >> 2;\n                    texel = tileYLine;\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];\n                }\n                if (pixelPosition < pixelPositionEnd) {\n                    chrCode = this.BGCHRBank1[++tileNumber];\n                    if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n                    attrCode = this.BGCHRBank2[tileNumber];\n                    tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n                    palette = (attrCode & 0x7) << 2 | (attrCode & 0x80) >> 2;\n                    switch(pixelPositionEnd - pixelPosition){\n                        case 7:\n                            this.frameBuffer[pixelPosition + 6] = this.gbcBGPalette[palette | tile[tileYLine | 6]];\n                        case 6:\n                            this.frameBuffer[pixelPosition + 5] = this.gbcBGPalette[palette | tile[tileYLine | 5]];\n                        case 5:\n                            this.frameBuffer[pixelPosition + 4] = this.gbcBGPalette[palette | tile[tileYLine | 4]];\n                        case 4:\n                            this.frameBuffer[pixelPosition + 3] = this.gbcBGPalette[palette | tile[tileYLine | 3]];\n                        case 3:\n                            this.frameBuffer[pixelPosition + 2] = this.gbcBGPalette[palette | tile[tileYLine | 2]];\n                        case 2:\n                            this.frameBuffer[pixelPosition + 1] = this.gbcBGPalette[palette | tile[tileYLine | 1]];\n                        case 1:\n                            this.frameBuffer[pixelPosition] = this.gbcBGPalette[palette | tile[tileYLine]];\n                    }\n                }\n            }\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.WindowGBCLayerRenderNoPriorityFlagging = function(scanlineToRender) {\n    if (this.gfxWindowDisplay) {\n        var scrollYAdjusted = scanlineToRender - this.windowY; //The line of the BG we're at.\n        if (scrollYAdjusted >= 0) {\n            var scrollXRangeAdjusted = this.windowX > 0 ? this.windowX + this.currentX : this.currentX;\n            var pixelPosition = this.pixelStart + scrollXRangeAdjusted;\n            var pixelPositionEnd = this.pixelStart + this.pixelEnd;\n            if (pixelPosition < pixelPositionEnd) {\n                var tileYLine = (scrollYAdjusted & 0x7) << 3;\n                var tileNumber = (this.gfxWindowCHRBankPosition | (scrollYAdjusted & 0xF8) << 2) + (this.currentX >> 3);\n                var chrCode = this.BGCHRBank1[tileNumber];\n                if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n                var attrCode = this.BGCHRBank2[tileNumber];\n                var tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n                var palette = (attrCode & 0x7) << 2;\n                var texel = scrollXRangeAdjusted - this.windowX & 0x7;\n                scrollXRangeAdjusted = Math.min(8, texel + pixelPositionEnd - pixelPosition);\n                while(texel < scrollXRangeAdjusted)this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[tileYLine | texel++]];\n                scrollXRangeAdjusted = tileNumber + (pixelPositionEnd - pixelPosition >> 3);\n                while(tileNumber < scrollXRangeAdjusted){\n                    chrCode = this.BGCHRBank1[++tileNumber];\n                    if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n                    attrCode = this.BGCHRBank2[tileNumber];\n                    tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n                    palette = (attrCode & 0x7) << 2;\n                    texel = tileYLine;\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];\n                }\n                if (pixelPosition < pixelPositionEnd) {\n                    chrCode = this.BGCHRBank1[++tileNumber];\n                    if (chrCode < this.gfxBackgroundBankOffset) chrCode |= 0x100;\n                    attrCode = this.BGCHRBank2[tileNumber];\n                    tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | chrCode];\n                    palette = (attrCode & 0x7) << 2;\n                    switch(pixelPositionEnd - pixelPosition){\n                        case 7:\n                            this.frameBuffer[pixelPosition + 6] = this.gbcBGPalette[palette | tile[tileYLine | 6]];\n                        case 6:\n                            this.frameBuffer[pixelPosition + 5] = this.gbcBGPalette[palette | tile[tileYLine | 5]];\n                        case 5:\n                            this.frameBuffer[pixelPosition + 4] = this.gbcBGPalette[palette | tile[tileYLine | 4]];\n                        case 4:\n                            this.frameBuffer[pixelPosition + 3] = this.gbcBGPalette[palette | tile[tileYLine | 3]];\n                        case 3:\n                            this.frameBuffer[pixelPosition + 2] = this.gbcBGPalette[palette | tile[tileYLine | 2]];\n                        case 2:\n                            this.frameBuffer[pixelPosition + 1] = this.gbcBGPalette[palette | tile[tileYLine | 1]];\n                        case 1:\n                            this.frameBuffer[pixelPosition] = this.gbcBGPalette[palette | tile[tileYLine]];\n                    }\n                }\n            }\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.SpriteGBLayerRender = function(scanlineToRender) {\n    if (this.gfxSpriteShow) {\n        var lineAdjusted = scanlineToRender + 0x10;\n        var OAMAddress = 0xFE00;\n        var yoffset = 0;\n        var xcoord = 1;\n        var xCoordStart = 0;\n        var xCoordEnd = 0;\n        var attrCode = 0;\n        var palette = 0;\n        var tile = null;\n        var data = 0;\n        var spriteCount = 0;\n        var length = 0;\n        var currentPixel = 0;\n        var linePixel = 0;\n        //Clear our x-coord sort buffer:\n        while(xcoord < 168)this.sortBuffer[xcoord++] = 0xFF;\n        if (this.gfxSpriteNormalHeight) //Draw the visible sprites:\n        for(var length = this.findLowestSpriteDrawable(lineAdjusted, 0x7); spriteCount < length; ++spriteCount){\n            OAMAddress = this.OAMAddressCache[spriteCount];\n            yoffset = lineAdjusted - this.memory[OAMAddress] << 3;\n            attrCode = this.memory[OAMAddress | 3];\n            palette = (attrCode & 0x10) >> 2;\n            tile = this.tileCache[(attrCode & 0x60) << 4 | this.memory[OAMAddress | 0x2]];\n            linePixel = xCoordStart = this.memory[OAMAddress | 1];\n            xCoordEnd = Math.min(168 - linePixel, 8);\n            xcoord = linePixel > 7 ? 0 : 8 - linePixel;\n            for(currentPixel = this.pixelStart + (linePixel > 8 ? linePixel - 8 : 0); xcoord < xCoordEnd; ++xcoord, ++currentPixel, ++linePixel)if (this.sortBuffer[linePixel] > xCoordStart) {\n                if (this.frameBuffer[currentPixel] >= 0x2000000) {\n                    data = tile[yoffset | xcoord];\n                    if (data > 0) {\n                        this.frameBuffer[currentPixel] = this.OBJPalette[palette | data];\n                        this.sortBuffer[linePixel] = xCoordStart;\n                    }\n                } else if (this.frameBuffer[currentPixel] < 0x1000000) {\n                    data = tile[yoffset | xcoord];\n                    if (data > 0 && attrCode < 0x80) {\n                        this.frameBuffer[currentPixel] = this.OBJPalette[palette | data];\n                        this.sortBuffer[linePixel] = xCoordStart;\n                    }\n                }\n            }\n        }\n        else //Draw the visible sprites:\n        for(var length = this.findLowestSpriteDrawable(lineAdjusted, 0xF); spriteCount < length; ++spriteCount){\n            OAMAddress = this.OAMAddressCache[spriteCount];\n            yoffset = lineAdjusted - this.memory[OAMAddress] << 3;\n            attrCode = this.memory[OAMAddress | 3];\n            palette = (attrCode & 0x10) >> 2;\n            if ((attrCode & 0x40) == (0x40 & yoffset)) tile = this.tileCache[(attrCode & 0x60) << 4 | this.memory[OAMAddress | 0x2] & 0xFE];\n            else tile = this.tileCache[(attrCode & 0x60) << 4 | this.memory[OAMAddress | 0x2] | 1];\n            yoffset &= 0x3F;\n            linePixel = xCoordStart = this.memory[OAMAddress | 1];\n            xCoordEnd = Math.min(168 - linePixel, 8);\n            xcoord = linePixel > 7 ? 0 : 8 - linePixel;\n            for(currentPixel = this.pixelStart + (linePixel > 8 ? linePixel - 8 : 0); xcoord < xCoordEnd; ++xcoord, ++currentPixel, ++linePixel)if (this.sortBuffer[linePixel] > xCoordStart) {\n                if (this.frameBuffer[currentPixel] >= 0x2000000) {\n                    data = tile[yoffset | xcoord];\n                    if (data > 0) {\n                        this.frameBuffer[currentPixel] = this.OBJPalette[palette | data];\n                        this.sortBuffer[linePixel] = xCoordStart;\n                    }\n                } else if (this.frameBuffer[currentPixel] < 0x1000000) {\n                    data = tile[yoffset | xcoord];\n                    if (data > 0 && attrCode < 0x80) {\n                        this.frameBuffer[currentPixel] = this.OBJPalette[palette | data];\n                        this.sortBuffer[linePixel] = xCoordStart;\n                    }\n                }\n            }\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.findLowestSpriteDrawable = function(scanlineToRender, drawableRange) {\n    var address = 0xFE00;\n    var spriteCount = 0;\n    var diff = 0;\n    while(address < 0xFEA0 && spriteCount < 10){\n        diff = scanlineToRender - this.memory[address];\n        if ((diff & drawableRange) == diff) this.OAMAddressCache[spriteCount++] = address;\n        address += 4;\n    }\n    return spriteCount;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.SpriteGBCLayerRender = function(scanlineToRender) {\n    if (this.gfxSpriteShow) {\n        var OAMAddress = 0xFE00;\n        var lineAdjusted = scanlineToRender + 0x10;\n        var yoffset = 0;\n        var xcoord = 0;\n        var endX = 0;\n        var xCounter = 0;\n        var attrCode = 0;\n        var palette = 0;\n        var tile = null;\n        var data = 0;\n        var currentPixel = 0;\n        var spriteCount = 0;\n        if (this.gfxSpriteNormalHeight) for(; OAMAddress < 0xFEA0 && spriteCount < 10; OAMAddress += 4){\n            yoffset = lineAdjusted - this.memory[OAMAddress];\n            if ((yoffset & 0x7) == yoffset) {\n                xcoord = this.memory[OAMAddress | 1] - 8;\n                endX = Math.min(160, xcoord + 8);\n                attrCode = this.memory[OAMAddress | 3];\n                palette = (attrCode & 7) << 2;\n                tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | this.memory[OAMAddress | 2]];\n                xCounter = xcoord > 0 ? xcoord : 0;\n                xcoord -= yoffset << 3;\n                for(currentPixel = this.pixelStart + xCounter; xCounter < endX; ++xCounter, ++currentPixel){\n                    if (this.frameBuffer[currentPixel] >= 0x2000000) {\n                        data = tile[xCounter - xcoord];\n                        if (data > 0) this.frameBuffer[currentPixel] = this.gbcOBJPalette[palette | data];\n                    } else if (this.frameBuffer[currentPixel] < 0x1000000) {\n                        data = tile[xCounter - xcoord];\n                        if (data > 0 && attrCode < 0x80) this.frameBuffer[currentPixel] = this.gbcOBJPalette[palette | data];\n                    }\n                }\n                ++spriteCount;\n            }\n        }\n        else for(; OAMAddress < 0xFEA0 && spriteCount < 10; OAMAddress += 4){\n            yoffset = lineAdjusted - this.memory[OAMAddress];\n            if ((yoffset & 0xF) == yoffset) {\n                xcoord = this.memory[OAMAddress | 1] - 8;\n                endX = Math.min(160, xcoord + 8);\n                attrCode = this.memory[OAMAddress | 3];\n                palette = (attrCode & 7) << 2;\n                if ((attrCode & 0x40) == (0x40 & yoffset << 3)) tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | this.memory[OAMAddress | 0x2] & 0xFE];\n                else tile = this.tileCache[(attrCode & 0x08) << 8 | (attrCode & 0x60) << 4 | this.memory[OAMAddress | 0x2] | 1];\n                xCounter = xcoord > 0 ? xcoord : 0;\n                xcoord -= (yoffset & 0x7) << 3;\n                for(currentPixel = this.pixelStart + xCounter; xCounter < endX; ++xCounter, ++currentPixel){\n                    if (this.frameBuffer[currentPixel] >= 0x2000000) {\n                        data = tile[xCounter - xcoord];\n                        if (data > 0) this.frameBuffer[currentPixel] = this.gbcOBJPalette[palette | data];\n                    } else if (this.frameBuffer[currentPixel] < 0x1000000) {\n                        data = tile[xCounter - xcoord];\n                        if (data > 0 && attrCode < 0x80) this.frameBuffer[currentPixel] = this.gbcOBJPalette[palette | data];\n                    }\n                }\n                ++spriteCount;\n            }\n        }\n    }\n};\n//Generate only a single tile line for the GB tile cache mode:\n$6de83094d3815a3f$var$GameBoyCore.prototype.generateGBTileLine = function(address) {\n    var lineCopy = this.memory[0x1 | address] << 8 | this.memory[0x9FFE & address];\n    var tileBlock = this.tileCache[(address & 0x1FF0) >> 4];\n    address = (address & 0xE) << 2;\n    tileBlock[address | 7] = (lineCopy & 0x100) >> 7 | lineCopy & 0x1;\n    tileBlock[address | 6] = (lineCopy & 0x200) >> 8 | (lineCopy & 0x2) >> 1;\n    tileBlock[address | 5] = (lineCopy & 0x400) >> 9 | (lineCopy & 0x4) >> 2;\n    tileBlock[address | 4] = (lineCopy & 0x800) >> 10 | (lineCopy & 0x8) >> 3;\n    tileBlock[address | 3] = (lineCopy & 0x1000) >> 11 | (lineCopy & 0x10) >> 4;\n    tileBlock[address | 2] = (lineCopy & 0x2000) >> 12 | (lineCopy & 0x20) >> 5;\n    tileBlock[address | 1] = (lineCopy & 0x4000) >> 13 | (lineCopy & 0x40) >> 6;\n    tileBlock[address] = (lineCopy & 0x8000) >> 14 | (lineCopy & 0x80) >> 7;\n};\n//Generate only a single tile line for the GBC tile cache mode (Bank 1):\n$6de83094d3815a3f$var$GameBoyCore.prototype.generateGBCTileLineBank1 = function(address) {\n    var lineCopy = this.memory[0x1 | address] << 8 | this.memory[0x9FFE & address];\n    address &= 0x1FFE;\n    var tileBlock1 = this.tileCache[address >> 4];\n    var tileBlock2 = this.tileCache[0x200 | address >> 4];\n    var tileBlock3 = this.tileCache[0x400 | address >> 4];\n    var tileBlock4 = this.tileCache[0x600 | address >> 4];\n    address = (address & 0xE) << 2;\n    var addressFlipped = 0x38 - address;\n    tileBlock4[addressFlipped] = tileBlock2[address] = tileBlock3[addressFlipped | 7] = tileBlock1[address | 7] = (lineCopy & 0x100) >> 7 | lineCopy & 0x1;\n    tileBlock4[addressFlipped | 1] = tileBlock2[address | 1] = tileBlock3[addressFlipped | 6] = tileBlock1[address | 6] = (lineCopy & 0x200) >> 8 | (lineCopy & 0x2) >> 1;\n    tileBlock4[addressFlipped | 2] = tileBlock2[address | 2] = tileBlock3[addressFlipped | 5] = tileBlock1[address | 5] = (lineCopy & 0x400) >> 9 | (lineCopy & 0x4) >> 2;\n    tileBlock4[addressFlipped | 3] = tileBlock2[address | 3] = tileBlock3[addressFlipped | 4] = tileBlock1[address | 4] = (lineCopy & 0x800) >> 10 | (lineCopy & 0x8) >> 3;\n    tileBlock4[addressFlipped | 4] = tileBlock2[address | 4] = tileBlock3[addressFlipped | 3] = tileBlock1[address | 3] = (lineCopy & 0x1000) >> 11 | (lineCopy & 0x10) >> 4;\n    tileBlock4[addressFlipped | 5] = tileBlock2[address | 5] = tileBlock3[addressFlipped | 2] = tileBlock1[address | 2] = (lineCopy & 0x2000) >> 12 | (lineCopy & 0x20) >> 5;\n    tileBlock4[addressFlipped | 6] = tileBlock2[address | 6] = tileBlock3[addressFlipped | 1] = tileBlock1[address | 1] = (lineCopy & 0x4000) >> 13 | (lineCopy & 0x40) >> 6;\n    tileBlock4[addressFlipped | 7] = tileBlock2[address | 7] = tileBlock3[addressFlipped] = tileBlock1[address] = (lineCopy & 0x8000) >> 14 | (lineCopy & 0x80) >> 7;\n};\n//Generate all the flip combinations for a full GBC VRAM bank 1 tile:\n$6de83094d3815a3f$var$GameBoyCore.prototype.generateGBCTileBank1 = function(vramAddress) {\n    var address = vramAddress >> 4;\n    var tileBlock1 = this.tileCache[address];\n    var tileBlock2 = this.tileCache[0x200 | address];\n    var tileBlock3 = this.tileCache[0x400 | address];\n    var tileBlock4 = this.tileCache[0x600 | address];\n    var lineCopy = 0;\n    vramAddress |= 0x8000;\n    address = 0;\n    var addressFlipped = 56;\n    do {\n        lineCopy = this.memory[0x1 | vramAddress] << 8 | this.memory[vramAddress];\n        tileBlock4[addressFlipped] = tileBlock2[address] = tileBlock3[addressFlipped | 7] = tileBlock1[address | 7] = (lineCopy & 0x100) >> 7 | lineCopy & 0x1;\n        tileBlock4[addressFlipped | 1] = tileBlock2[address | 1] = tileBlock3[addressFlipped | 6] = tileBlock1[address | 6] = (lineCopy & 0x200) >> 8 | (lineCopy & 0x2) >> 1;\n        tileBlock4[addressFlipped | 2] = tileBlock2[address | 2] = tileBlock3[addressFlipped | 5] = tileBlock1[address | 5] = (lineCopy & 0x400) >> 9 | (lineCopy & 0x4) >> 2;\n        tileBlock4[addressFlipped | 3] = tileBlock2[address | 3] = tileBlock3[addressFlipped | 4] = tileBlock1[address | 4] = (lineCopy & 0x800) >> 10 | (lineCopy & 0x8) >> 3;\n        tileBlock4[addressFlipped | 4] = tileBlock2[address | 4] = tileBlock3[addressFlipped | 3] = tileBlock1[address | 3] = (lineCopy & 0x1000) >> 11 | (lineCopy & 0x10) >> 4;\n        tileBlock4[addressFlipped | 5] = tileBlock2[address | 5] = tileBlock3[addressFlipped | 2] = tileBlock1[address | 2] = (lineCopy & 0x2000) >> 12 | (lineCopy & 0x20) >> 5;\n        tileBlock4[addressFlipped | 6] = tileBlock2[address | 6] = tileBlock3[addressFlipped | 1] = tileBlock1[address | 1] = (lineCopy & 0x4000) >> 13 | (lineCopy & 0x40) >> 6;\n        tileBlock4[addressFlipped | 7] = tileBlock2[address | 7] = tileBlock3[addressFlipped] = tileBlock1[address] = (lineCopy & 0x8000) >> 14 | (lineCopy & 0x80) >> 7;\n        address += 8;\n        addressFlipped -= 8;\n        vramAddress += 2;\n    }while (addressFlipped > -1);\n};\n//Generate only a single tile line for the GBC tile cache mode (Bank 2):\n$6de83094d3815a3f$var$GameBoyCore.prototype.generateGBCTileLineBank2 = function(address) {\n    var lineCopy = this.VRAM[0x1 | address] << 8 | this.VRAM[0x1FFE & address];\n    var tileBlock1 = this.tileCache[0x800 | address >> 4];\n    var tileBlock2 = this.tileCache[0xA00 | address >> 4];\n    var tileBlock3 = this.tileCache[0xC00 | address >> 4];\n    var tileBlock4 = this.tileCache[0xE00 | address >> 4];\n    address = (address & 0xE) << 2;\n    var addressFlipped = 0x38 - address;\n    tileBlock4[addressFlipped] = tileBlock2[address] = tileBlock3[addressFlipped | 7] = tileBlock1[address | 7] = (lineCopy & 0x100) >> 7 | lineCopy & 0x1;\n    tileBlock4[addressFlipped | 1] = tileBlock2[address | 1] = tileBlock3[addressFlipped | 6] = tileBlock1[address | 6] = (lineCopy & 0x200) >> 8 | (lineCopy & 0x2) >> 1;\n    tileBlock4[addressFlipped | 2] = tileBlock2[address | 2] = tileBlock3[addressFlipped | 5] = tileBlock1[address | 5] = (lineCopy & 0x400) >> 9 | (lineCopy & 0x4) >> 2;\n    tileBlock4[addressFlipped | 3] = tileBlock2[address | 3] = tileBlock3[addressFlipped | 4] = tileBlock1[address | 4] = (lineCopy & 0x800) >> 10 | (lineCopy & 0x8) >> 3;\n    tileBlock4[addressFlipped | 4] = tileBlock2[address | 4] = tileBlock3[addressFlipped | 3] = tileBlock1[address | 3] = (lineCopy & 0x1000) >> 11 | (lineCopy & 0x10) >> 4;\n    tileBlock4[addressFlipped | 5] = tileBlock2[address | 5] = tileBlock3[addressFlipped | 2] = tileBlock1[address | 2] = (lineCopy & 0x2000) >> 12 | (lineCopy & 0x20) >> 5;\n    tileBlock4[addressFlipped | 6] = tileBlock2[address | 6] = tileBlock3[addressFlipped | 1] = tileBlock1[address | 1] = (lineCopy & 0x4000) >> 13 | (lineCopy & 0x40) >> 6;\n    tileBlock4[addressFlipped | 7] = tileBlock2[address | 7] = tileBlock3[addressFlipped] = tileBlock1[address] = (lineCopy & 0x8000) >> 14 | (lineCopy & 0x80) >> 7;\n};\n//Generate all the flip combinations for a full GBC VRAM bank 2 tile:\n$6de83094d3815a3f$var$GameBoyCore.prototype.generateGBCTileBank2 = function(vramAddress) {\n    var address = vramAddress >> 4;\n    var tileBlock1 = this.tileCache[0x800 | address];\n    var tileBlock2 = this.tileCache[0xA00 | address];\n    var tileBlock3 = this.tileCache[0xC00 | address];\n    var tileBlock4 = this.tileCache[0xE00 | address];\n    var lineCopy = 0;\n    address = 0;\n    var addressFlipped = 56;\n    do {\n        lineCopy = this.VRAM[0x1 | vramAddress] << 8 | this.VRAM[vramAddress];\n        tileBlock4[addressFlipped] = tileBlock2[address] = tileBlock3[addressFlipped | 7] = tileBlock1[address | 7] = (lineCopy & 0x100) >> 7 | lineCopy & 0x1;\n        tileBlock4[addressFlipped | 1] = tileBlock2[address | 1] = tileBlock3[addressFlipped | 6] = tileBlock1[address | 6] = (lineCopy & 0x200) >> 8 | (lineCopy & 0x2) >> 1;\n        tileBlock4[addressFlipped | 2] = tileBlock2[address | 2] = tileBlock3[addressFlipped | 5] = tileBlock1[address | 5] = (lineCopy & 0x400) >> 9 | (lineCopy & 0x4) >> 2;\n        tileBlock4[addressFlipped | 3] = tileBlock2[address | 3] = tileBlock3[addressFlipped | 4] = tileBlock1[address | 4] = (lineCopy & 0x800) >> 10 | (lineCopy & 0x8) >> 3;\n        tileBlock4[addressFlipped | 4] = tileBlock2[address | 4] = tileBlock3[addressFlipped | 3] = tileBlock1[address | 3] = (lineCopy & 0x1000) >> 11 | (lineCopy & 0x10) >> 4;\n        tileBlock4[addressFlipped | 5] = tileBlock2[address | 5] = tileBlock3[addressFlipped | 2] = tileBlock1[address | 2] = (lineCopy & 0x2000) >> 12 | (lineCopy & 0x20) >> 5;\n        tileBlock4[addressFlipped | 6] = tileBlock2[address | 6] = tileBlock3[addressFlipped | 1] = tileBlock1[address | 1] = (lineCopy & 0x4000) >> 13 | (lineCopy & 0x40) >> 6;\n        tileBlock4[addressFlipped | 7] = tileBlock2[address | 7] = tileBlock3[addressFlipped] = tileBlock1[address] = (lineCopy & 0x8000) >> 14 | (lineCopy & 0x80) >> 7;\n        address += 8;\n        addressFlipped -= 8;\n        vramAddress += 2;\n    }while (addressFlipped > -1);\n};\n//Generate only a single tile line for the GB tile cache mode (OAM accessible range):\n$6de83094d3815a3f$var$GameBoyCore.prototype.generateGBOAMTileLine = function(address) {\n    var lineCopy = this.memory[0x1 | address] << 8 | this.memory[0x9FFE & address];\n    address &= 0x1FFE;\n    var tileBlock1 = this.tileCache[address >> 4];\n    var tileBlock2 = this.tileCache[0x200 | address >> 4];\n    var tileBlock3 = this.tileCache[0x400 | address >> 4];\n    var tileBlock4 = this.tileCache[0x600 | address >> 4];\n    address = (address & 0xE) << 2;\n    var addressFlipped = 0x38 - address;\n    tileBlock4[addressFlipped] = tileBlock2[address] = tileBlock3[addressFlipped | 7] = tileBlock1[address | 7] = (lineCopy & 0x100) >> 7 | lineCopy & 0x1;\n    tileBlock4[addressFlipped | 1] = tileBlock2[address | 1] = tileBlock3[addressFlipped | 6] = tileBlock1[address | 6] = (lineCopy & 0x200) >> 8 | (lineCopy & 0x2) >> 1;\n    tileBlock4[addressFlipped | 2] = tileBlock2[address | 2] = tileBlock3[addressFlipped | 5] = tileBlock1[address | 5] = (lineCopy & 0x400) >> 9 | (lineCopy & 0x4) >> 2;\n    tileBlock4[addressFlipped | 3] = tileBlock2[address | 3] = tileBlock3[addressFlipped | 4] = tileBlock1[address | 4] = (lineCopy & 0x800) >> 10 | (lineCopy & 0x8) >> 3;\n    tileBlock4[addressFlipped | 4] = tileBlock2[address | 4] = tileBlock3[addressFlipped | 3] = tileBlock1[address | 3] = (lineCopy & 0x1000) >> 11 | (lineCopy & 0x10) >> 4;\n    tileBlock4[addressFlipped | 5] = tileBlock2[address | 5] = tileBlock3[addressFlipped | 2] = tileBlock1[address | 2] = (lineCopy & 0x2000) >> 12 | (lineCopy & 0x20) >> 5;\n    tileBlock4[addressFlipped | 6] = tileBlock2[address | 6] = tileBlock3[addressFlipped | 1] = tileBlock1[address | 1] = (lineCopy & 0x4000) >> 13 | (lineCopy & 0x40) >> 6;\n    tileBlock4[addressFlipped | 7] = tileBlock2[address | 7] = tileBlock3[addressFlipped] = tileBlock1[address] = (lineCopy & 0x8000) >> 14 | (lineCopy & 0x80) >> 7;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.graphicsJIT = function() {\n    if (this.LCDisOn) {\n        this.totalLinesPassed = 0; //Mark frame for ensuring a JIT pass for the next framebuffer output.\n        this.graphicsJITScanlineGroup();\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.graphicsJITVBlank = function() {\n    //JIT the graphics to v-blank framing:\n    this.totalLinesPassed += this.queuedScanLines;\n    this.graphicsJITScanlineGroup();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.graphicsJITScanlineGroup = function() {\n    //Normal rendering JIT, where we try to do groups of scanlines at once:\n    while(this.queuedScanLines > 0){\n        this.renderScanLine(this.lastUnrenderedLine);\n        if (this.lastUnrenderedLine < 143) ++this.lastUnrenderedLine;\n        else this.lastUnrenderedLine = 0;\n        --this.queuedScanLines;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.incrementScanLineQueue = function() {\n    if (this.queuedScanLines < 144) ++this.queuedScanLines;\n    else {\n        this.currentX = 0;\n        this.midScanlineOffset = -1;\n        if (this.lastUnrenderedLine < 143) ++this.lastUnrenderedLine;\n        else this.lastUnrenderedLine = 0;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.midScanLineJIT = function() {\n    this.graphicsJIT();\n    this.renderMidScanLine();\n};\n//Check for the highest priority IRQ to fire:\n$6de83094d3815a3f$var$GameBoyCore.prototype.launchIRQ = function() {\n    var bitShift = 0;\n    var testbit = 1;\n    do {\n        //Check to see if an interrupt is enabled AND requested.\n        if ((testbit & this.IRQLineMatched) == testbit) {\n            this.IME = false; //Reset the interrupt enabling.\n            this.interruptsRequested -= testbit; //Reset the interrupt request.\n            this.IRQLineMatched = 0; //Reset the IRQ assertion.\n            //Interrupts have a certain clock cycle length:\n            this.CPUTicks = 20;\n            //Set the stack pointer to the current program counter value:\n            this.stackPointer = this.stackPointer - 1 & 0xFFFF;\n            this.memoryWriter[this.stackPointer](this, this.stackPointer, this.programCounter >> 8);\n            this.stackPointer = this.stackPointer - 1 & 0xFFFF;\n            this.memoryWriter[this.stackPointer](this, this.stackPointer, this.programCounter & 0xFF);\n            //Set the program counter to the interrupt's address:\n            this.programCounter = 0x40 | bitShift << 3;\n            //Clock the core for mid-instruction updates:\n            this.updateCore();\n            return; //We only want the highest priority interrupt.\n        }\n        testbit = 1 << ++bitShift;\n    }while (bitShift < 5);\n};\n/*\n    Check for IRQs to be fired while not in HALT:\n*/ $6de83094d3815a3f$var$GameBoyCore.prototype.checkIRQMatching = function() {\n    if (this.IME) this.IRQLineMatched = this.interruptsEnabled & this.interruptsRequested & 0x1F;\n};\n/*\n    Handle the HALT opcode by predicting all IRQ cases correctly,\n    then selecting the next closest IRQ firing from the prediction to\n    clock up to. This prevents hacky looping that doesn't predict, but\n    instead just clocks through the core update procedure by one which\n    is very slow. Not many emulators do this because they have to cover\n    all the IRQ prediction cases and they usually get them wrong.\n*/ $6de83094d3815a3f$var$GameBoyCore.prototype.calculateHALTPeriod = function() {\n    //Initialize our variables and start our prediction:\n    if (!this.halt) {\n        this.halt = true;\n        var currentClocks = -1;\n        var temp_var = 0;\n        if (this.LCDisOn) {\n            //If the LCD is enabled, then predict the LCD IRQs enabled:\n            if ((this.interruptsEnabled & 0x1) == 0x1) currentClocks = 456 * ((this.modeSTAT == 1 ? 298 : 144) - this.actualScanLine) - this.LCDTicks << this.doubleSpeedShifter;\n            if ((this.interruptsEnabled & 0x2) == 0x2) {\n                if (this.mode0TriggerSTAT) {\n                    temp_var = this.clocksUntilMode0() - this.LCDTicks << this.doubleSpeedShifter;\n                    if (temp_var <= currentClocks || currentClocks == -1) currentClocks = temp_var;\n                }\n                if (this.mode1TriggerSTAT && (this.interruptsEnabled & 0x1) == 0) {\n                    temp_var = 456 * ((this.modeSTAT == 1 ? 298 : 144) - this.actualScanLine) - this.LCDTicks << this.doubleSpeedShifter;\n                    if (temp_var <= currentClocks || currentClocks == -1) currentClocks = temp_var;\n                }\n                if (this.mode2TriggerSTAT) {\n                    temp_var = (this.actualScanLine >= 143 ? 456 * (154 - this.actualScanLine) : 456) - this.LCDTicks << this.doubleSpeedShifter;\n                    if (temp_var <= currentClocks || currentClocks == -1) currentClocks = temp_var;\n                }\n                if (this.LYCMatchTriggerSTAT && this.memory[0xFF45] <= 153) {\n                    temp_var = this.clocksUntilLYCMatch() - this.LCDTicks << this.doubleSpeedShifter;\n                    if (temp_var <= currentClocks || currentClocks == -1) currentClocks = temp_var;\n                }\n            }\n        }\n        if (this.TIMAEnabled && (this.interruptsEnabled & 0x4) == 0x4) {\n            //CPU timer IRQ prediction:\n            temp_var = (0x100 - this.memory[0xFF05]) * this.TACClocker - this.timerTicks;\n            if (temp_var <= currentClocks || currentClocks == -1) currentClocks = temp_var;\n        }\n        if (this.serialTimer > 0 && (this.interruptsEnabled & 0x8) == 0x8) //Serial IRQ prediction:\n        {\n            if (this.serialTimer <= currentClocks || currentClocks == -1) currentClocks = this.serialTimer;\n        }\n    } else var currentClocks = this.remainingClocks;\n    var maxClocks = this.CPUCyclesTotal - this.emulatorTicks << this.doubleSpeedShifter;\n    if (currentClocks >= 0) {\n        if (currentClocks <= maxClocks) {\n            //Exit out of HALT normally:\n            this.CPUTicks = Math.max(currentClocks, this.CPUTicks);\n            this.updateCoreFull();\n            this.halt = false;\n            this.CPUTicks = 0;\n        } else {\n            //Still in HALT, clock only up to the clocks specified per iteration:\n            this.CPUTicks = Math.max(maxClocks, this.CPUTicks);\n            this.remainingClocks = currentClocks - this.CPUTicks;\n        }\n    } else //Still in HALT, clock only up to the clocks specified per iteration:\n    //Will stay in HALT forever (Stuck in HALT forever), but the APU and LCD are still clocked, so don't pause:\n    this.CPUTicks += maxClocks;\n};\n//Memory Reading:\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryRead = function(address) {\n    //Act as a wrapper for reading the returns from the compiled jumps to memory.\n    return this.memoryReader[address](this, address); //This seems to be faster than the usual if/else.\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryHighRead = function(address) {\n    //Act as a wrapper for reading the returns from the compiled jumps to memory.\n    return this.memoryHighReader[address](this, address); //This seems to be faster than the usual if/else.\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryReadJumpCompile = function() {\n    //Faster in some browsers, since we are doing less conditionals overall by implementing them in advance.\n    for(var index = 0x0000; index <= 0xFFFF; index++){\n        if (index < 0x4000) this.memoryReader[index] = this.memoryReadNormal;\n        else if (index < 0x8000) this.memoryReader[index] = this.memoryReadROM;\n        else if (index < 0x9800) this.memoryReader[index] = this.cGBC ? this.VRAMDATAReadCGBCPU : this.VRAMDATAReadDMGCPU;\n        else if (index < 0xA000) this.memoryReader[index] = this.cGBC ? this.VRAMCHRReadCGBCPU : this.VRAMCHRReadDMGCPU;\n        else if (index >= 0xA000 && index < 0xC000) {\n            if (this.numRAMBanks == 1 / 16 && index < 0xA200 || this.numRAMBanks >= 1) {\n                if (this.cMBC7) this.memoryReader[index] = this.memoryReadMBC7;\n                else if (!this.cMBC3) this.memoryReader[index] = this.memoryReadMBC;\n                else //MBC3 RTC + RAM:\n                this.memoryReader[index] = this.memoryReadMBC3;\n            } else this.memoryReader[index] = this.memoryReadBAD;\n        } else if (index >= 0xC000 && index < 0xE000) {\n            if (!this.cGBC || index < 0xD000) this.memoryReader[index] = this.memoryReadNormal;\n            else this.memoryReader[index] = this.memoryReadGBCMemory;\n        } else if (index >= 0xE000 && index < 0xFE00) {\n            if (!this.cGBC || index < 0xF000) this.memoryReader[index] = this.memoryReadECHONormal;\n            else this.memoryReader[index] = this.memoryReadECHOGBCMemory;\n        } else if (index < 0xFEA0) this.memoryReader[index] = this.memoryReadOAM;\n        else if (this.cGBC && index >= 0xFEA0 && index < 0xFF00) this.memoryReader[index] = this.memoryReadNormal;\n        else if (index >= 0xFF00) switch(index){\n            case 0xFF00:\n                //JOYPAD:\n                this.memoryHighReader[0] = this.memoryReader[0xFF00] = function(parentObj, address) {\n                    return 0xC0 | parentObj.memory[0xFF00]; //Top nibble returns as set.\n                };\n                break;\n            case 0xFF01:\n                //SB\n                this.memoryHighReader[0x01] = this.memoryReader[0xFF01] = function(parentObj, address) {\n                    return parentObj.memory[0xFF02] < 0x80 ? parentObj.memory[0xFF01] : 0xFF;\n                };\n                break;\n            case 0xFF02:\n                //SC\n                if (this.cGBC) this.memoryHighReader[0x02] = this.memoryReader[0xFF02] = function(parentObj, address) {\n                    return (parentObj.serialTimer <= 0 ? 0x7C : 0xFC) | parentObj.memory[0xFF02];\n                };\n                else this.memoryHighReader[0x02] = this.memoryReader[0xFF02] = function(parentObj, address) {\n                    return (parentObj.serialTimer <= 0 ? 0x7E : 0xFE) | parentObj.memory[0xFF02];\n                };\n                break;\n            case 0xFF03:\n                this.memoryHighReader[0x03] = this.memoryReader[0xFF03] = this.memoryReadBAD;\n                break;\n            case 0xFF04:\n                //DIV\n                this.memoryHighReader[0x04] = this.memoryReader[0xFF04] = function(parentObj, address) {\n                    parentObj.memory[0xFF04] = parentObj.memory[0xFF04] + (parentObj.DIVTicks >> 8) & 0xFF;\n                    parentObj.DIVTicks &= 0xFF;\n                    return parentObj.memory[0xFF04];\n                };\n                break;\n            case 0xFF05:\n            case 0xFF06:\n                this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;\n                this.memoryReader[index] = this.memoryReadNormal;\n                break;\n            case 0xFF07:\n                this.memoryHighReader[0x07] = this.memoryReader[0xFF07] = function(parentObj, address) {\n                    return 0xF8 | parentObj.memory[0xFF07];\n                };\n                break;\n            case 0xFF08:\n            case 0xFF09:\n            case 0xFF0A:\n            case 0xFF0B:\n            case 0xFF0C:\n            case 0xFF0D:\n            case 0xFF0E:\n                this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;\n                break;\n            case 0xFF0F:\n                //IF\n                this.memoryHighReader[0x0F] = this.memoryReader[0xFF0F] = function(parentObj, address) {\n                    return 0xE0 | parentObj.interruptsRequested;\n                };\n                break;\n            case 0xFF10:\n                this.memoryHighReader[0x10] = this.memoryReader[0xFF10] = function(parentObj, address) {\n                    return 0x80 | parentObj.memory[0xFF10];\n                };\n                break;\n            case 0xFF11:\n                this.memoryHighReader[0x11] = this.memoryReader[0xFF11] = function(parentObj, address) {\n                    return 0x3F | parentObj.memory[0xFF11];\n                };\n                break;\n            case 0xFF12:\n                this.memoryHighReader[0x12] = this.memoryHighReadNormal;\n                this.memoryReader[0xFF12] = this.memoryReadNormal;\n                break;\n            case 0xFF13:\n                this.memoryHighReader[0x13] = this.memoryReader[0xFF13] = this.memoryReadBAD;\n                break;\n            case 0xFF14:\n                this.memoryHighReader[0x14] = this.memoryReader[0xFF14] = function(parentObj, address) {\n                    return 0xBF | parentObj.memory[0xFF14];\n                };\n                break;\n            case 0xFF15:\n                this.memoryHighReader[0x15] = this.memoryReadBAD;\n                this.memoryReader[0xFF15] = this.memoryReadBAD;\n                break;\n            case 0xFF16:\n                this.memoryHighReader[0x16] = this.memoryReader[0xFF16] = function(parentObj, address) {\n                    return 0x3F | parentObj.memory[0xFF16];\n                };\n                break;\n            case 0xFF17:\n                this.memoryHighReader[0x17] = this.memoryHighReadNormal;\n                this.memoryReader[0xFF17] = this.memoryReadNormal;\n                break;\n            case 0xFF18:\n                this.memoryHighReader[0x18] = this.memoryReader[0xFF18] = this.memoryReadBAD;\n                break;\n            case 0xFF19:\n                this.memoryHighReader[0x19] = this.memoryReader[0xFF19] = function(parentObj, address) {\n                    return 0xBF | parentObj.memory[0xFF19];\n                };\n                break;\n            case 0xFF1A:\n                this.memoryHighReader[0x1A] = this.memoryReader[0xFF1A] = function(parentObj, address) {\n                    return 0x7F | parentObj.memory[0xFF1A];\n                };\n                break;\n            case 0xFF1B:\n                this.memoryHighReader[0x1B] = this.memoryReader[0xFF1B] = this.memoryReadBAD;\n                break;\n            case 0xFF1C:\n                this.memoryHighReader[0x1C] = this.memoryReader[0xFF1C] = function(parentObj, address) {\n                    return 0x9F | parentObj.memory[0xFF1C];\n                };\n                break;\n            case 0xFF1D:\n                this.memoryHighReader[0x1D] = this.memoryReader[0xFF1D] = this.memoryReadBAD;\n                break;\n            case 0xFF1E:\n                this.memoryHighReader[0x1E] = this.memoryReader[0xFF1E] = function(parentObj, address) {\n                    return 0xBF | parentObj.memory[0xFF1E];\n                };\n                break;\n            case 0xFF1F:\n            case 0xFF20:\n                this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;\n                break;\n            case 0xFF21:\n            case 0xFF22:\n                this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;\n                this.memoryReader[index] = this.memoryReadNormal;\n                break;\n            case 0xFF23:\n                this.memoryHighReader[0x23] = this.memoryReader[0xFF23] = function(parentObj, address) {\n                    return 0xBF | parentObj.memory[0xFF23];\n                };\n                break;\n            case 0xFF24:\n            case 0xFF25:\n                this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;\n                this.memoryReader[index] = this.memoryReadNormal;\n                break;\n            case 0xFF26:\n                this.memoryHighReader[0x26] = this.memoryReader[0xFF26] = function(parentObj, address) {\n                    parentObj.audioJIT();\n                    return 0x70 | parentObj.memory[0xFF26];\n                };\n                break;\n            case 0xFF27:\n            case 0xFF28:\n            case 0xFF29:\n            case 0xFF2A:\n            case 0xFF2B:\n            case 0xFF2C:\n            case 0xFF2D:\n            case 0xFF2E:\n            case 0xFF2F:\n                this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;\n                break;\n            case 0xFF30:\n            case 0xFF31:\n            case 0xFF32:\n            case 0xFF33:\n            case 0xFF34:\n            case 0xFF35:\n            case 0xFF36:\n            case 0xFF37:\n            case 0xFF38:\n            case 0xFF39:\n            case 0xFF3A:\n            case 0xFF3B:\n            case 0xFF3C:\n            case 0xFF3D:\n            case 0xFF3E:\n            case 0xFF3F:\n                this.memoryReader[index] = function(parentObj, address) {\n                    return parentObj.channel3canPlay ? parentObj.memory[0xFF00 | parentObj.channel3lastSampleLookup >> 1] : parentObj.memory[address];\n                };\n                this.memoryHighReader[index & 0xFF] = function(parentObj, address) {\n                    return parentObj.channel3canPlay ? parentObj.memory[0xFF00 | parentObj.channel3lastSampleLookup >> 1] : parentObj.memory[0xFF00 | address];\n                };\n                break;\n            case 0xFF40:\n                this.memoryHighReader[0x40] = this.memoryHighReadNormal;\n                this.memoryReader[0xFF40] = this.memoryReadNormal;\n                break;\n            case 0xFF41:\n                this.memoryHighReader[0x41] = this.memoryReader[0xFF41] = function(parentObj, address) {\n                    return 0x80 | parentObj.memory[0xFF41] | parentObj.modeSTAT;\n                };\n                break;\n            case 0xFF42:\n                this.memoryHighReader[0x42] = this.memoryReader[0xFF42] = function(parentObj, address) {\n                    return parentObj.backgroundY;\n                };\n                break;\n            case 0xFF43:\n                this.memoryHighReader[0x43] = this.memoryReader[0xFF43] = function(parentObj, address) {\n                    return parentObj.backgroundX;\n                };\n                break;\n            case 0xFF44:\n                this.memoryHighReader[0x44] = this.memoryReader[0xFF44] = function(parentObj, address) {\n                    return parentObj.LCDisOn ? parentObj.memory[0xFF44] : 0;\n                };\n                break;\n            case 0xFF45:\n            case 0xFF46:\n            case 0xFF47:\n            case 0xFF48:\n            case 0xFF49:\n                this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;\n                this.memoryReader[index] = this.memoryReadNormal;\n                break;\n            case 0xFF4A:\n                //WY\n                this.memoryHighReader[0x4A] = this.memoryReader[0xFF4A] = function(parentObj, address) {\n                    return parentObj.windowY;\n                };\n                break;\n            case 0xFF4B:\n                this.memoryHighReader[0x4B] = this.memoryHighReadNormal;\n                this.memoryReader[0xFF4B] = this.memoryReadNormal;\n                break;\n            case 0xFF4C:\n                this.memoryHighReader[0x4C] = this.memoryReader[0xFF4C] = this.memoryReadBAD;\n                break;\n            case 0xFF4D:\n                this.memoryHighReader[0x4D] = this.memoryHighReadNormal;\n                this.memoryReader[0xFF4D] = this.memoryReadNormal;\n                break;\n            case 0xFF4E:\n                this.memoryHighReader[0x4E] = this.memoryReader[0xFF4E] = this.memoryReadBAD;\n                break;\n            case 0xFF4F:\n                this.memoryHighReader[0x4F] = this.memoryReader[0xFF4F] = function(parentObj, address) {\n                    return parentObj.currVRAMBank;\n                };\n                break;\n            case 0xFF50:\n            case 0xFF51:\n            case 0xFF52:\n            case 0xFF53:\n            case 0xFF54:\n                this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;\n                this.memoryReader[index] = this.memoryReadNormal;\n                break;\n            case 0xFF55:\n                if (this.cGBC) this.memoryHighReader[0x55] = this.memoryReader[0xFF55] = function(parentObj, address) {\n                    if (!parentObj.LCDisOn && parentObj.hdmaRunning) {\n                        //DMA\n                        parentObj.DMAWrite((parentObj.memory[0xFF55] & 0x7F) + 1);\n                        parentObj.memory[0xFF55] = 0xFF; //Transfer completed.\n                        parentObj.hdmaRunning = false;\n                    }\n                    return parentObj.memory[0xFF55];\n                };\n                else {\n                    this.memoryReader[0xFF55] = this.memoryReadNormal;\n                    this.memoryHighReader[0x55] = this.memoryHighReadNormal;\n                }\n                break;\n            case 0xFF56:\n                if (this.cGBC) this.memoryHighReader[0x56] = this.memoryReader[0xFF56] = function(parentObj, address) {\n                    //Return IR \"not connected\" status:\n                    return 0x3C | (parentObj.memory[0xFF56] >= 0xC0 ? 0x2 | parentObj.memory[0xFF56] & 0xC1 : parentObj.memory[0xFF56] & 0xC3);\n                };\n                else {\n                    this.memoryReader[0xFF56] = this.memoryReadNormal;\n                    this.memoryHighReader[0x56] = this.memoryHighReadNormal;\n                }\n                break;\n            case 0xFF57:\n            case 0xFF58:\n            case 0xFF59:\n            case 0xFF5A:\n            case 0xFF5B:\n            case 0xFF5C:\n            case 0xFF5D:\n            case 0xFF5E:\n            case 0xFF5F:\n            case 0xFF60:\n            case 0xFF61:\n            case 0xFF62:\n            case 0xFF63:\n            case 0xFF64:\n            case 0xFF65:\n            case 0xFF66:\n            case 0xFF67:\n                this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;\n                break;\n            case 0xFF68:\n            case 0xFF69:\n            case 0xFF6A:\n            case 0xFF6B:\n                this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;\n                this.memoryReader[index] = this.memoryReadNormal;\n                break;\n            case 0xFF6C:\n                if (this.cGBC) this.memoryHighReader[0x6C] = this.memoryReader[0xFF6C] = function(parentObj, address) {\n                    return 0xFE | parentObj.memory[0xFF6C];\n                };\n                else this.memoryHighReader[0x6C] = this.memoryReader[0xFF6C] = this.memoryReadBAD;\n                break;\n            case 0xFF6D:\n            case 0xFF6E:\n            case 0xFF6F:\n                this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;\n                break;\n            case 0xFF70:\n                if (this.cGBC) //SVBK\n                this.memoryHighReader[0x70] = this.memoryReader[0xFF70] = function(parentObj, address) {\n                    return 0x40 | parentObj.memory[0xFF70];\n                };\n                else this.memoryHighReader[0x70] = this.memoryReader[0xFF70] = this.memoryReadBAD;\n                break;\n            case 0xFF71:\n                this.memoryHighReader[0x71] = this.memoryReader[0xFF71] = this.memoryReadBAD;\n                break;\n            case 0xFF72:\n            case 0xFF73:\n                this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadNormal;\n                break;\n            case 0xFF74:\n                if (this.cGBC) this.memoryHighReader[0x74] = this.memoryReader[0xFF74] = this.memoryReadNormal;\n                else this.memoryHighReader[0x74] = this.memoryReader[0xFF74] = this.memoryReadBAD;\n                break;\n            case 0xFF75:\n                this.memoryHighReader[0x75] = this.memoryReader[0xFF75] = function(parentObj, address) {\n                    return 0x8F | parentObj.memory[0xFF75];\n                };\n                break;\n            case 0xFF76:\n            case 0xFF77:\n                this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = function(parentObj, address) {\n                    return 0;\n                };\n                break;\n            case 0xFF78:\n            case 0xFF79:\n            case 0xFF7A:\n            case 0xFF7B:\n            case 0xFF7C:\n            case 0xFF7D:\n            case 0xFF7E:\n            case 0xFF7F:\n                this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;\n                break;\n            case 0xFFFF:\n                //IE\n                this.memoryHighReader[0xFF] = this.memoryReader[0xFFFF] = function(parentObj, address) {\n                    return parentObj.interruptsEnabled;\n                };\n                break;\n            default:\n                this.memoryReader[index] = this.memoryReadNormal;\n                this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;\n        }\n        else this.memoryReader[index] = this.memoryReadBAD;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryReadNormal = function(parentObj, address) {\n    return parentObj.memory[address];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryHighReadNormal = function(parentObj, address) {\n    return parentObj.memory[0xFF00 | address];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryReadROM = function(parentObj, address) {\n    return parentObj.ROM[parentObj.currentROMBank + address];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryReadMBC = function(parentObj, address) {\n    //Switchable RAM\n    if (parentObj.MBCRAMBanksEnabled || $2a65eeefd956ad48$exports[10]) return parentObj.MBCRam[address + parentObj.currMBCRAMBankPosition];\n    //cout(\"Reading from disabled RAM.\", 1);\n    return 0xFF;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryReadMBC7 = function(parentObj, address) {\n    //Switchable RAM\n    if (parentObj.MBCRAMBanksEnabled || $2a65eeefd956ad48$exports[10]) switch(address){\n        case 0xA000:\n        case 0xA060:\n        case 0xA070:\n            return 0;\n        case 0xA080:\n            //TODO: Gyro Control Register\n            return 0;\n        case 0xA050:\n            //Y High Byte\n            return parentObj.highY;\n        case 0xA040:\n            //Y Low Byte\n            return parentObj.lowY;\n        case 0xA030:\n            //X High Byte\n            return parentObj.highX;\n        case 0xA020:\n            //X Low Byte:\n            return parentObj.lowX;\n        default:\n            return parentObj.MBCRam[address + parentObj.currMBCRAMBankPosition];\n    }\n    //cout(\"Reading from disabled RAM.\", 1);\n    return 0xFF;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryReadMBC3 = function(parentObj, address) {\n    //Switchable RAM\n    if (parentObj.MBCRAMBanksEnabled || $2a65eeefd956ad48$exports[10]) switch(parentObj.currMBCRAMBank){\n        case 0x00:\n        case 0x01:\n        case 0x02:\n        case 0x03:\n            return parentObj.MBCRam[address + parentObj.currMBCRAMBankPosition];\n        case 0x08:\n            return parentObj.latchedSeconds;\n        case 0x09:\n            return parentObj.latchedMinutes;\n        case 0x0A:\n            return parentObj.latchedHours;\n        case 0x0B:\n            return parentObj.latchedLDays;\n        case 0x0C:\n            return (parentObj.RTCDayOverFlow ? 0x80 : 0) + (parentObj.RTCHALT ? 0x40 : 0) + parentObj.latchedHDays;\n    }\n    //cout(\"Reading from invalid or disabled RAM.\", 1);\n    return 0xFF;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryReadGBCMemory = function(parentObj, address) {\n    return parentObj.GBCMemory[address + parentObj.gbcRamBankPosition];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryReadOAM = function(parentObj, address) {\n    return parentObj.modeSTAT > 1 ? 0xFF : parentObj.memory[address];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryReadECHOGBCMemory = function(parentObj, address) {\n    return parentObj.GBCMemory[address + parentObj.gbcRamBankPositionECHO];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryReadECHONormal = function(parentObj, address) {\n    return parentObj.memory[address - 0x2000];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryReadBAD = function(parentObj, address) {\n    return 0xFF;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.VRAMDATAReadCGBCPU = function(parentObj, address) {\n    //CPU Side Reading The VRAM (Optimized for GameBoy Color)\n    return parentObj.modeSTAT > 2 ? 0xFF : parentObj.currVRAMBank == 0 ? parentObj.memory[address] : parentObj.VRAM[address & 0x1FFF];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.VRAMDATAReadDMGCPU = function(parentObj, address) {\n    //CPU Side Reading The VRAM (Optimized for classic GameBoy)\n    return parentObj.modeSTAT > 2 ? 0xFF : parentObj.memory[address];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.VRAMCHRReadCGBCPU = function(parentObj, address) {\n    //CPU Side Reading the Character Data Map:\n    return parentObj.modeSTAT > 2 ? 0xFF : parentObj.BGCHRCurrentBank[address & 0x7FF];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.VRAMCHRReadDMGCPU = function(parentObj, address) {\n    //CPU Side Reading the Character Data Map:\n    return parentObj.modeSTAT > 2 ? 0xFF : parentObj.BGCHRBank1[address & 0x7FF];\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.setCurrentMBC1ROMBank = function() {\n    //Read the cartridge ROM data from RAM memory:\n    switch(this.ROMBank1offs){\n        case 0x00:\n        case 0x20:\n        case 0x40:\n        case 0x60:\n            //Bank calls for 0x00, 0x20, 0x40, and 0x60 are really for 0x01, 0x21, 0x41, and 0x61.\n            this.currentROMBank = this.ROMBank1offs % this.ROMBankEdge << 14;\n            break;\n        default:\n            this.currentROMBank = this.ROMBank1offs % this.ROMBankEdge - 1 << 14;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.setCurrentMBC2AND3ROMBank = function() {\n    //Read the cartridge ROM data from RAM memory:\n    //Only map bank 0 to bank 1 here (MBC2 is like MBC1, but can only do 16 banks, so only the bank 0 quirk appears for MBC2):\n    this.currentROMBank = Math.max(this.ROMBank1offs % this.ROMBankEdge - 1, 0) << 14;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.setCurrentMBC5ROMBank = function() {\n    //Read the cartridge ROM data from RAM memory:\n    this.currentROMBank = this.ROMBank1offs % this.ROMBankEdge - 1 << 14;\n};\n//Memory Writing:\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryWrite = function(address, data) {\n    //Act as a wrapper for writing by compiled jumps to specific memory writing functions.\n    this.memoryWriter[address](this, address, data);\n};\n//0xFFXX fast path:\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryHighWrite = function(address, data) {\n    //Act as a wrapper for writing by compiled jumps to specific memory writing functions.\n    this.memoryHighWriter[address](this, address, data);\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryWriteJumpCompile = function() {\n    //Faster in some browsers, since we are doing less conditionals overall by implementing them in advance.\n    for(var index = 0x0000; index <= 0xFFFF; index++){\n        if (index < 0x8000) {\n            if (this.cMBC1) {\n                if (index < 0x2000) this.memoryWriter[index] = this.MBCWriteEnable;\n                else if (index < 0x4000) this.memoryWriter[index] = this.MBC1WriteROMBank;\n                else if (index < 0x6000) this.memoryWriter[index] = this.MBC1WriteRAMBank;\n                else this.memoryWriter[index] = this.MBC1WriteType;\n            } else if (this.cMBC2) {\n                if (index < 0x1000) this.memoryWriter[index] = this.MBCWriteEnable;\n                else if (index >= 0x2100 && index < 0x2200) this.memoryWriter[index] = this.MBC2WriteROMBank;\n                else this.memoryWriter[index] = this.cartIgnoreWrite;\n            } else if (this.cMBC3) {\n                if (index < 0x2000) this.memoryWriter[index] = this.MBCWriteEnable;\n                else if (index < 0x4000) this.memoryWriter[index] = this.MBC3WriteROMBank;\n                else if (index < 0x6000) this.memoryWriter[index] = this.MBC3WriteRAMBank;\n                else this.memoryWriter[index] = this.MBC3WriteRTCLatch;\n            } else if (this.cMBC5 || this.cRUMBLE || this.cMBC7) {\n                if (index < 0x2000) this.memoryWriter[index] = this.MBCWriteEnable;\n                else if (index < 0x3000) this.memoryWriter[index] = this.MBC5WriteROMBankLow;\n                else if (index < 0x4000) this.memoryWriter[index] = this.MBC5WriteROMBankHigh;\n                else if (index < 0x6000) this.memoryWriter[index] = this.cRUMBLE ? this.RUMBLEWriteRAMBank : this.MBC5WriteRAMBank;\n                else this.memoryWriter[index] = this.cartIgnoreWrite;\n            } else if (this.cHuC3) {\n                if (index < 0x2000) this.memoryWriter[index] = this.MBCWriteEnable;\n                else if (index < 0x4000) this.memoryWriter[index] = this.MBC3WriteROMBank;\n                else if (index < 0x6000) this.memoryWriter[index] = this.HuC3WriteRAMBank;\n                else this.memoryWriter[index] = this.cartIgnoreWrite;\n            } else this.memoryWriter[index] = this.cartIgnoreWrite;\n        } else if (index < 0x9000) this.memoryWriter[index] = this.cGBC ? this.VRAMGBCDATAWrite : this.VRAMGBDATAWrite;\n        else if (index < 0x9800) this.memoryWriter[index] = this.cGBC ? this.VRAMGBCDATAWrite : this.VRAMGBDATAUpperWrite;\n        else if (index < 0xA000) this.memoryWriter[index] = this.cGBC ? this.VRAMGBCCHRMAPWrite : this.VRAMGBCHRMAPWrite;\n        else if (index < 0xC000) {\n            if (this.numRAMBanks == 1 / 16 && index < 0xA200 || this.numRAMBanks >= 1) {\n                if (!this.cMBC3) this.memoryWriter[index] = this.memoryWriteMBCRAM;\n                else //MBC3 RTC + RAM:\n                this.memoryWriter[index] = this.memoryWriteMBC3RAM;\n            } else this.memoryWriter[index] = this.cartIgnoreWrite;\n        } else if (index < 0xE000) {\n            if (this.cGBC && index >= 0xD000) this.memoryWriter[index] = this.memoryWriteGBCRAM;\n            else this.memoryWriter[index] = this.memoryWriteNormal;\n        } else if (index < 0xFE00) {\n            if (this.cGBC && index >= 0xF000) this.memoryWriter[index] = this.memoryWriteECHOGBCRAM;\n            else this.memoryWriter[index] = this.memoryWriteECHONormal;\n        } else if (index <= 0xFEA0) this.memoryWriter[index] = this.memoryWriteOAMRAM;\n        else if (index < 0xFF00) {\n            if (this.cGBC) this.memoryWriter[index] = this.memoryWriteNormal;\n            else this.memoryWriter[index] = this.cartIgnoreWrite;\n        } else {\n            //Start the I/O initialization by filling in the slots as normal memory:\n            this.memoryWriter[index] = this.memoryWriteNormal;\n            this.memoryHighWriter[index & 0xFF] = this.memoryHighWriteNormal;\n        }\n    }\n    this.registerWriteJumpCompile(); //Compile the I/O write functions separately...\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.MBCWriteEnable = function(parentObj, address, data) {\n    //MBC RAM Bank Enable/Disable:\n    parentObj.MBCRAMBanksEnabled = (data & 0x0F) == 0x0A; //If lower nibble is 0x0A, then enable, otherwise disable.\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.MBC1WriteROMBank = function(parentObj, address, data) {\n    //MBC1 ROM bank switching:\n    parentObj.ROMBank1offs = parentObj.ROMBank1offs & 0x60 | data & 0x1F;\n    parentObj.setCurrentMBC1ROMBank();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.MBC1WriteRAMBank = function(parentObj, address, data) {\n    //MBC1 RAM bank switching\n    if (parentObj.MBC1Mode) {\n        //4/32 Mode\n        parentObj.currMBCRAMBank = data & 0x03;\n        parentObj.currMBCRAMBankPosition = (parentObj.currMBCRAMBank << 13) - 0xA000;\n    } else {\n        //16/8 Mode\n        parentObj.ROMBank1offs = (data & 0x03) << 5 | parentObj.ROMBank1offs & 0x1F;\n        parentObj.setCurrentMBC1ROMBank();\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.MBC1WriteType = function(parentObj, address, data) {\n    //MBC1 mode setting:\n    parentObj.MBC1Mode = (data & 0x1) == 0x1;\n    if (parentObj.MBC1Mode) {\n        parentObj.ROMBank1offs &= 0x1F;\n        parentObj.setCurrentMBC1ROMBank();\n    } else {\n        parentObj.currMBCRAMBank = 0;\n        parentObj.currMBCRAMBankPosition = -40960;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.MBC2WriteROMBank = function(parentObj, address, data) {\n    //MBC2 ROM bank switching:\n    parentObj.ROMBank1offs = data & 0x0F;\n    parentObj.setCurrentMBC2AND3ROMBank();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.MBC3WriteROMBank = function(parentObj, address, data) {\n    //MBC3 ROM bank switching:\n    parentObj.ROMBank1offs = data & 0x7F;\n    parentObj.setCurrentMBC2AND3ROMBank();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.MBC3WriteRAMBank = function(parentObj, address, data) {\n    parentObj.currMBCRAMBank = data;\n    if (data < 4) //MBC3 RAM bank switching\n    parentObj.currMBCRAMBankPosition = (parentObj.currMBCRAMBank << 13) - 0xA000;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.MBC3WriteRTCLatch = function(parentObj, address, data) {\n    if (data == 0) parentObj.RTCisLatched = false;\n    else if (!parentObj.RTCisLatched) {\n        //Copy over the current RTC time for reading.\n        parentObj.RTCisLatched = true;\n        parentObj.latchedSeconds = parentObj.RTCSeconds | 0;\n        parentObj.latchedMinutes = parentObj.RTCMinutes;\n        parentObj.latchedHours = parentObj.RTCHours;\n        parentObj.latchedLDays = parentObj.RTCDays & 0xFF;\n        parentObj.latchedHDays = parentObj.RTCDays >> 8;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.MBC5WriteROMBankLow = function(parentObj, address, data) {\n    //MBC5 ROM bank switching:\n    parentObj.ROMBank1offs = parentObj.ROMBank1offs & 0x100 | data;\n    parentObj.setCurrentMBC5ROMBank();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.MBC5WriteROMBankHigh = function(parentObj, address, data) {\n    //MBC5 ROM bank switching (by least significant bit):\n    parentObj.ROMBank1offs = (data & 0x01) << 8 | parentObj.ROMBank1offs & 0xFF;\n    parentObj.setCurrentMBC5ROMBank();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.MBC5WriteRAMBank = function(parentObj, address, data) {\n    //MBC5 RAM bank switching\n    parentObj.currMBCRAMBank = data & 0xF;\n    parentObj.currMBCRAMBankPosition = (parentObj.currMBCRAMBank << 13) - 0xA000;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.RUMBLEWriteRAMBank = function(parentObj, address, data) {\n    //MBC5 RAM bank switching\n    //Like MBC5, but bit 3 of the lower nibble is used for rumbling and bit 2 is ignored.\n    parentObj.currMBCRAMBank = data & 0x03;\n    parentObj.currMBCRAMBankPosition = (parentObj.currMBCRAMBank << 13) - 0xA000;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.HuC3WriteRAMBank = function(parentObj, address, data) {\n    //HuC3 RAM bank switching\n    parentObj.currMBCRAMBank = data & 0x03;\n    parentObj.currMBCRAMBankPosition = (parentObj.currMBCRAMBank << 13) - 0xA000;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.cartIgnoreWrite = function(parentObj, address, data) {\n//We might have encountered illegal RAM writing or such, so just do nothing...\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryWriteNormal = function(parentObj, address, data) {\n    parentObj.memory[address] = data;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryHighWriteNormal = function(parentObj, address, data) {\n    parentObj.memory[0xFF00 | address] = data;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryWriteMBCRAM = function(parentObj, address, data) {\n    if (parentObj.MBCRAMBanksEnabled || $2a65eeefd956ad48$exports[10]) parentObj.MBCRam[address + parentObj.currMBCRAMBankPosition] = data;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryWriteMBC3RAM = function(parentObj, address, data) {\n    if (parentObj.MBCRAMBanksEnabled || $2a65eeefd956ad48$exports[10]) switch(parentObj.currMBCRAMBank){\n        case 0x00:\n        case 0x01:\n        case 0x02:\n        case 0x03:\n            parentObj.MBCRam[address + parentObj.currMBCRAMBankPosition] = data;\n            break;\n        case 0x08:\n            if (data < 60) parentObj.RTCSeconds = data;\n            else $6de83094d3815a3f$var$cout(\"(Bank #\" + parentObj.currMBCRAMBank + \") RTC write out of range: \" + data, 1);\n            break;\n        case 0x09:\n            if (data < 60) parentObj.RTCMinutes = data;\n            else $6de83094d3815a3f$var$cout(\"(Bank #\" + parentObj.currMBCRAMBank + \") RTC write out of range: \" + data, 1);\n            break;\n        case 0x0A:\n            if (data < 24) parentObj.RTCHours = data;\n            else $6de83094d3815a3f$var$cout(\"(Bank #\" + parentObj.currMBCRAMBank + \") RTC write out of range: \" + data, 1);\n            break;\n        case 0x0B:\n            parentObj.RTCDays = data & 0xFF | parentObj.RTCDays & 0x100;\n            break;\n        case 0x0C:\n            parentObj.RTCDayOverFlow = data > 0x7F;\n            parentObj.RTCHalt = (data & 0x40) == 0x40;\n            parentObj.RTCDays = (data & 0x1) << 8 | parentObj.RTCDays & 0xFF;\n            break;\n        default:\n            $6de83094d3815a3f$var$cout(\"Invalid MBC3 bank address selected: \" + parentObj.currMBCRAMBank, 0);\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryWriteGBCRAM = function(parentObj, address, data) {\n    parentObj.GBCMemory[address + parentObj.gbcRamBankPosition] = data;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryWriteOAMRAM = function(parentObj, address, data) {\n    if (parentObj.modeSTAT < 2) {\n        if (parentObj.memory[address] != data) {\n            parentObj.graphicsJIT();\n            parentObj.memory[address] = data;\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryWriteECHOGBCRAM = function(parentObj, address, data) {\n    parentObj.GBCMemory[address + parentObj.gbcRamBankPositionECHO] = data;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.memoryWriteECHONormal = function(parentObj, address, data) {\n    parentObj.memory[address - 0x2000] = data;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.VRAMGBDATAWrite = function(parentObj, address, data) {\n    if (parentObj.modeSTAT < 3) {\n        if (parentObj.memory[address] != data) {\n            //JIT the graphics render queue:\n            parentObj.graphicsJIT();\n            parentObj.memory[address] = data;\n            parentObj.generateGBOAMTileLine(address);\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.VRAMGBDATAUpperWrite = function(parentObj, address, data) {\n    if (parentObj.modeSTAT < 3) {\n        if (parentObj.memory[address] != data) {\n            //JIT the graphics render queue:\n            parentObj.graphicsJIT();\n            parentObj.memory[address] = data;\n            parentObj.generateGBTileLine(address);\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.VRAMGBCDATAWrite = function(parentObj, address, data) {\n    if (parentObj.modeSTAT < 3) {\n        if (parentObj.currVRAMBank == 0) {\n            if (parentObj.memory[address] != data) {\n                //JIT the graphics render queue:\n                parentObj.graphicsJIT();\n                parentObj.memory[address] = data;\n                parentObj.generateGBCTileLineBank1(address);\n            }\n        } else {\n            address &= 0x1FFF;\n            if (parentObj.VRAM[address] != data) {\n                //JIT the graphics render queue:\n                parentObj.graphicsJIT();\n                parentObj.VRAM[address] = data;\n                parentObj.generateGBCTileLineBank2(address);\n            }\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.VRAMGBCHRMAPWrite = function(parentObj, address, data) {\n    if (parentObj.modeSTAT < 3) {\n        address &= 0x7FF;\n        if (parentObj.BGCHRBank1[address] != data) {\n            //JIT the graphics render queue:\n            parentObj.graphicsJIT();\n            parentObj.BGCHRBank1[address] = data;\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.VRAMGBCCHRMAPWrite = function(parentObj, address, data) {\n    if (parentObj.modeSTAT < 3) {\n        address &= 0x7FF;\n        if (parentObj.BGCHRCurrentBank[address] != data) {\n            //JIT the graphics render queue:\n            parentObj.graphicsJIT();\n            parentObj.BGCHRCurrentBank[address] = data;\n        }\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.DMAWrite = function(tilesToTransfer) {\n    if (!this.halt) //Clock the CPU for the DMA transfer (CPU is halted during the transfer):\n    this.CPUTicks += 4 | tilesToTransfer << 5 << this.doubleSpeedShifter;\n    //Source address of the transfer:\n    var source = this.memory[0xFF51] << 8 | this.memory[0xFF52];\n    //Destination address in the VRAM memory range:\n    var destination = this.memory[0xFF53] << 8 | this.memory[0xFF54];\n    //Creating some references:\n    var memoryReader = this.memoryReader;\n    //JIT the graphics render queue:\n    this.graphicsJIT();\n    var memory = this.memory;\n    //Determining which bank we're working on so we can optimize:\n    if (this.currVRAMBank == 0) //DMA transfer for VRAM bank 0:\n    do {\n        if (destination < 0x1800) {\n            memory[0x8000 | destination] = memoryReader[source](this, source++);\n            memory[0x8001 | destination] = memoryReader[source](this, source++);\n            memory[0x8002 | destination] = memoryReader[source](this, source++);\n            memory[0x8003 | destination] = memoryReader[source](this, source++);\n            memory[0x8004 | destination] = memoryReader[source](this, source++);\n            memory[0x8005 | destination] = memoryReader[source](this, source++);\n            memory[0x8006 | destination] = memoryReader[source](this, source++);\n            memory[0x8007 | destination] = memoryReader[source](this, source++);\n            memory[0x8008 | destination] = memoryReader[source](this, source++);\n            memory[0x8009 | destination] = memoryReader[source](this, source++);\n            memory[0x800A | destination] = memoryReader[source](this, source++);\n            memory[0x800B | destination] = memoryReader[source](this, source++);\n            memory[0x800C | destination] = memoryReader[source](this, source++);\n            memory[0x800D | destination] = memoryReader[source](this, source++);\n            memory[0x800E | destination] = memoryReader[source](this, source++);\n            memory[0x800F | destination] = memoryReader[source](this, source++);\n            this.generateGBCTileBank1(destination);\n            destination += 0x10;\n        } else {\n            destination &= 0x7F0;\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n            destination = destination + 0x1800 & 0x1FF0;\n        }\n        source &= 0xFFF0;\n        --tilesToTransfer;\n    }while (tilesToTransfer > 0);\n    else {\n        var VRAM = this.VRAM;\n        //DMA transfer for VRAM bank 1:\n        do {\n            if (destination < 0x1800) {\n                VRAM[destination] = memoryReader[source](this, source++);\n                VRAM[destination | 0x1] = memoryReader[source](this, source++);\n                VRAM[destination | 0x2] = memoryReader[source](this, source++);\n                VRAM[destination | 0x3] = memoryReader[source](this, source++);\n                VRAM[destination | 0x4] = memoryReader[source](this, source++);\n                VRAM[destination | 0x5] = memoryReader[source](this, source++);\n                VRAM[destination | 0x6] = memoryReader[source](this, source++);\n                VRAM[destination | 0x7] = memoryReader[source](this, source++);\n                VRAM[destination | 0x8] = memoryReader[source](this, source++);\n                VRAM[destination | 0x9] = memoryReader[source](this, source++);\n                VRAM[destination | 0xA] = memoryReader[source](this, source++);\n                VRAM[destination | 0xB] = memoryReader[source](this, source++);\n                VRAM[destination | 0xC] = memoryReader[source](this, source++);\n                VRAM[destination | 0xD] = memoryReader[source](this, source++);\n                VRAM[destination | 0xE] = memoryReader[source](this, source++);\n                VRAM[destination | 0xF] = memoryReader[source](this, source++);\n                this.generateGBCTileBank2(destination);\n                destination += 0x10;\n            } else {\n                destination &= 0x7F0;\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                destination = destination + 0x1800 & 0x1FF0;\n            }\n            source &= 0xFFF0;\n            --tilesToTransfer;\n        }while (tilesToTransfer > 0);\n    }\n    //Update the HDMA registers to their next addresses:\n    memory[0xFF51] = source >> 8;\n    memory[0xFF52] = source & 0xF0;\n    memory[0xFF53] = destination >> 8;\n    memory[0xFF54] = destination & 0xF0;\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.registerWriteJumpCompile = function() {\n    //I/O Registers (GB + GBC):\n    //JoyPad\n    this.memoryHighWriter[0] = this.memoryWriter[0xFF00] = function(parentObj, address, data) {\n        parentObj.memory[0xFF00] = data & 0x30 | ((data & 0x20) == 0 ? parentObj.JoyPad >> 4 : 0xF) & ((data & 0x10) == 0 ? parentObj.JoyPad & 0xF : 0xF);\n    };\n    //SB (Serial Transfer Data)\n    this.memoryHighWriter[0x1] = this.memoryWriter[0xFF01] = function(parentObj, address, data) {\n        if (parentObj.memory[0xFF02] < 0x80) parentObj.memory[0xFF01] = data;\n    };\n    //SC (Serial Transfer Control):\n    this.memoryHighWriter[0x2] = this.memoryHighWriteNormal;\n    this.memoryWriter[0xFF02] = this.memoryWriteNormal;\n    //Unmapped I/O:\n    this.memoryHighWriter[0x3] = this.memoryWriter[0xFF03] = this.cartIgnoreWrite;\n    //DIV\n    this.memoryHighWriter[0x4] = this.memoryWriter[0xFF04] = function(parentObj, address, data) {\n        parentObj.DIVTicks &= 0xFF; //Update DIV for realignment.\n        parentObj.memory[0xFF04] = 0;\n    };\n    //TIMA\n    this.memoryHighWriter[0x5] = this.memoryWriter[0xFF05] = function(parentObj, address, data) {\n        parentObj.memory[0xFF05] = data;\n    };\n    //TMA\n    this.memoryHighWriter[0x6] = this.memoryWriter[0xFF06] = function(parentObj, address, data) {\n        parentObj.memory[0xFF06] = data;\n    };\n    //TAC\n    this.memoryHighWriter[0x7] = this.memoryWriter[0xFF07] = function(parentObj, address, data) {\n        parentObj.memory[0xFF07] = data & 0x07;\n        parentObj.TIMAEnabled = (data & 0x04) == 0x04;\n        parentObj.TACClocker = Math.pow(4, (data & 0x3) != 0 ? data & 0x3 : 4) << 2; //TODO: Find a way to not make a conditional in here...\n    };\n    //Unmapped I/O:\n    this.memoryHighWriter[0x8] = this.memoryWriter[0xFF08] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x9] = this.memoryWriter[0xFF09] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0xA] = this.memoryWriter[0xFF0A] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0xB] = this.memoryWriter[0xFF0B] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0xC] = this.memoryWriter[0xFF0C] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0xD] = this.memoryWriter[0xFF0D] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0xE] = this.memoryWriter[0xFF0E] = this.cartIgnoreWrite;\n    //IF (Interrupt Request)\n    this.memoryHighWriter[0xF] = this.memoryWriter[0xFF0F] = function(parentObj, address, data) {\n        parentObj.interruptsRequested = data;\n        parentObj.checkIRQMatching();\n    };\n    //NR10:\n    this.memoryHighWriter[0x10] = this.memoryWriter[0xFF10] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            if (parentObj.channel1decreaseSweep && (data & 0x08) == 0) {\n                if (parentObj.channel1Swept) parentObj.channel1SweepFault = true;\n            }\n            parentObj.channel1lastTimeSweep = (data & 0x70) >> 4;\n            parentObj.channel1frequencySweepDivider = data & 0x07;\n            parentObj.channel1decreaseSweep = (data & 0x08) == 0x08;\n            parentObj.memory[0xFF10] = data;\n            parentObj.channel1EnableCheck();\n        }\n    };\n    //NR11:\n    this.memoryHighWriter[0x11] = this.memoryWriter[0xFF11] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled || !parentObj.cGBC) {\n            if (parentObj.soundMasterEnabled) parentObj.audioJIT();\n            else data &= 0x3F;\n            parentObj.channel1CachedDuty = parentObj.dutyLookup[data >> 6];\n            parentObj.channel1totalLength = 0x40 - (data & 0x3F);\n            parentObj.memory[0xFF11] = data;\n            parentObj.channel1EnableCheck();\n        }\n    };\n    //NR12:\n    this.memoryHighWriter[0x12] = this.memoryWriter[0xFF12] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            if (parentObj.channel1Enabled && parentObj.channel1envelopeSweeps == 0) {\n                //Zombie Volume PAPU Bug:\n                if (((parentObj.memory[0xFF12] ^ data) & 0x8) == 0x8) {\n                    if ((parentObj.memory[0xFF12] & 0x8) == 0) {\n                        if ((parentObj.memory[0xFF12] & 0x7) == 0x7) parentObj.channel1envelopeVolume += 2;\n                        else ++parentObj.channel1envelopeVolume;\n                    }\n                    parentObj.channel1envelopeVolume = 16 - parentObj.channel1envelopeVolume & 0xF;\n                } else if ((parentObj.memory[0xFF12] & 0xF) == 0x8) parentObj.channel1envelopeVolume = 1 + parentObj.channel1envelopeVolume & 0xF;\n                parentObj.channel1OutputLevelCache();\n            }\n            parentObj.channel1envelopeType = (data & 0x08) == 0x08;\n            parentObj.memory[0xFF12] = data;\n            parentObj.channel1VolumeEnableCheck();\n        }\n    };\n    //NR13:\n    this.memoryHighWriter[0x13] = this.memoryWriter[0xFF13] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            parentObj.channel1frequency = parentObj.channel1frequency & 0x700 | data;\n            parentObj.channel1FrequencyTracker = 0x800 - parentObj.channel1frequency << 2;\n        }\n    };\n    //NR14:\n    this.memoryHighWriter[0x14] = this.memoryWriter[0xFF14] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            parentObj.channel1consecutive = (data & 0x40) == 0x0;\n            parentObj.channel1frequency = (data & 0x7) << 8 | parentObj.channel1frequency & 0xFF;\n            parentObj.channel1FrequencyTracker = 0x800 - parentObj.channel1frequency << 2;\n            if (data > 0x7F) {\n                //Reload 0xFF10:\n                parentObj.channel1timeSweep = parentObj.channel1lastTimeSweep;\n                parentObj.channel1Swept = false;\n                //Reload 0xFF12:\n                var nr12 = parentObj.memory[0xFF12];\n                parentObj.channel1envelopeVolume = nr12 >> 4;\n                parentObj.channel1OutputLevelCache();\n                parentObj.channel1envelopeSweepsLast = (nr12 & 0x7) - 1;\n                if (parentObj.channel1totalLength == 0) parentObj.channel1totalLength = 0x40;\n                if (parentObj.channel1lastTimeSweep > 0 || parentObj.channel1frequencySweepDivider > 0) parentObj.memory[0xFF26] |= 0x1;\n                else parentObj.memory[0xFF26] &= 0xFE;\n                if ((data & 0x40) == 0x40) parentObj.memory[0xFF26] |= 0x1;\n                parentObj.channel1ShadowFrequency = parentObj.channel1frequency;\n                //Reset frequency overflow check + frequency sweep type check:\n                parentObj.channel1SweepFault = false;\n                //Supposed to run immediately:\n                parentObj.channel1AudioSweepPerformDummy();\n            }\n            parentObj.channel1EnableCheck();\n            parentObj.memory[0xFF14] = data;\n        }\n    };\n    //NR20 (Unused I/O):\n    this.memoryHighWriter[0x15] = this.memoryWriter[0xFF15] = this.cartIgnoreWrite;\n    //NR21:\n    this.memoryHighWriter[0x16] = this.memoryWriter[0xFF16] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled || !parentObj.cGBC) {\n            if (parentObj.soundMasterEnabled) parentObj.audioJIT();\n            else data &= 0x3F;\n            parentObj.channel2CachedDuty = parentObj.dutyLookup[data >> 6];\n            parentObj.channel2totalLength = 0x40 - (data & 0x3F);\n            parentObj.memory[0xFF16] = data;\n            parentObj.channel2EnableCheck();\n        }\n    };\n    //NR22:\n    this.memoryHighWriter[0x17] = this.memoryWriter[0xFF17] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            if (parentObj.channel2Enabled && parentObj.channel2envelopeSweeps == 0) {\n                //Zombie Volume PAPU Bug:\n                if (((parentObj.memory[0xFF17] ^ data) & 0x8) == 0x8) {\n                    if ((parentObj.memory[0xFF17] & 0x8) == 0) {\n                        if ((parentObj.memory[0xFF17] & 0x7) == 0x7) parentObj.channel2envelopeVolume += 2;\n                        else ++parentObj.channel2envelopeVolume;\n                    }\n                    parentObj.channel2envelopeVolume = 16 - parentObj.channel2envelopeVolume & 0xF;\n                } else if ((parentObj.memory[0xFF17] & 0xF) == 0x8) parentObj.channel2envelopeVolume = 1 + parentObj.channel2envelopeVolume & 0xF;\n                parentObj.channel2OutputLevelCache();\n            }\n            parentObj.channel2envelopeType = (data & 0x08) == 0x08;\n            parentObj.memory[0xFF17] = data;\n            parentObj.channel2VolumeEnableCheck();\n        }\n    };\n    //NR23:\n    this.memoryHighWriter[0x18] = this.memoryWriter[0xFF18] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            parentObj.channel2frequency = parentObj.channel2frequency & 0x700 | data;\n            parentObj.channel2FrequencyTracker = 0x800 - parentObj.channel2frequency << 2;\n        }\n    };\n    //NR24:\n    this.memoryHighWriter[0x19] = this.memoryWriter[0xFF19] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            if (data > 0x7F) {\n                //Reload 0xFF17:\n                var nr22 = parentObj.memory[0xFF17];\n                parentObj.channel2envelopeVolume = nr22 >> 4;\n                parentObj.channel2OutputLevelCache();\n                parentObj.channel2envelopeSweepsLast = (nr22 & 0x7) - 1;\n                if (parentObj.channel2totalLength == 0) parentObj.channel2totalLength = 0x40;\n                if ((data & 0x40) == 0x40) parentObj.memory[0xFF26] |= 0x2;\n            }\n            parentObj.channel2consecutive = (data & 0x40) == 0x0;\n            parentObj.channel2frequency = (data & 0x7) << 8 | parentObj.channel2frequency & 0xFF;\n            parentObj.channel2FrequencyTracker = 0x800 - parentObj.channel2frequency << 2;\n            parentObj.memory[0xFF19] = data;\n            parentObj.channel2EnableCheck();\n        }\n    };\n    //NR30:\n    this.memoryHighWriter[0x1A] = this.memoryWriter[0xFF1A] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            if (!parentObj.channel3canPlay && data >= 0x80) {\n                parentObj.channel3lastSampleLookup = 0;\n                parentObj.channel3UpdateCache();\n            }\n            parentObj.channel3canPlay = data > 0x7F;\n            if (parentObj.channel3canPlay && parentObj.memory[0xFF1A] > 0x7F && !parentObj.channel3consecutive) parentObj.memory[0xFF26] |= 0x4;\n            parentObj.memory[0xFF1A] = data;\n        //parentObj.channel3EnableCheck();\n        }\n    };\n    //NR31:\n    this.memoryHighWriter[0x1B] = this.memoryWriter[0xFF1B] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled || !parentObj.cGBC) {\n            if (parentObj.soundMasterEnabled) parentObj.audioJIT();\n            parentObj.channel3totalLength = 0x100 - data;\n            parentObj.channel3EnableCheck();\n        }\n    };\n    //NR32:\n    this.memoryHighWriter[0x1C] = this.memoryWriter[0xFF1C] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            data &= 0x60;\n            parentObj.memory[0xFF1C] = data;\n            parentObj.channel3patternType = data == 0 ? 4 : (data >> 5) - 1;\n        }\n    };\n    //NR33:\n    this.memoryHighWriter[0x1D] = this.memoryWriter[0xFF1D] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            parentObj.channel3frequency = parentObj.channel3frequency & 0x700 | data;\n            parentObj.channel3FrequencyPeriod = 0x800 - parentObj.channel3frequency << 1;\n        }\n    };\n    //NR34:\n    this.memoryHighWriter[0x1E] = this.memoryWriter[0xFF1E] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            if (data > 0x7F) {\n                if (parentObj.channel3totalLength == 0) parentObj.channel3totalLength = 0x100;\n                parentObj.channel3lastSampleLookup = 0;\n                if ((data & 0x40) == 0x40) parentObj.memory[0xFF26] |= 0x4;\n            }\n            parentObj.channel3consecutive = (data & 0x40) == 0x0;\n            parentObj.channel3frequency = (data & 0x7) << 8 | parentObj.channel3frequency & 0xFF;\n            parentObj.channel3FrequencyPeriod = 0x800 - parentObj.channel3frequency << 1;\n            parentObj.memory[0xFF1E] = data;\n            parentObj.channel3EnableCheck();\n        }\n    };\n    //NR40 (Unused I/O):\n    this.memoryHighWriter[0x1F] = this.memoryWriter[0xFF1F] = this.cartIgnoreWrite;\n    //NR41:\n    this.memoryHighWriter[0x20] = this.memoryWriter[0xFF20] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled || !parentObj.cGBC) {\n            if (parentObj.soundMasterEnabled) parentObj.audioJIT();\n            parentObj.channel4totalLength = 0x40 - (data & 0x3F);\n            parentObj.channel4EnableCheck();\n        }\n    };\n    //NR42:\n    this.memoryHighWriter[0x21] = this.memoryWriter[0xFF21] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            if (parentObj.channel4Enabled && parentObj.channel4envelopeSweeps == 0) {\n                //Zombie Volume PAPU Bug:\n                if (((parentObj.memory[0xFF21] ^ data) & 0x8) == 0x8) {\n                    if ((parentObj.memory[0xFF21] & 0x8) == 0) {\n                        if ((parentObj.memory[0xFF21] & 0x7) == 0x7) parentObj.channel4envelopeVolume += 2;\n                        else ++parentObj.channel4envelopeVolume;\n                    }\n                    parentObj.channel4envelopeVolume = 16 - parentObj.channel4envelopeVolume & 0xF;\n                } else if ((parentObj.memory[0xFF21] & 0xF) == 0x8) parentObj.channel4envelopeVolume = 1 + parentObj.channel4envelopeVolume & 0xF;\n                parentObj.channel4currentVolume = parentObj.channel4envelopeVolume << parentObj.channel4VolumeShifter;\n            }\n            parentObj.channel4envelopeType = (data & 0x08) == 0x08;\n            parentObj.memory[0xFF21] = data;\n            parentObj.channel4UpdateCache();\n            parentObj.channel4VolumeEnableCheck();\n        }\n    };\n    //NR43:\n    this.memoryHighWriter[0x22] = this.memoryWriter[0xFF22] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            parentObj.channel4FrequencyPeriod = Math.max((data & 0x7) << 4, 8) << (data >> 4);\n            var bitWidth = data & 0x8;\n            if (bitWidth == 0x8 && parentObj.channel4BitRange == 0x7FFF || bitWidth == 0 && parentObj.channel4BitRange == 0x7F) {\n                parentObj.channel4lastSampleLookup = 0;\n                parentObj.channel4BitRange = bitWidth == 0x8 ? 0x7F : 0x7FFF;\n                parentObj.channel4VolumeShifter = bitWidth == 0x8 ? 7 : 15;\n                parentObj.channel4currentVolume = parentObj.channel4envelopeVolume << parentObj.channel4VolumeShifter;\n                parentObj.noiseSampleTable = bitWidth == 0x8 ? parentObj.LSFR7Table : parentObj.LSFR15Table;\n            }\n            parentObj.memory[0xFF22] = data;\n            parentObj.channel4UpdateCache();\n        }\n    };\n    //NR44:\n    this.memoryHighWriter[0x23] = this.memoryWriter[0xFF23] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            parentObj.memory[0xFF23] = data;\n            parentObj.channel4consecutive = (data & 0x40) == 0x0;\n            if (data > 0x7F) {\n                var nr42 = parentObj.memory[0xFF21];\n                parentObj.channel4envelopeVolume = nr42 >> 4;\n                parentObj.channel4currentVolume = parentObj.channel4envelopeVolume << parentObj.channel4VolumeShifter;\n                parentObj.channel4envelopeSweepsLast = (nr42 & 0x7) - 1;\n                if (parentObj.channel4totalLength == 0) parentObj.channel4totalLength = 0x40;\n                if ((data & 0x40) == 0x40) parentObj.memory[0xFF26] |= 0x8;\n            }\n            parentObj.channel4EnableCheck();\n        }\n    };\n    //NR50:\n    this.memoryHighWriter[0x24] = this.memoryWriter[0xFF24] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled && parentObj.memory[0xFF24] != data) {\n            parentObj.audioJIT();\n            parentObj.memory[0xFF24] = data;\n            parentObj.VinLeftChannelMasterVolume = (data >> 4 & 0x07) + 1;\n            parentObj.VinRightChannelMasterVolume = (data & 0x07) + 1;\n            parentObj.mixerOutputLevelCache();\n        }\n    };\n    //NR51:\n    this.memoryHighWriter[0x25] = this.memoryWriter[0xFF25] = function(parentObj, address, data) {\n        if (parentObj.soundMasterEnabled && parentObj.memory[0xFF25] != data) {\n            parentObj.audioJIT();\n            parentObj.memory[0xFF25] = data;\n            parentObj.rightChannel1 = (data & 0x01) == 0x01;\n            parentObj.rightChannel2 = (data & 0x02) == 0x02;\n            parentObj.rightChannel3 = (data & 0x04) == 0x04;\n            parentObj.rightChannel4 = (data & 0x08) == 0x08;\n            parentObj.leftChannel1 = (data & 0x10) == 0x10;\n            parentObj.leftChannel2 = (data & 0x20) == 0x20;\n            parentObj.leftChannel3 = (data & 0x40) == 0x40;\n            parentObj.leftChannel4 = data > 0x7F;\n            parentObj.channel1OutputLevelCache();\n            parentObj.channel2OutputLevelCache();\n            parentObj.channel3OutputLevelCache();\n            parentObj.channel4OutputLevelCache();\n        }\n    };\n    //NR52:\n    this.memoryHighWriter[0x26] = this.memoryWriter[0xFF26] = function(parentObj, address, data) {\n        parentObj.audioJIT();\n        if (!parentObj.soundMasterEnabled && data > 0x7F) {\n            parentObj.memory[0xFF26] = 0x80;\n            parentObj.soundMasterEnabled = true;\n            parentObj.initializeAudioStartState();\n        } else if (parentObj.soundMasterEnabled && data < 0x80) {\n            parentObj.memory[0xFF26] = 0;\n            parentObj.soundMasterEnabled = false;\n            //GBDev wiki says the registers are written with zeros on power off:\n            for(var index = 0xFF10; index < 0xFF26; index++)parentObj.memoryWriter[index](parentObj, index, 0);\n        }\n    };\n    //0xFF27 to 0xFF2F don't do anything...\n    this.memoryHighWriter[0x27] = this.memoryWriter[0xFF27] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x28] = this.memoryWriter[0xFF28] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x29] = this.memoryWriter[0xFF29] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x2A] = this.memoryWriter[0xFF2A] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x2B] = this.memoryWriter[0xFF2B] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x2C] = this.memoryWriter[0xFF2C] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x2D] = this.memoryWriter[0xFF2D] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x2E] = this.memoryWriter[0xFF2E] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x2F] = this.memoryWriter[0xFF2F] = this.cartIgnoreWrite;\n    //WAVE PCM RAM:\n    this.memoryHighWriter[0x30] = this.memoryWriter[0xFF30] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0, data);\n    };\n    this.memoryHighWriter[0x31] = this.memoryWriter[0xFF31] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x1, data);\n    };\n    this.memoryHighWriter[0x32] = this.memoryWriter[0xFF32] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x2, data);\n    };\n    this.memoryHighWriter[0x33] = this.memoryWriter[0xFF33] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x3, data);\n    };\n    this.memoryHighWriter[0x34] = this.memoryWriter[0xFF34] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x4, data);\n    };\n    this.memoryHighWriter[0x35] = this.memoryWriter[0xFF35] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x5, data);\n    };\n    this.memoryHighWriter[0x36] = this.memoryWriter[0xFF36] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x6, data);\n    };\n    this.memoryHighWriter[0x37] = this.memoryWriter[0xFF37] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x7, data);\n    };\n    this.memoryHighWriter[0x38] = this.memoryWriter[0xFF38] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x8, data);\n    };\n    this.memoryHighWriter[0x39] = this.memoryWriter[0xFF39] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x9, data);\n    };\n    this.memoryHighWriter[0x3A] = this.memoryWriter[0xFF3A] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0xA, data);\n    };\n    this.memoryHighWriter[0x3B] = this.memoryWriter[0xFF3B] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0xB, data);\n    };\n    this.memoryHighWriter[0x3C] = this.memoryWriter[0xFF3C] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0xC, data);\n    };\n    this.memoryHighWriter[0x3D] = this.memoryWriter[0xFF3D] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0xD, data);\n    };\n    this.memoryHighWriter[0x3E] = this.memoryWriter[0xFF3E] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0xE, data);\n    };\n    this.memoryHighWriter[0x3F] = this.memoryWriter[0xFF3F] = function(parentObj, address, data) {\n        parentObj.channel3WriteRAM(0xF, data);\n    };\n    //SCY\n    this.memoryHighWriter[0x42] = this.memoryWriter[0xFF42] = function(parentObj, address, data) {\n        if (parentObj.backgroundY != data) {\n            parentObj.midScanLineJIT();\n            parentObj.backgroundY = data;\n        }\n    };\n    //SCX\n    this.memoryHighWriter[0x43] = this.memoryWriter[0xFF43] = function(parentObj, address, data) {\n        if (parentObj.backgroundX != data) {\n            parentObj.midScanLineJIT();\n            parentObj.backgroundX = data;\n        }\n    };\n    //LY\n    this.memoryHighWriter[0x44] = this.memoryWriter[0xFF44] = function(parentObj, address, data) {\n        //Read Only:\n        if (parentObj.LCDisOn) {\n            //Gambatte says to do this:\n            parentObj.modeSTAT = 2;\n            parentObj.midScanlineOffset = -1;\n            parentObj.totalLinesPassed = parentObj.currentX = parentObj.queuedScanLines = parentObj.lastUnrenderedLine = parentObj.LCDTicks = parentObj.STATTracker = parentObj.actualScanLine = parentObj.memory[0xFF44] = 0;\n        }\n    };\n    //LYC\n    this.memoryHighWriter[0x45] = this.memoryWriter[0xFF45] = function(parentObj, address, data) {\n        if (parentObj.memory[0xFF45] != data) {\n            parentObj.memory[0xFF45] = data;\n            if (parentObj.LCDisOn) parentObj.matchLYC(); //Get the compare of the first scan line.\n        }\n    };\n    //WY\n    this.memoryHighWriter[0x4A] = this.memoryWriter[0xFF4A] = function(parentObj, address, data) {\n        if (parentObj.windowY != data) {\n            parentObj.midScanLineJIT();\n            parentObj.windowY = data;\n        }\n    };\n    //WX\n    this.memoryHighWriter[0x4B] = this.memoryWriter[0xFF4B] = function(parentObj, address, data) {\n        if (parentObj.memory[0xFF4B] != data) {\n            parentObj.midScanLineJIT();\n            parentObj.memory[0xFF4B] = data;\n            parentObj.windowX = data - 7;\n        }\n    };\n    this.memoryHighWriter[0x72] = this.memoryWriter[0xFF72] = function(parentObj, address, data) {\n        parentObj.memory[0xFF72] = data;\n    };\n    this.memoryHighWriter[0x73] = this.memoryWriter[0xFF73] = function(parentObj, address, data) {\n        parentObj.memory[0xFF73] = data;\n    };\n    this.memoryHighWriter[0x75] = this.memoryWriter[0xFF75] = function(parentObj, address, data) {\n        parentObj.memory[0xFF75] = data;\n    };\n    this.memoryHighWriter[0x76] = this.memoryWriter[0xFF76] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x77] = this.memoryWriter[0xFF77] = this.cartIgnoreWrite;\n    //IE (Interrupt Enable)\n    this.memoryHighWriter[0xFF] = this.memoryWriter[0xFFFF] = function(parentObj, address, data) {\n        parentObj.interruptsEnabled = data;\n        parentObj.checkIRQMatching();\n    };\n    this.recompileModelSpecificIOWriteHandling();\n    this.recompileBootIOWriteHandling();\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.recompileModelSpecificIOWriteHandling = function() {\n    if (this.cGBC) {\n        //GameBoy Color Specific I/O:\n        //SC (Serial Transfer Control Register)\n        this.memoryHighWriter[0x2] = this.memoryWriter[0xFF02] = function(parentObj, address, data) {\n            if ((data & 0x1) == 0x1) {\n                //Internal clock:\n                parentObj.memory[0xFF02] = data & 0x7F;\n                parentObj.serialTimer = (data & 0x2) == 0 ? 4096 : 128; //Set the Serial IRQ counter.\n                parentObj.serialShiftTimer = parentObj.serialShiftTimerAllocated = (data & 0x2) == 0 ? 512 : 16; //Set the transfer data shift counter.\n            } else {\n                //External clock:\n                parentObj.memory[0xFF02] = data;\n                parentObj.serialShiftTimer = parentObj.serialShiftTimerAllocated = parentObj.serialTimer = 0; //Zero the timers, since we're emulating as if nothing is connected.\n            }\n        };\n        this.memoryHighWriter[0x40] = this.memoryWriter[0xFF40] = function(parentObj, address, data) {\n            if (parentObj.memory[0xFF40] != data) {\n                parentObj.midScanLineJIT();\n                var temp_var = data > 0x7F;\n                if (temp_var != parentObj.LCDisOn) {\n                    //When the display mode changes...\n                    parentObj.LCDisOn = temp_var;\n                    parentObj.memory[0xFF41] &= 0x78;\n                    parentObj.midScanlineOffset = -1;\n                    parentObj.totalLinesPassed = parentObj.currentX = parentObj.queuedScanLines = parentObj.lastUnrenderedLine = parentObj.STATTracker = parentObj.LCDTicks = parentObj.actualScanLine = parentObj.memory[0xFF44] = 0;\n                    if (parentObj.LCDisOn) {\n                        parentObj.modeSTAT = 2;\n                        parentObj.matchLYC(); //Get the compare of the first scan line.\n                        parentObj.LCDCONTROL = parentObj.LINECONTROL;\n                    } else {\n                        parentObj.modeSTAT = 0;\n                        parentObj.LCDCONTROL = parentObj.DISPLAYOFFCONTROL;\n                        parentObj.DisplayShowOff();\n                    }\n                    parentObj.interruptsRequested &= 0xFD;\n                }\n                parentObj.gfxWindowCHRBankPosition = (data & 0x40) == 0x40 ? 0x400 : 0;\n                parentObj.gfxWindowDisplay = (data & 0x20) == 0x20;\n                parentObj.gfxBackgroundBankOffset = (data & 0x10) == 0x10 ? 0 : 0x80;\n                parentObj.gfxBackgroundCHRBankPosition = (data & 0x08) == 0x08 ? 0x400 : 0;\n                parentObj.gfxSpriteNormalHeight = (data & 0x04) == 0;\n                parentObj.gfxSpriteShow = (data & 0x02) == 0x02;\n                parentObj.BGPriorityEnabled = (data & 0x01) == 0x01;\n                parentObj.priorityFlaggingPathRebuild(); //Special case the priority flagging as an optimization.\n                parentObj.memory[0xFF40] = data;\n            }\n        };\n        this.memoryHighWriter[0x41] = this.memoryWriter[0xFF41] = function(parentObj, address, data) {\n            parentObj.LYCMatchTriggerSTAT = (data & 0x40) == 0x40;\n            parentObj.mode2TriggerSTAT = (data & 0x20) == 0x20;\n            parentObj.mode1TriggerSTAT = (data & 0x10) == 0x10;\n            parentObj.mode0TriggerSTAT = (data & 0x08) == 0x08;\n            parentObj.memory[0xFF41] = data & 0x78;\n        };\n        this.memoryHighWriter[0x46] = this.memoryWriter[0xFF46] = function(parentObj, address, data) {\n            parentObj.memory[0xFF46] = data;\n            if (data < 0xE0) {\n                data <<= 8;\n                address = 0xFE00;\n                var stat = parentObj.modeSTAT;\n                parentObj.modeSTAT = 0;\n                var newData = 0;\n                do {\n                    newData = parentObj.memoryReader[data](parentObj, data++);\n                    if (newData != parentObj.memory[address]) {\n                        //JIT the graphics render queue:\n                        parentObj.modeSTAT = stat;\n                        parentObj.graphicsJIT();\n                        parentObj.modeSTAT = 0;\n                        parentObj.memory[address++] = newData;\n                        break;\n                    }\n                }while (++address < 0xFEA0);\n                if (address < 0xFEA0) do {\n                    parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                    parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                    parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                    parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                }while (address < 0xFEA0);\n                parentObj.modeSTAT = stat;\n            }\n        };\n        //KEY1\n        this.memoryHighWriter[0x4D] = this.memoryWriter[0xFF4D] = function(parentObj, address, data) {\n            parentObj.memory[0xFF4D] = data & 0x7F | parentObj.memory[0xFF4D] & 0x80;\n        };\n        this.memoryHighWriter[0x4F] = this.memoryWriter[0xFF4F] = function(parentObj, address, data) {\n            parentObj.currVRAMBank = data & 0x01;\n            if (parentObj.currVRAMBank > 0) parentObj.BGCHRCurrentBank = parentObj.BGCHRBank2;\n            else parentObj.BGCHRCurrentBank = parentObj.BGCHRBank1;\n        //Only writable by GBC.\n        };\n        this.memoryHighWriter[0x51] = this.memoryWriter[0xFF51] = function(parentObj, address, data) {\n            if (!parentObj.hdmaRunning) parentObj.memory[0xFF51] = data;\n        };\n        this.memoryHighWriter[0x52] = this.memoryWriter[0xFF52] = function(parentObj, address, data) {\n            if (!parentObj.hdmaRunning) parentObj.memory[0xFF52] = data & 0xF0;\n        };\n        this.memoryHighWriter[0x53] = this.memoryWriter[0xFF53] = function(parentObj, address, data) {\n            if (!parentObj.hdmaRunning) parentObj.memory[0xFF53] = data & 0x1F;\n        };\n        this.memoryHighWriter[0x54] = this.memoryWriter[0xFF54] = function(parentObj, address, data) {\n            if (!parentObj.hdmaRunning) parentObj.memory[0xFF54] = data & 0xF0;\n        };\n        this.memoryHighWriter[0x55] = this.memoryWriter[0xFF55] = function(parentObj, address, data) {\n            if (!parentObj.hdmaRunning) {\n                if ((data & 0x80) == 0) {\n                    //DMA\n                    parentObj.DMAWrite((data & 0x7F) + 1);\n                    parentObj.memory[0xFF55] = 0xFF; //Transfer completed.\n                } else {\n                    //H-Blank DMA\n                    parentObj.hdmaRunning = true;\n                    parentObj.memory[0xFF55] = data & 0x7F;\n                }\n            } else if ((data & 0x80) == 0) {\n                //Stop H-Blank DMA\n                parentObj.hdmaRunning = false;\n                parentObj.memory[0xFF55] |= 0x80;\n            } else parentObj.memory[0xFF55] = data & 0x7F;\n        };\n        this.memoryHighWriter[0x68] = this.memoryWriter[0xFF68] = function(parentObj, address, data) {\n            parentObj.memory[0xFF69] = parentObj.gbcBGRawPalette[data & 0x3F];\n            parentObj.memory[0xFF68] = data;\n        };\n        this.memoryHighWriter[0x69] = this.memoryWriter[0xFF69] = function(parentObj, address, data) {\n            parentObj.updateGBCBGPalette(parentObj.memory[0xFF68] & 0x3F, data);\n            if (parentObj.memory[0xFF68] > 0x7F) {\n                var next = parentObj.memory[0xFF68] + 1 & 0x3F;\n                parentObj.memory[0xFF68] = next | 0x80;\n                parentObj.memory[0xFF69] = parentObj.gbcBGRawPalette[next];\n            } else parentObj.memory[0xFF69] = data;\n        };\n        this.memoryHighWriter[0x6A] = this.memoryWriter[0xFF6A] = function(parentObj, address, data) {\n            parentObj.memory[0xFF6B] = parentObj.gbcOBJRawPalette[data & 0x3F];\n            parentObj.memory[0xFF6A] = data;\n        };\n        this.memoryHighWriter[0x6B] = this.memoryWriter[0xFF6B] = function(parentObj, address, data) {\n            parentObj.updateGBCOBJPalette(parentObj.memory[0xFF6A] & 0x3F, data);\n            if (parentObj.memory[0xFF6A] > 0x7F) {\n                var next = parentObj.memory[0xFF6A] + 1 & 0x3F;\n                parentObj.memory[0xFF6A] = next | 0x80;\n                parentObj.memory[0xFF6B] = parentObj.gbcOBJRawPalette[next];\n            } else parentObj.memory[0xFF6B] = data;\n        };\n        //SVBK\n        this.memoryHighWriter[0x70] = this.memoryWriter[0xFF70] = function(parentObj, address, data) {\n            var addressCheck = parentObj.memory[0xFF51] << 8 | parentObj.memory[0xFF52]; //Cannot change the RAM bank while WRAM is the source of a running HDMA.\n            if (!parentObj.hdmaRunning || addressCheck < 0xD000 || addressCheck >= 0xE000) {\n                parentObj.gbcRamBank = Math.max(data & 0x07, 1); //Bank range is from 1-7\n                parentObj.gbcRamBankPosition = (parentObj.gbcRamBank - 1 << 12) - 0xD000;\n                parentObj.gbcRamBankPositionECHO = parentObj.gbcRamBankPosition - 0x2000;\n            }\n            parentObj.memory[0xFF70] = data; //Bit 6 cannot be written to.\n        };\n        this.memoryHighWriter[0x74] = this.memoryWriter[0xFF74] = function(parentObj, address, data) {\n            parentObj.memory[0xFF74] = data;\n        };\n    } else {\n        //Fill in the GameBoy Color I/O registers as normal RAM for GameBoy compatibility:\n        //SC (Serial Transfer Control Register)\n        this.memoryHighWriter[0x2] = this.memoryWriter[0xFF02] = function(parentObj, address, data) {\n            if ((data & 0x1) == 0x1) {\n                //Internal clock:\n                parentObj.memory[0xFF02] = data & 0x7F;\n                parentObj.serialTimer = 4096; //Set the Serial IRQ counter.\n                parentObj.serialShiftTimer = parentObj.serialShiftTimerAllocated = 512; //Set the transfer data shift counter.\n            } else {\n                //External clock:\n                parentObj.memory[0xFF02] = data;\n                parentObj.serialShiftTimer = parentObj.serialShiftTimerAllocated = parentObj.serialTimer = 0; //Zero the timers, since we're emulating as if nothing is connected.\n            }\n        };\n        this.memoryHighWriter[0x40] = this.memoryWriter[0xFF40] = function(parentObj, address, data) {\n            if (parentObj.memory[0xFF40] != data) {\n                parentObj.midScanLineJIT();\n                var temp_var = data > 0x7F;\n                if (temp_var != parentObj.LCDisOn) {\n                    //When the display mode changes...\n                    parentObj.LCDisOn = temp_var;\n                    parentObj.memory[0xFF41] &= 0x78;\n                    parentObj.midScanlineOffset = -1;\n                    parentObj.totalLinesPassed = parentObj.currentX = parentObj.queuedScanLines = parentObj.lastUnrenderedLine = parentObj.STATTracker = parentObj.LCDTicks = parentObj.actualScanLine = parentObj.memory[0xFF44] = 0;\n                    if (parentObj.LCDisOn) {\n                        parentObj.modeSTAT = 2;\n                        parentObj.matchLYC(); //Get the compare of the first scan line.\n                        parentObj.LCDCONTROL = parentObj.LINECONTROL;\n                    } else {\n                        parentObj.modeSTAT = 0;\n                        parentObj.LCDCONTROL = parentObj.DISPLAYOFFCONTROL;\n                        parentObj.DisplayShowOff();\n                    }\n                    parentObj.interruptsRequested &= 0xFD;\n                }\n                parentObj.gfxWindowCHRBankPosition = (data & 0x40) == 0x40 ? 0x400 : 0;\n                parentObj.gfxWindowDisplay = (data & 0x20) == 0x20;\n                parentObj.gfxBackgroundBankOffset = (data & 0x10) == 0x10 ? 0 : 0x80;\n                parentObj.gfxBackgroundCHRBankPosition = (data & 0x08) == 0x08 ? 0x400 : 0;\n                parentObj.gfxSpriteNormalHeight = (data & 0x04) == 0;\n                parentObj.gfxSpriteShow = (data & 0x02) == 0x02;\n                parentObj.bgEnabled = (data & 0x01) == 0x01;\n                parentObj.memory[0xFF40] = data;\n            }\n        };\n        this.memoryHighWriter[0x41] = this.memoryWriter[0xFF41] = function(parentObj, address, data) {\n            parentObj.LYCMatchTriggerSTAT = (data & 0x40) == 0x40;\n            parentObj.mode2TriggerSTAT = (data & 0x20) == 0x20;\n            parentObj.mode1TriggerSTAT = (data & 0x10) == 0x10;\n            parentObj.mode0TriggerSTAT = (data & 0x08) == 0x08;\n            parentObj.memory[0xFF41] = data & 0x78;\n            if ((!parentObj.usedBootROM || !parentObj.usedGBCBootROM) && parentObj.LCDisOn && parentObj.modeSTAT < 2) {\n                parentObj.interruptsRequested |= 0x2;\n                parentObj.checkIRQMatching();\n            }\n        };\n        this.memoryHighWriter[0x46] = this.memoryWriter[0xFF46] = function(parentObj, address, data) {\n            parentObj.memory[0xFF46] = data;\n            if (data > 0x7F && data < 0xE0) {\n                data <<= 8;\n                address = 0xFE00;\n                var stat = parentObj.modeSTAT;\n                parentObj.modeSTAT = 0;\n                var newData = 0;\n                do {\n                    newData = parentObj.memoryReader[data](parentObj, data++);\n                    if (newData != parentObj.memory[address]) {\n                        //JIT the graphics render queue:\n                        parentObj.modeSTAT = stat;\n                        parentObj.graphicsJIT();\n                        parentObj.modeSTAT = 0;\n                        parentObj.memory[address++] = newData;\n                        break;\n                    }\n                }while (++address < 0xFEA0);\n                if (address < 0xFEA0) do {\n                    parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                    parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                    parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                    parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                }while (address < 0xFEA0);\n                parentObj.modeSTAT = stat;\n            }\n        };\n        this.memoryHighWriter[0x47] = this.memoryWriter[0xFF47] = function(parentObj, address, data) {\n            if (parentObj.memory[0xFF47] != data) {\n                parentObj.midScanLineJIT();\n                parentObj.updateGBBGPalette(data);\n                parentObj.memory[0xFF47] = data;\n            }\n        };\n        this.memoryHighWriter[0x48] = this.memoryWriter[0xFF48] = function(parentObj, address, data) {\n            if (parentObj.memory[0xFF48] != data) {\n                parentObj.midScanLineJIT();\n                parentObj.updateGBOBJPalette(0, data);\n                parentObj.memory[0xFF48] = data;\n            }\n        };\n        this.memoryHighWriter[0x49] = this.memoryWriter[0xFF49] = function(parentObj, address, data) {\n            if (parentObj.memory[0xFF49] != data) {\n                parentObj.midScanLineJIT();\n                parentObj.updateGBOBJPalette(4, data);\n                parentObj.memory[0xFF49] = data;\n            }\n        };\n        this.memoryHighWriter[0x4D] = this.memoryWriter[0xFF4D] = function(parentObj, address, data) {\n            parentObj.memory[0xFF4D] = data;\n        };\n        this.memoryHighWriter[0x4F] = this.memoryWriter[0xFF4F] = this.cartIgnoreWrite; //Not writable in DMG mode.\n        this.memoryHighWriter[0x55] = this.memoryWriter[0xFF55] = this.cartIgnoreWrite;\n        this.memoryHighWriter[0x68] = this.memoryWriter[0xFF68] = this.cartIgnoreWrite;\n        this.memoryHighWriter[0x69] = this.memoryWriter[0xFF69] = this.cartIgnoreWrite;\n        this.memoryHighWriter[0x6A] = this.memoryWriter[0xFF6A] = this.cartIgnoreWrite;\n        this.memoryHighWriter[0x6B] = this.memoryWriter[0xFF6B] = this.cartIgnoreWrite;\n        this.memoryHighWriter[0x6C] = this.memoryWriter[0xFF6C] = this.cartIgnoreWrite;\n        this.memoryHighWriter[0x70] = this.memoryWriter[0xFF70] = this.cartIgnoreWrite;\n        this.memoryHighWriter[0x74] = this.memoryWriter[0xFF74] = this.cartIgnoreWrite;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.recompileBootIOWriteHandling = function() {\n    //Boot I/O Registers:\n    if (this.inBootstrap) {\n        this.memoryHighWriter[0x50] = this.memoryWriter[0xFF50] = function(parentObj, address, data) {\n            $6de83094d3815a3f$var$cout(\"Boot ROM reads blocked: Bootstrap process has ended.\", 0);\n            parentObj.inBootstrap = false;\n            parentObj.disableBootROM(); //Fill in the boot ROM ranges with ROM  bank 0 ROM ranges\n            parentObj.memory[0xFF50] = data; //Bits are sustained in memory?\n        };\n        if (this.cGBC) this.memoryHighWriter[0x6C] = this.memoryWriter[0xFF6C] = function(parentObj, address, data) {\n            if (parentObj.inBootstrap) {\n                parentObj.cGBC = (data & 0x1) == 0;\n                //Exception to the GBC identifying code:\n                if (parentObj.name + parentObj.gameCode + parentObj.ROM[0x143] == \"Game and Watch 50\") {\n                    parentObj.cGBC = true;\n                    $6de83094d3815a3f$var$cout(\"Created a boot exception for Game and Watch Gallery 2 (GBC ID byte is wrong on the cartridge).\", 1);\n                }\n                $6de83094d3815a3f$var$cout(\"Booted to GBC Mode: \" + parentObj.cGBC, 0);\n            }\n            parentObj.memory[0xFF6C] = data;\n        };\n    } else //Lockout the ROMs from accessing the BOOT ROM control register:\n    this.memoryHighWriter[0x50] = this.memoryWriter[0xFF50] = this.cartIgnoreWrite;\n};\n//Helper Functions\n$6de83094d3815a3f$var$GameBoyCore.prototype.toTypedArray = function(baseArray, memtype) {\n    try {\n        if ($2a65eeefd956ad48$exports[5]) return baseArray;\n        if (!baseArray || !baseArray.length) return [];\n        var length = baseArray.length;\n        switch(memtype){\n            case \"uint8\":\n                var typedArrayTemp = new Uint8Array(length);\n                break;\n            case \"int8\":\n                var typedArrayTemp = new Int8Array(length);\n                break;\n            case \"int32\":\n                var typedArrayTemp = new Int32Array(length);\n                break;\n            case \"float32\":\n                var typedArrayTemp = new Float32Array(length);\n        }\n        for(var index = 0; index < length; index++)typedArrayTemp[index] = baseArray[index];\n        return typedArrayTemp;\n    } catch (error) {\n        $6de83094d3815a3f$var$cout(\"Could not convert an array to a typed array: \" + error.message, 1);\n        return baseArray;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.fromTypedArray = function(baseArray) {\n    try {\n        if (!baseArray || !baseArray.length) return [];\n        var arrayTemp = [];\n        for(var index = 0; index < baseArray.length; ++index)arrayTemp[index] = baseArray[index];\n        return arrayTemp;\n    } catch (error) {\n        $6de83094d3815a3f$var$cout(\"Conversion from a typed array failed: \" + error.message, 1);\n        return baseArray;\n    }\n};\n$6de83094d3815a3f$var$GameBoyCore.prototype.getTypedArray = function(length, defaultValue, numberType) {\n    try {\n        if ($2a65eeefd956ad48$exports[5]) throw new Error(\"Settings forced typed arrays to be disabled.\");\n        switch(numberType){\n            case \"int8\":\n                var arrayHandle = new Int8Array(length);\n                break;\n            case \"uint8\":\n                var arrayHandle = new Uint8Array(length);\n                break;\n            case \"int32\":\n                var arrayHandle = new Int32Array(length);\n                break;\n            case \"float32\":\n                var arrayHandle = new Float32Array(length);\n        }\n        if (defaultValue != 0) {\n            var index = 0;\n            while(index < length)arrayHandle[index++] = defaultValue;\n        }\n    } catch (error) {\n        $6de83094d3815a3f$var$cout(\"Could not convert an array to a typed array: \" + error.message, 1);\n        var arrayHandle = [];\n        var index = 0;\n        while(index < length)arrayHandle[index++] = defaultValue;\n    }\n    return arrayHandle;\n};\n$6de83094d3815a3f$exports = $6de83094d3815a3f$var$GameBoyCore; //  LocalWords:  saveSRAMState\n\n\nconst $205d8b7d214f5014$var$KEYMAP = {\n    RIGHT: 0,\n    LEFT: 1,\n    UP: 2,\n    DOWN: 3,\n    A: 4,\n    B: 5,\n    SELECT: 6,\n    START: 7\n};\nconst $205d8b7d214f5014$var$PRIVATE = \"_\" + $cfae44f0dfdf62c0$exports.hrtime().join(\".\");\nfunction $205d8b7d214f5014$var$Interface() {\n    let _that = this[$205d8b7d214f5014$var$PRIVATE] = {\n        __proto__: $205d8b7d214f5014$var$Interface._prototype,\n        gameboy: null,\n        frames: 0,\n        pressed: new Array(Object.keys($205d8b7d214f5014$var$KEYMAP).length)\n    };\n    _that[$205d8b7d214f5014$var$PRIVATE] = _that;\n}\n$205d8b7d214f5014$var$Interface._prototype = {\n    //Check to make sure the gameboy object has been created.\n    initialized: function() {\n        let _that = this[$205d8b7d214f5014$var$PRIVATE];\n        return typeof _that.gameboy === \"object\" && _that.gameboy != null;\n    },\n    /*\n     *Make sure that the emulator is \"running\" (note that this is different than play/pause)\n     *Think of it like turning the key in your ignition before you start driving your car\n     *TODO: does `true` mean it's running or does `true` mean it's stopped?\n     */ running: function() {\n        let _that = this[$205d8b7d214f5014$var$PRIVATE];\n        return (_that.gameboy.stopEmulator & 2) == 0;\n    },\n    /*\n     * Presses or releases a key\n     * - note that in the gameboy core, a key will stay pressed until it has been explicitly released.\n     * - will do nothing if the emulator is running\n     *\n     * @param keycode 1-8 number of the key to press (see Interface.KEYCODES)\n     * @param `true` to press key, `false` to release\n     */ sendKey: function(keycode, down) {\n        let _that = this[$205d8b7d214f5014$var$PRIVATE];\n        if (_that.initialized() && _that.running()) _that.gameboy.JoyPadEvent(keycode, down);\n    },\n    //Stop emulator, reset relevant variables\n    shutdownEmulation: function() {\n        let _that = this[$205d8b7d214f5014$var$PRIVATE];\n        if (_that.initialized() && _that.running()) {\n            _that.gameboy.stopEmulator |= 2;\n            _that.frames = 0; //Reset internal variables\n        }\n    }\n};\n$205d8b7d214f5014$var$Interface.prototype = {\n    constructor: $205d8b7d214f5014$var$Interface,\n    /*\n     * Load a ROM - like popping in a new cartridge\n     * - Won't do anything if the emulator hasn't been initialized.\n     *\n     * TODO: better documentation on what ROMs are and how they should be formatted.\n     */ loadRom: function(ROM, saveData) {\n        let that = this;\n        let _that = this[$205d8b7d214f5014$var$PRIVATE];\n        // if (!_that.initialized()) {\n        //     return false;\n        // }\n        //TODO: autosave last state?\n        _that.shutdownEmulation(); //Will shut down emulator if it's still running.\n        _that.gameboy = new $6de83094d3815a3f$exports(ROM);\n        _that.gameboy.openMBC = function(title) {\n            /* TODO: you can load in from a specific title? Kind of cool, I guess. */ return saveData || [];\n        };\n        //Start emulator (some logic in here that needs to be documented)\n        _that.gameboy.start();\n        _that.gameboy.stopEmulator &= 1;\n        _that.gameboy.iterations = 0;\n        return true;\n    },\n    /*\n     * Emulates a single frame\n     *\n     * TODO: add documentation for imageData\n     * @param partial - DEPRECATED - whether or not to render the entire screen or just the changed bits\n     * @returns Array - image data for that frame, which can later be converted into a canvas writeable format\n     */ doFrame: function(partial) {\n        let _that = this[$205d8b7d214f5014$var$PRIVATE];\n        //Press required keys\n        for(let i = _that.pressed.length - 1; i >= 0; i--)if (_that.pressed[i]) _that.sendKey(i, true);\n        _that.gameboy.frameDone = false;\n        while(!_that.gameboy.frameDone)_that.gameboy.run(); //Run internal logic until the entire frame as finished.\n        //Release all keys\n        for(let i = _that.pressed.length - 1; i >= 0; i--){\n            _that.pressed[i] = false;\n            _that.sendKey(i, false);\n        }\n        ++_that.frames;\n        return partial ? _that.gameboy.partialScreen : _that.gameboy.currentScreen;\n    },\n    /*\n     * Pass in an array of keys you want pressed\n     * - this array should be propogated with values from ``Interface.KEYMAP``\n     * - you can not undo a press. Once a key is pressed it stays pressed until the end of the frame.\n     */ pressKeys: function(keys) {\n        keys = keys || [];\n        let that = this;\n        for(let i = keys.length - 1; i >= 0; i--)that.pressKey(keys[i]);\n    },\n    /*\n     * Presses a key corresponding with ``Interface.KEYMAP``\n     * - you can not undo a press. Once a key is pressed it stays pressed until the end of the frame.\n     */ pressKey: function(key) {\n        let _that = this[$205d8b7d214f5014$var$PRIVATE];\n        if (typeof key === \"string\") key = $205d8b7d214f5014$var$KEYMAP[key.toUpperCase()];\n        if (key < _that.pressed.length && key != null) _that.pressed[key] = true;\n    },\n    /*\n     * Returns an array of all currently pressed keys\n     * - built using the enum ``Interface.KEYMAP``\n     */ getKeys: function() {\n        let _that = this[$205d8b7d214f5014$var$PRIVATE];\n        return _that.pressed.slice(0);\n    },\n    getScreen: function() {\n        var _that = this[$205d8b7d214f5014$var$PRIVATE];\n        return _that.gameboy.currentScreen;\n    },\n    /*\n     * Gets a block of memory, you can specify a start and an end if you want\n     * - this is an expensive operation and should be called sparingly\n     *\n     * TODO perf test ``slice`` vs a ``for`` loop\n     */ getMemory: function(start, end) {\n        let _that = this[$205d8b7d214f5014$var$PRIVATE];\n        start = start || 0;\n        end = end || _that.gameboy.memory.length - 1;\n        start = Math.max(start, 0);\n        end = Math.min(end, _that.gameboy.memory.length - 1);\n        if (start === 0 && end === _that.gameboy.memory.length - 1) return _that.gameboy.memory;\n        return _that.gameboy.memory.slice(start, end); //Why are you doing this functionally instead of just returning the entire object?\n    //Is it for speed?\n    },\n    getAudio: function() {\n        let _that = this[$205d8b7d214f5014$var$PRIVATE];\n        return _that.gameboy.audioBuffer;\n    },\n    getSaveData: function() {\n        let _that = this[$205d8b7d214f5014$var$PRIVATE];\n        return _that.gameboy.saveSRAMState();\n    },\n    setMemory: function(start, data) {\n        let _that = this[$205d8b7d214f5014$var$PRIVATE];\n        start = Math.max(start, 0);\n        for(let i = 0; i < start.length; i++)_that.gameboy.memory[start + i] = data[i];\n    }\n};\n$205d8b7d214f5014$var$Interface.KEYMAP = $205d8b7d214f5014$var$KEYMAP;\n$205d8b7d214f5014$exports = $205d8b7d214f5014$var$Interface;\n\n\nvar $b491f7ab24cc727b$exports = {};\n\"use strict\";\n$b491f7ab24cc727b$exports = function() {\n    throw new Error(\"ws does not work in the browser. Browser clients must use the native WebSocket object\");\n};\n\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */ /* eslint-disable no-proto */ var $51861dfc7ca9d588$export$a143d493d941bafc;\nvar $51861dfc7ca9d588$export$e4cf37d7f6fb9e0a;\nvar $51861dfc7ca9d588$export$f99ded8fe4b79145;\nvar $51861dfc7ca9d588$export$599f31c3813fae4d;\n\"use strict\";\nvar $eeb0961446aae8e3$export$a48f0734ac7c2329;\nvar $eeb0961446aae8e3$export$d622b2ad8d90c771;\nvar $eeb0961446aae8e3$export$6100ba28696e12de;\n\"use strict\";\n$eeb0961446aae8e3$export$a48f0734ac7c2329 = $eeb0961446aae8e3$var$byteLength;\n$eeb0961446aae8e3$export$d622b2ad8d90c771 = $eeb0961446aae8e3$var$toByteArray;\n$eeb0961446aae8e3$export$6100ba28696e12de = $eeb0961446aae8e3$var$fromByteArray;\nvar $eeb0961446aae8e3$var$lookup = [];\nvar $eeb0961446aae8e3$var$revLookup = [];\nvar $eeb0961446aae8e3$var$Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\nvar $eeb0961446aae8e3$var$code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfor(var $eeb0961446aae8e3$var$i = 0, $eeb0961446aae8e3$var$len = $eeb0961446aae8e3$var$code.length; $eeb0961446aae8e3$var$i < $eeb0961446aae8e3$var$len; ++$eeb0961446aae8e3$var$i){\n    $eeb0961446aae8e3$var$lookup[$eeb0961446aae8e3$var$i] = $eeb0961446aae8e3$var$code[$eeb0961446aae8e3$var$i];\n    $eeb0961446aae8e3$var$revLookup[$eeb0961446aae8e3$var$code.charCodeAt($eeb0961446aae8e3$var$i)] = $eeb0961446aae8e3$var$i;\n}\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\n$eeb0961446aae8e3$var$revLookup[\"-\".charCodeAt(0)] = 62;\n$eeb0961446aae8e3$var$revLookup[\"_\".charCodeAt(0)] = 63;\nfunction $eeb0961446aae8e3$var$getLens(b64) {\n    var len = b64.length;\n    if (len % 4 > 0) throw new Error(\"Invalid string. Length must be a multiple of 4\");\n    // Trim off extra bytes after placeholder bytes are found\n    // See: https://github.com/beatgammit/base64-js/issues/42\n    var validLen = b64.indexOf(\"=\");\n    if (validLen === -1) validLen = len;\n    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n    return [\n        validLen,\n        placeHoldersLen\n    ];\n}\n// base64 is 4/3 + up to two characters of the original data\nfunction $eeb0961446aae8e3$var$byteLength(b64) {\n    var lens = $eeb0961446aae8e3$var$getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction $eeb0961446aae8e3$var$_byteLength(b64, validLen, placeHoldersLen) {\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction $eeb0961446aae8e3$var$toByteArray(b64) {\n    var tmp;\n    var lens = $eeb0961446aae8e3$var$getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    var arr = new $eeb0961446aae8e3$var$Arr($eeb0961446aae8e3$var$_byteLength(b64, validLen, placeHoldersLen));\n    var curByte = 0;\n    // if there are placeholders, only get up to the last complete 4 chars\n    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n    var i;\n    for(i = 0; i < len; i += 4){\n        tmp = $eeb0961446aae8e3$var$revLookup[b64.charCodeAt(i)] << 18 | $eeb0961446aae8e3$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $eeb0961446aae8e3$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $eeb0961446aae8e3$var$revLookup[b64.charCodeAt(i + 3)];\n        arr[curByte++] = tmp >> 16 & 0xFF;\n        arr[curByte++] = tmp >> 8 & 0xFF;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    if (placeHoldersLen === 2) {\n        tmp = $eeb0961446aae8e3$var$revLookup[b64.charCodeAt(i)] << 2 | $eeb0961446aae8e3$var$revLookup[b64.charCodeAt(i + 1)] >> 4;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    if (placeHoldersLen === 1) {\n        tmp = $eeb0961446aae8e3$var$revLookup[b64.charCodeAt(i)] << 10 | $eeb0961446aae8e3$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $eeb0961446aae8e3$var$revLookup[b64.charCodeAt(i + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 0xFF;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    return arr;\n}\nfunction $eeb0961446aae8e3$var$tripletToBase64(num) {\n    return $eeb0961446aae8e3$var$lookup[num >> 18 & 0x3F] + $eeb0961446aae8e3$var$lookup[num >> 12 & 0x3F] + $eeb0961446aae8e3$var$lookup[num >> 6 & 0x3F] + $eeb0961446aae8e3$var$lookup[num & 0x3F];\n}\nfunction $eeb0961446aae8e3$var$encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n    for(var i = start; i < end; i += 3){\n        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n        output.push($eeb0961446aae8e3$var$tripletToBase64(tmp));\n    }\n    return output.join(\"\");\n}\nfunction $eeb0961446aae8e3$var$fromByteArray(uint8) {\n    var tmp;\n    var len = uint8.length;\n    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n    ;\n    var parts = [];\n    var maxChunkLength = 16383 // must be multiple of 3\n    ;\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($eeb0961446aae8e3$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    if (extraBytes === 1) {\n        tmp = uint8[len - 1];\n        parts.push($eeb0961446aae8e3$var$lookup[tmp >> 2] + $eeb0961446aae8e3$var$lookup[tmp << 4 & 0x3F] + \"==\");\n    } else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n        parts.push($eeb0961446aae8e3$var$lookup[tmp >> 10] + $eeb0961446aae8e3$var$lookup[tmp >> 4 & 0x3F] + $eeb0961446aae8e3$var$lookup[tmp << 2 & 0x3F] + \"=\");\n    }\n    return parts.join(\"\");\n}\n\n\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $7221566bd4d49f44$export$aafa59e2e03f2942;\nvar $7221566bd4d49f44$export$68d8715fc104d294;\n$7221566bd4d49f44$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {\n    var e, m;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var nBits = -7;\n    var i = isLE ? nBytes - 1 : 0;\n    var d = isLE ? -1 : 1;\n    var s = buffer[offset + i];\n    i += d;\n    e = s & (1 << -nBits) - 1;\n    s >>= -nBits;\n    nBits += eLen;\n    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\n    m = e & (1 << -nBits) - 1;\n    e >>= -nBits;\n    nBits += mLen;\n    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\n    if (e === 0) e = 1 - eBias;\n    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;\n    else {\n        m = m + Math.pow(2, mLen);\n        e = e - eBias;\n    }\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n$7221566bd4d49f44$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {\n    var e, m, c;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n    var i = isLE ? 0 : nBytes - 1;\n    var d = isLE ? 1 : -1;\n    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n    value = Math.abs(value);\n    if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0;\n        e = eMax;\n    } else {\n        e = Math.floor(Math.log(value) / Math.LN2);\n        if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n        }\n        if (e + eBias >= 1) value += rt / c;\n        else value += rt * Math.pow(2, 1 - eBias);\n        if (value * c >= 2) {\n            e++;\n            c /= 2;\n        }\n        if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n        } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n        } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n        }\n    }\n    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\n    e = e << mLen | m;\n    eLen += mLen;\n    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\n    buffer[offset + i - d] |= s * 128;\n};\n\n\nconst $51861dfc7ca9d588$var$customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" // eslint-disable-line dot-notation\n ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") // eslint-disable-line dot-notation\n : null;\n$51861dfc7ca9d588$export$a143d493d941bafc = $51861dfc7ca9d588$var$Buffer;\n$51861dfc7ca9d588$export$e4cf37d7f6fb9e0a = $51861dfc7ca9d588$var$SlowBuffer;\n$51861dfc7ca9d588$export$f99ded8fe4b79145 = 50;\nconst $51861dfc7ca9d588$var$K_MAX_LENGTH = 0x7fffffff;\n$51861dfc7ca9d588$export$599f31c3813fae4d = $51861dfc7ca9d588$var$K_MAX_LENGTH;\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */ $51861dfc7ca9d588$var$Buffer.TYPED_ARRAY_SUPPORT = $51861dfc7ca9d588$var$typedArraySupport();\nif (!$51861dfc7ca9d588$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\nfunction $51861dfc7ca9d588$var$typedArraySupport() {\n    // Can typed array instances can be augmented?\n    try {\n        const arr = new Uint8Array(1);\n        const proto = {\n            foo: function() {\n                return 42;\n            }\n        };\n        Object.setPrototypeOf(proto, Uint8Array.prototype);\n        Object.setPrototypeOf(arr, proto);\n        return arr.foo() === 42;\n    } catch (e) {\n        return false;\n    }\n}\nObject.defineProperty($51861dfc7ca9d588$var$Buffer.prototype, \"parent\", {\n    enumerable: true,\n    get: function() {\n        if (!$51861dfc7ca9d588$var$Buffer.isBuffer(this)) return undefined;\n        return this.buffer;\n    }\n});\nObject.defineProperty($51861dfc7ca9d588$var$Buffer.prototype, \"offset\", {\n    enumerable: true,\n    get: function() {\n        if (!$51861dfc7ca9d588$var$Buffer.isBuffer(this)) return undefined;\n        return this.byteOffset;\n    }\n});\nfunction $51861dfc7ca9d588$var$createBuffer(length) {\n    if (length > $51861dfc7ca9d588$var$K_MAX_LENGTH) throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n    // Return an augmented `Uint8Array` instance\n    const buf = new Uint8Array(length);\n    Object.setPrototypeOf(buf, $51861dfc7ca9d588$var$Buffer.prototype);\n    return buf;\n}\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */ function $51861dfc7ca9d588$var$Buffer(arg, encodingOrOffset, length) {\n    // Common case.\n    if (typeof arg === \"number\") {\n        if (typeof encodingOrOffset === \"string\") throw new TypeError('The \"string\" argument must be of type string. Received type number');\n        return $51861dfc7ca9d588$var$allocUnsafe(arg);\n    }\n    return $51861dfc7ca9d588$var$from(arg, encodingOrOffset, length);\n}\n$51861dfc7ca9d588$var$Buffer.poolSize = 8192 // not used by this implementation\n;\nfunction $51861dfc7ca9d588$var$from(value, encodingOrOffset, length) {\n    if (typeof value === \"string\") return $51861dfc7ca9d588$var$fromString(value, encodingOrOffset);\n    if (ArrayBuffer.isView(value)) return $51861dfc7ca9d588$var$fromArrayView(value);\n    if (value == null) throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value);\n    if ($51861dfc7ca9d588$var$isInstance(value, ArrayBuffer) || value && $51861dfc7ca9d588$var$isInstance(value.buffer, ArrayBuffer)) return $51861dfc7ca9d588$var$fromArrayBuffer(value, encodingOrOffset, length);\n    if (typeof SharedArrayBuffer !== \"undefined\" && ($51861dfc7ca9d588$var$isInstance(value, SharedArrayBuffer) || value && $51861dfc7ca9d588$var$isInstance(value.buffer, SharedArrayBuffer))) return $51861dfc7ca9d588$var$fromArrayBuffer(value, encodingOrOffset, length);\n    if (typeof value === \"number\") throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n    const valueOf = value.valueOf && value.valueOf();\n    if (valueOf != null && valueOf !== value) return $51861dfc7ca9d588$var$Buffer.from(valueOf, encodingOrOffset, length);\n    const b = $51861dfc7ca9d588$var$fromObject(value);\n    if (b) return b;\n    if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") return $51861dfc7ca9d588$var$Buffer.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n    throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value);\n}\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/ $51861dfc7ca9d588$var$Buffer.from = function(value, encodingOrOffset, length) {\n    return $51861dfc7ca9d588$var$from(value, encodingOrOffset, length);\n};\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf($51861dfc7ca9d588$var$Buffer.prototype, Uint8Array.prototype);\nObject.setPrototypeOf($51861dfc7ca9d588$var$Buffer, Uint8Array);\nfunction $51861dfc7ca9d588$var$assertSize(size) {\n    if (typeof size !== \"number\") throw new TypeError('\"size\" argument must be of type number');\n    else if (size < 0) throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n}\nfunction $51861dfc7ca9d588$var$alloc(size, fill, encoding) {\n    $51861dfc7ca9d588$var$assertSize(size);\n    if (size <= 0) return $51861dfc7ca9d588$var$createBuffer(size);\n    if (fill !== undefined) // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === \"string\" ? $51861dfc7ca9d588$var$createBuffer(size).fill(fill, encoding) : $51861dfc7ca9d588$var$createBuffer(size).fill(fill);\n    return $51861dfc7ca9d588$var$createBuffer(size);\n}\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/ $51861dfc7ca9d588$var$Buffer.alloc = function(size, fill, encoding) {\n    return $51861dfc7ca9d588$var$alloc(size, fill, encoding);\n};\nfunction $51861dfc7ca9d588$var$allocUnsafe(size) {\n    $51861dfc7ca9d588$var$assertSize(size);\n    return $51861dfc7ca9d588$var$createBuffer(size < 0 ? 0 : $51861dfc7ca9d588$var$checked(size) | 0);\n}\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */ $51861dfc7ca9d588$var$Buffer.allocUnsafe = function(size) {\n    return $51861dfc7ca9d588$var$allocUnsafe(size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */ $51861dfc7ca9d588$var$Buffer.allocUnsafeSlow = function(size) {\n    return $51861dfc7ca9d588$var$allocUnsafe(size);\n};\nfunction $51861dfc7ca9d588$var$fromString(string, encoding) {\n    if (typeof encoding !== \"string\" || encoding === \"\") encoding = \"utf8\";\n    if (!$51861dfc7ca9d588$var$Buffer.isEncoding(encoding)) throw new TypeError(\"Unknown encoding: \" + encoding);\n    const length = $51861dfc7ca9d588$var$byteLength(string, encoding) | 0;\n    let buf = $51861dfc7ca9d588$var$createBuffer(length);\n    const actual = buf.write(string, encoding);\n    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual);\n    return buf;\n}\nfunction $51861dfc7ca9d588$var$fromArrayLike(array) {\n    const length = array.length < 0 ? 0 : $51861dfc7ca9d588$var$checked(array.length) | 0;\n    const buf = $51861dfc7ca9d588$var$createBuffer(length);\n    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;\n    return buf;\n}\nfunction $51861dfc7ca9d588$var$fromArrayView(arrayView) {\n    if ($51861dfc7ca9d588$var$isInstance(arrayView, Uint8Array)) {\n        const copy = new Uint8Array(arrayView);\n        return $51861dfc7ca9d588$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n    }\n    return $51861dfc7ca9d588$var$fromArrayLike(arrayView);\n}\nfunction $51861dfc7ca9d588$var$fromArrayBuffer(array, byteOffset, length) {\n    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('\"offset\" is outside of buffer bounds');\n    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('\"length\" is outside of buffer bounds');\n    let buf;\n    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);\n    else if (length === undefined) buf = new Uint8Array(array, byteOffset);\n    else buf = new Uint8Array(array, byteOffset, length);\n    // Return an augmented `Uint8Array` instance\n    Object.setPrototypeOf(buf, $51861dfc7ca9d588$var$Buffer.prototype);\n    return buf;\n}\nfunction $51861dfc7ca9d588$var$fromObject(obj) {\n    if ($51861dfc7ca9d588$var$Buffer.isBuffer(obj)) {\n        const len = $51861dfc7ca9d588$var$checked(obj.length) | 0;\n        const buf = $51861dfc7ca9d588$var$createBuffer(len);\n        if (buf.length === 0) return buf;\n        obj.copy(buf, 0, 0, len);\n        return buf;\n    }\n    if (obj.length !== undefined) {\n        if (typeof obj.length !== \"number\" || $51861dfc7ca9d588$var$numberIsNaN(obj.length)) return $51861dfc7ca9d588$var$createBuffer(0);\n        return $51861dfc7ca9d588$var$fromArrayLike(obj);\n    }\n    if (obj.type === \"Buffer\" && Array.isArray(obj.data)) return $51861dfc7ca9d588$var$fromArrayLike(obj.data);\n}\nfunction $51861dfc7ca9d588$var$checked(length) {\n    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n    // length is NaN (which is otherwise coerced to zero.)\n    if (length >= $51861dfc7ca9d588$var$K_MAX_LENGTH) throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + $51861dfc7ca9d588$var$K_MAX_LENGTH.toString(16) + \" bytes\");\n    return length | 0;\n}\nfunction $51861dfc7ca9d588$var$SlowBuffer(length) {\n    if (+length != length) length = 0;\n    return $51861dfc7ca9d588$var$Buffer.alloc(+length);\n}\n$51861dfc7ca9d588$var$Buffer.isBuffer = function isBuffer(b) {\n    return b != null && b._isBuffer === true && b !== $51861dfc7ca9d588$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n    ;\n};\n$51861dfc7ca9d588$var$Buffer.compare = function compare(a, b) {\n    if ($51861dfc7ca9d588$var$isInstance(a, Uint8Array)) a = $51861dfc7ca9d588$var$Buffer.from(a, a.offset, a.byteLength);\n    if ($51861dfc7ca9d588$var$isInstance(b, Uint8Array)) b = $51861dfc7ca9d588$var$Buffer.from(b, b.offset, b.byteLength);\n    if (!$51861dfc7ca9d588$var$Buffer.isBuffer(a) || !$51861dfc7ca9d588$var$Buffer.isBuffer(b)) throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n    if (a === b) return 0;\n    let x = a.length;\n    let y = b.length;\n    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {\n        x = a[i];\n        y = b[i];\n        break;\n    }\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n};\n$51861dfc7ca9d588$var$Buffer.isEncoding = function isEncoding(encoding) {\n    switch(String(encoding).toLowerCase()){\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return true;\n        default:\n            return false;\n    }\n};\n$51861dfc7ca9d588$var$Buffer.concat = function concat(list, length) {\n    if (!Array.isArray(list)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n    if (list.length === 0) return $51861dfc7ca9d588$var$Buffer.alloc(0);\n    let i;\n    if (length === undefined) {\n        length = 0;\n        for(i = 0; i < list.length; ++i)length += list[i].length;\n    }\n    const buffer = $51861dfc7ca9d588$var$Buffer.allocUnsafe(length);\n    let pos = 0;\n    for(i = 0; i < list.length; ++i){\n        let buf = list[i];\n        if ($51861dfc7ca9d588$var$isInstance(buf, Uint8Array)) {\n            if (pos + buf.length > buffer.length) {\n                if (!$51861dfc7ca9d588$var$Buffer.isBuffer(buf)) buf = $51861dfc7ca9d588$var$Buffer.from(buf);\n                buf.copy(buffer, pos);\n            } else Uint8Array.prototype.set.call(buffer, buf, pos);\n        } else if (!$51861dfc7ca9d588$var$Buffer.isBuffer(buf)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n        else buf.copy(buffer, pos);\n        pos += buf.length;\n    }\n    return buffer;\n};\nfunction $51861dfc7ca9d588$var$byteLength(string, encoding) {\n    if ($51861dfc7ca9d588$var$Buffer.isBuffer(string)) return string.length;\n    if (ArrayBuffer.isView(string) || $51861dfc7ca9d588$var$isInstance(string, ArrayBuffer)) return string.byteLength;\n    if (typeof string !== \"string\") throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);\n    const len = string.length;\n    const mustMatch = arguments.length > 2 && arguments[2] === true;\n    if (!mustMatch && len === 0) return 0;\n    // Use a for loop to avoid recursion\n    let loweredCase = false;\n    for(;;)switch(encoding){\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n            return len;\n        case \"utf8\":\n        case \"utf-8\":\n            return $51861dfc7ca9d588$var$utf8ToBytes(string).length;\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return len * 2;\n        case \"hex\":\n            return len >>> 1;\n        case \"base64\":\n            return $51861dfc7ca9d588$var$base64ToBytes(string).length;\n        default:\n            if (loweredCase) return mustMatch ? -1 : $51861dfc7ca9d588$var$utf8ToBytes(string).length // assume utf8\n            ;\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n    }\n}\n$51861dfc7ca9d588$var$Buffer.byteLength = $51861dfc7ca9d588$var$byteLength;\nfunction $51861dfc7ca9d588$var$slowToString(encoding, start, end) {\n    let loweredCase = false;\n    // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n    // property of a typed array.\n    // This behaves neither like String nor Uint8Array in that we set start/end\n    // to their upper/lower bounds if the value passed is out of range.\n    // undefined is handled specially as per ECMA-262 6th Edition,\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n    if (start === undefined || start < 0) start = 0;\n    // Return early if start > this.length. Done here to prevent potential uint32\n    // coercion fail below.\n    if (start > this.length) return \"\";\n    if (end === undefined || end > this.length) end = this.length;\n    if (end <= 0) return \"\";\n    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n    end >>>= 0;\n    start >>>= 0;\n    if (end <= start) return \"\";\n    if (!encoding) encoding = \"utf8\";\n    while(true)switch(encoding){\n        case \"hex\":\n            return $51861dfc7ca9d588$var$hexSlice(this, start, end);\n        case \"utf8\":\n        case \"utf-8\":\n            return $51861dfc7ca9d588$var$utf8Slice(this, start, end);\n        case \"ascii\":\n            return $51861dfc7ca9d588$var$asciiSlice(this, start, end);\n        case \"latin1\":\n        case \"binary\":\n            return $51861dfc7ca9d588$var$latin1Slice(this, start, end);\n        case \"base64\":\n            return $51861dfc7ca9d588$var$base64Slice(this, start, end);\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return $51861dfc7ca9d588$var$utf16leSlice(this, start, end);\n        default:\n            if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (encoding + \"\").toLowerCase();\n            loweredCase = true;\n    }\n}\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\n$51861dfc7ca9d588$var$Buffer.prototype._isBuffer = true;\nfunction $51861dfc7ca9d588$var$swap(b, n, m) {\n    const i = b[n];\n    b[n] = b[m];\n    b[m] = i;\n}\n$51861dfc7ca9d588$var$Buffer.prototype.swap16 = function swap16() {\n    const len = this.length;\n    if (len % 2 !== 0) throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n    for(let i = 0; i < len; i += 2)$51861dfc7ca9d588$var$swap(this, i, i + 1);\n    return this;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.swap32 = function swap32() {\n    const len = this.length;\n    if (len % 4 !== 0) throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n    for(let i = 0; i < len; i += 4){\n        $51861dfc7ca9d588$var$swap(this, i, i + 3);\n        $51861dfc7ca9d588$var$swap(this, i + 1, i + 2);\n    }\n    return this;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.swap64 = function swap64() {\n    const len = this.length;\n    if (len % 8 !== 0) throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n    for(let i = 0; i < len; i += 8){\n        $51861dfc7ca9d588$var$swap(this, i, i + 7);\n        $51861dfc7ca9d588$var$swap(this, i + 1, i + 6);\n        $51861dfc7ca9d588$var$swap(this, i + 2, i + 5);\n        $51861dfc7ca9d588$var$swap(this, i + 3, i + 4);\n    }\n    return this;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.toString = function toString() {\n    const length = this.length;\n    if (length === 0) return \"\";\n    if (arguments.length === 0) return $51861dfc7ca9d588$var$utf8Slice(this, 0, length);\n    return $51861dfc7ca9d588$var$slowToString.apply(this, arguments);\n};\n$51861dfc7ca9d588$var$Buffer.prototype.toLocaleString = $51861dfc7ca9d588$var$Buffer.prototype.toString;\n$51861dfc7ca9d588$var$Buffer.prototype.equals = function equals(b) {\n    if (!$51861dfc7ca9d588$var$Buffer.isBuffer(b)) throw new TypeError(\"Argument must be a Buffer\");\n    if (this === b) return true;\n    return $51861dfc7ca9d588$var$Buffer.compare(this, b) === 0;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.inspect = function inspect() {\n    let str = \"\";\n    const max = $51861dfc7ca9d588$export$f99ded8fe4b79145;\n    str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n    if (this.length > max) str += \" ... \";\n    return \"<Buffer \" + str + \">\";\n};\nif ($51861dfc7ca9d588$var$customInspectSymbol) $51861dfc7ca9d588$var$Buffer.prototype[$51861dfc7ca9d588$var$customInspectSymbol] = $51861dfc7ca9d588$var$Buffer.prototype.inspect;\n$51861dfc7ca9d588$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n    if ($51861dfc7ca9d588$var$isInstance(target, Uint8Array)) target = $51861dfc7ca9d588$var$Buffer.from(target, target.offset, target.byteLength);\n    if (!$51861dfc7ca9d588$var$Buffer.isBuffer(target)) throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);\n    if (start === undefined) start = 0;\n    if (end === undefined) end = target ? target.length : 0;\n    if (thisStart === undefined) thisStart = 0;\n    if (thisEnd === undefined) thisEnd = this.length;\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError(\"out of range index\");\n    if (thisStart >= thisEnd && start >= end) return 0;\n    if (thisStart >= thisEnd) return -1;\n    if (start >= end) return 1;\n    start >>>= 0;\n    end >>>= 0;\n    thisStart >>>= 0;\n    thisEnd >>>= 0;\n    if (this === target) return 0;\n    let x = thisEnd - thisStart;\n    let y = end - start;\n    const len = Math.min(x, y);\n    const thisCopy = this.slice(thisStart, thisEnd);\n    const targetCopy = target.slice(start, end);\n    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {\n        x = thisCopy[i];\n        y = targetCopy[i];\n        break;\n    }\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n};\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction $51861dfc7ca9d588$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n    // Empty buffer means no match\n    if (buffer.length === 0) return -1;\n    // Normalize byteOffset\n    if (typeof byteOffset === \"string\") {\n        encoding = byteOffset;\n        byteOffset = 0;\n    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;\n    else if (byteOffset < -2147483648) byteOffset = -2147483648;\n    byteOffset = +byteOffset // Coerce to Number.\n    ;\n    if ($51861dfc7ca9d588$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : buffer.length - 1;\n    // Normalize byteOffset: negative offsets start from the end of the buffer\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n    if (byteOffset >= buffer.length) {\n        if (dir) return -1;\n        else byteOffset = buffer.length - 1;\n    } else if (byteOffset < 0) {\n        if (dir) byteOffset = 0;\n        else return -1;\n    }\n    // Normalize val\n    if (typeof val === \"string\") val = $51861dfc7ca9d588$var$Buffer.from(val, encoding);\n    // Finally, search either indexOf (if dir is true) or lastIndexOf\n    if ($51861dfc7ca9d588$var$Buffer.isBuffer(val)) {\n        // Special case: looking for empty string/buffer always fails\n        if (val.length === 0) return -1;\n        return $51861dfc7ca9d588$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n    } else if (typeof val === \"number\") {\n        val = val & 0xFF // Search for a byte value [0-255]\n        ;\n        if (typeof Uint8Array.prototype.indexOf === \"function\") {\n            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n        }\n        return $51861dfc7ca9d588$var$arrayIndexOf(buffer, [\n            val\n        ], byteOffset, encoding, dir);\n    }\n    throw new TypeError(\"val must be string, number or Buffer\");\n}\nfunction $51861dfc7ca9d588$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n    let indexSize = 1;\n    let arrLength = arr.length;\n    let valLength = val.length;\n    if (encoding !== undefined) {\n        encoding = String(encoding).toLowerCase();\n        if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n            if (arr.length < 2 || val.length < 2) return -1;\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n        }\n    }\n    function read(buf, i) {\n        if (indexSize === 1) return buf[i];\n        else return buf.readUInt16BE(i * indexSize);\n    }\n    let i;\n    if (dir) {\n        let foundIndex = -1;\n        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n            if (foundIndex === -1) foundIndex = i;\n            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n        } else {\n            if (foundIndex !== -1) i -= i - foundIndex;\n            foundIndex = -1;\n        }\n    } else {\n        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n        for(i = byteOffset; i >= 0; i--){\n            let found = true;\n            for(let j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {\n                found = false;\n                break;\n            }\n            if (found) return i;\n        }\n    }\n    return -1;\n}\n$51861dfc7ca9d588$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {\n    return this.indexOf(val, byteOffset, encoding) !== -1;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n    return $51861dfc7ca9d588$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\n$51861dfc7ca9d588$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n    return $51861dfc7ca9d588$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\nfunction $51861dfc7ca9d588$var$hexWrite(buf, string, offset, length) {\n    offset = Number(offset) || 0;\n    const remaining = buf.length - offset;\n    if (!length) length = remaining;\n    else {\n        length = Number(length);\n        if (length > remaining) length = remaining;\n    }\n    const strLen = string.length;\n    if (length > strLen / 2) length = strLen / 2;\n    let i;\n    for(i = 0; i < length; ++i){\n        const parsed = parseInt(string.substr(i * 2, 2), 16);\n        if ($51861dfc7ca9d588$var$numberIsNaN(parsed)) return i;\n        buf[offset + i] = parsed;\n    }\n    return i;\n}\nfunction $51861dfc7ca9d588$var$utf8Write(buf, string, offset, length) {\n    return $51861dfc7ca9d588$var$blitBuffer($51861dfc7ca9d588$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\nfunction $51861dfc7ca9d588$var$asciiWrite(buf, string, offset, length) {\n    return $51861dfc7ca9d588$var$blitBuffer($51861dfc7ca9d588$var$asciiToBytes(string), buf, offset, length);\n}\nfunction $51861dfc7ca9d588$var$base64Write(buf, string, offset, length) {\n    return $51861dfc7ca9d588$var$blitBuffer($51861dfc7ca9d588$var$base64ToBytes(string), buf, offset, length);\n}\nfunction $51861dfc7ca9d588$var$ucs2Write(buf, string, offset, length) {\n    return $51861dfc7ca9d588$var$blitBuffer($51861dfc7ca9d588$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\n$51861dfc7ca9d588$var$Buffer.prototype.write = function write(string, offset, length, encoding) {\n    // Buffer#write(string)\n    if (offset === undefined) {\n        encoding = \"utf8\";\n        length = this.length;\n        offset = 0;\n    // Buffer#write(string, encoding)\n    } else if (length === undefined && typeof offset === \"string\") {\n        encoding = offset;\n        length = this.length;\n        offset = 0;\n    // Buffer#write(string, offset[, length][, encoding])\n    } else if (isFinite(offset)) {\n        offset = offset >>> 0;\n        if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === undefined) encoding = \"utf8\";\n        } else {\n            encoding = length;\n            length = undefined;\n        }\n    } else throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n    const remaining = this.length - offset;\n    if (length === undefined || length > remaining) length = remaining;\n    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError(\"Attempt to write outside buffer bounds\");\n    if (!encoding) encoding = \"utf8\";\n    let loweredCase = false;\n    for(;;)switch(encoding){\n        case \"hex\":\n            return $51861dfc7ca9d588$var$hexWrite(this, string, offset, length);\n        case \"utf8\":\n        case \"utf-8\":\n            return $51861dfc7ca9d588$var$utf8Write(this, string, offset, length);\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n            return $51861dfc7ca9d588$var$asciiWrite(this, string, offset, length);\n        case \"base64\":\n            // Warning: maxLength not taken into account in base64Write\n            return $51861dfc7ca9d588$var$base64Write(this, string, offset, length);\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return $51861dfc7ca9d588$var$ucs2Write(this, string, offset, length);\n        default:\n            if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n    }\n};\n$51861dfc7ca9d588$var$Buffer.prototype.toJSON = function toJSON() {\n    return {\n        type: \"Buffer\",\n        data: Array.prototype.slice.call(this._arr || this, 0)\n    };\n};\nfunction $51861dfc7ca9d588$var$base64Slice(buf, start, end) {\n    if (start === 0 && end === buf.length) return $eeb0961446aae8e3$export$6100ba28696e12de(buf);\n    else return $eeb0961446aae8e3$export$6100ba28696e12de(buf.slice(start, end));\n}\nfunction $51861dfc7ca9d588$var$utf8Slice(buf, start, end) {\n    end = Math.min(buf.length, end);\n    const res = [];\n    let i = start;\n    while(i < end){\n        const firstByte = buf[i];\n        let codePoint = null;\n        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n        if (i + bytesPerSequence <= end) {\n            let secondByte, thirdByte, fourthByte, tempCodePoint;\n            switch(bytesPerSequence){\n                case 1:\n                    if (firstByte < 0x80) codePoint = firstByte;\n                    break;\n                case 2:\n                    secondByte = buf[i + 1];\n                    if ((secondByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;\n                    }\n                    break;\n                case 3:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;\n                    }\n                    break;\n                case 4:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    fourthByte = buf[i + 3];\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;\n                    }\n            }\n        }\n        if (codePoint === null) {\n            // we did not generate a valid codePoint so insert a\n            // replacement char (U+FFFD) and advance only 1 byte\n            codePoint = 0xFFFD;\n            bytesPerSequence = 1;\n        } else if (codePoint > 0xFFFF) {\n            // encode to utf16 (surrogate pair dance)\n            codePoint -= 0x10000;\n            res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n            codePoint = 0xDC00 | codePoint & 0x3FF;\n        }\n        res.push(codePoint);\n        i += bytesPerSequence;\n    }\n    return $51861dfc7ca9d588$var$decodeCodePointsArray(res);\n}\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst $51861dfc7ca9d588$var$MAX_ARGUMENTS_LENGTH = 0x1000;\nfunction $51861dfc7ca9d588$var$decodeCodePointsArray(codePoints) {\n    const len = codePoints.length;\n    if (len <= $51861dfc7ca9d588$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n    ;\n    // Decode in chunks to avoid \"call stack size exceeded\".\n    let res = \"\";\n    let i = 0;\n    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $51861dfc7ca9d588$var$MAX_ARGUMENTS_LENGTH));\n    return res;\n}\nfunction $51861dfc7ca9d588$var$asciiSlice(buf, start, end) {\n    let ret = \"\";\n    end = Math.min(buf.length, end);\n    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);\n    return ret;\n}\nfunction $51861dfc7ca9d588$var$latin1Slice(buf, start, end) {\n    let ret = \"\";\n    end = Math.min(buf.length, end);\n    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);\n    return ret;\n}\nfunction $51861dfc7ca9d588$var$hexSlice(buf, start, end) {\n    const len = buf.length;\n    if (!start || start < 0) start = 0;\n    if (!end || end < 0 || end > len) end = len;\n    let out = \"\";\n    for(let i = start; i < end; ++i)out += $51861dfc7ca9d588$var$hexSliceLookupTable[buf[i]];\n    return out;\n}\nfunction $51861dfc7ca9d588$var$utf16leSlice(buf, start, end) {\n    const bytes = buf.slice(start, end);\n    let res = \"\";\n    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n    return res;\n}\n$51861dfc7ca9d588$var$Buffer.prototype.slice = function slice(start, end) {\n    const len = this.length;\n    start = ~~start;\n    end = end === undefined ? len : ~~end;\n    if (start < 0) {\n        start += len;\n        if (start < 0) start = 0;\n    } else if (start > len) start = len;\n    if (end < 0) {\n        end += len;\n        if (end < 0) end = 0;\n    } else if (end > len) end = len;\n    if (end < start) end = start;\n    const newBuf = this.subarray(start, end);\n    // Return an augmented `Uint8Array` instance\n    Object.setPrototypeOf(newBuf, $51861dfc7ca9d588$var$Buffer.prototype);\n    return newBuf;\n};\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */ function $51861dfc7ca9d588$var$checkOffset(offset, ext, length) {\n    if (offset % 1 !== 0 || offset < 0) throw new RangeError(\"offset is not uint\");\n    if (offset + ext > length) throw new RangeError(\"Trying to access beyond buffer length\");\n}\n$51861dfc7ca9d588$var$Buffer.prototype.readUintLE = $51861dfc7ca9d588$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, byteLength, this.length);\n    let val = this[offset];\n    let mul = 1;\n    let i = 0;\n    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;\n    return val;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readUintBE = $51861dfc7ca9d588$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, byteLength, this.length);\n    let val = this[offset + --byteLength];\n    let mul = 1;\n    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;\n    return val;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readUint8 = $51861dfc7ca9d588$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, 1, this.length);\n    return this[offset];\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readUint16LE = $51861dfc7ca9d588$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, 2, this.length);\n    return this[offset] | this[offset + 1] << 8;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readUint16BE = $51861dfc7ca9d588$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, 2, this.length);\n    return this[offset] << 8 | this[offset + 1];\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readUint32LE = $51861dfc7ca9d588$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, 4, this.length);\n    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readUint32BE = $51861dfc7ca9d588$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, 4, this.length);\n    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readBigUInt64LE = $51861dfc7ca9d588$var$defineBigIntMethod(function readBigUInt64LE(offset) {\n    offset = offset >>> 0;\n    $51861dfc7ca9d588$var$validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) $51861dfc7ca9d588$var$boundsError(offset, this.length - 8);\n    const lo = first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n    return BigInt(lo) + (BigInt(hi) << BigInt(32));\n});\n$51861dfc7ca9d588$var$Buffer.prototype.readBigUInt64BE = $51861dfc7ca9d588$var$defineBigIntMethod(function readBigUInt64BE(offset) {\n    offset = offset >>> 0;\n    $51861dfc7ca9d588$var$validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) $51861dfc7ca9d588$var$boundsError(offset, this.length - 8);\n    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];\n    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last;\n    return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n});\n$51861dfc7ca9d588$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, byteLength, this.length);\n    let val = this[offset];\n    let mul = 1;\n    let i = 0;\n    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, byteLength, this.length);\n    let i = byteLength;\n    let mul = 1;\n    let val = this[offset + --i];\n    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, 1, this.length);\n    if (!(this[offset] & 0x80)) return this[offset];\n    return (0xff - this[offset] + 1) * -1;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, 2, this.length);\n    const val = this[offset] | this[offset + 1] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, 2, this.length);\n    const val = this[offset + 1] | this[offset] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, 4, this.length);\n    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, 4, this.length);\n    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readBigInt64LE = $51861dfc7ca9d588$var$defineBigIntMethod(function readBigInt64LE(offset) {\n    offset = offset >>> 0;\n    $51861dfc7ca9d588$var$validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) $51861dfc7ca9d588$var$boundsError(offset, this.length - 8);\n    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 2 ** 16 + (last << 24 // Overflow\n    );\n    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n});\n$51861dfc7ca9d588$var$Buffer.prototype.readBigInt64BE = $51861dfc7ca9d588$var$defineBigIntMethod(function readBigInt64BE(offset) {\n    offset = offset >>> 0;\n    $51861dfc7ca9d588$var$validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) $51861dfc7ca9d588$var$boundsError(offset, this.length - 8);\n    const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];\n    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last);\n});\n$51861dfc7ca9d588$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, 4, this.length);\n    return $7221566bd4d49f44$export$aafa59e2e03f2942(this, offset, true, 23, 4);\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, 4, this.length);\n    return $7221566bd4d49f44$export$aafa59e2e03f2942(this, offset, false, 23, 4);\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, 8, this.length);\n    return $7221566bd4d49f44$export$aafa59e2e03f2942(this, offset, true, 52, 8);\n};\n$51861dfc7ca9d588$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkOffset(offset, 8, this.length);\n    return $7221566bd4d49f44$export$aafa59e2e03f2942(this, offset, false, 52, 8);\n};\nfunction $51861dfc7ca9d588$var$checkInt(buf, value, offset, ext, max, min) {\n    if (!$51861dfc7ca9d588$var$Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n    if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n    if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n}\n$51861dfc7ca9d588$var$Buffer.prototype.writeUintLE = $51861dfc7ca9d588$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n        $51861dfc7ca9d588$var$checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n    let mul = 1;\n    let i = 0;\n    this[offset] = value & 0xFF;\n    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;\n    return offset + byteLength;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.writeUintBE = $51861dfc7ca9d588$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n        $51861dfc7ca9d588$var$checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n    let i = byteLength - 1;\n    let mul = 1;\n    this[offset + i] = value & 0xFF;\n    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;\n    return offset + byteLength;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.writeUint8 = $51861dfc7ca9d588$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkInt(this, value, offset, 1, 0xff, 0);\n    this[offset] = value & 0xff;\n    return offset + 1;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.writeUint16LE = $51861dfc7ca9d588$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkInt(this, value, offset, 2, 0xffff, 0);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.writeUint16BE = $51861dfc7ca9d588$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkInt(this, value, offset, 2, 0xffff, 0);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n    return offset + 2;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.writeUint32LE = $51861dfc7ca9d588$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkInt(this, value, offset, 4, 0xffffffff, 0);\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 0xff;\n    return offset + 4;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.writeUint32BE = $51861dfc7ca9d588$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkInt(this, value, offset, 4, 0xffffffff, 0);\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n    return offset + 4;\n};\nfunction $51861dfc7ca9d588$var$wrtBigUInt64LE(buf, value, offset, min, max) {\n    $51861dfc7ca9d588$var$checkIntBI(value, min, max, buf, offset, 7);\n    let lo = Number(value & BigInt(0xffffffff));\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    return offset;\n}\nfunction $51861dfc7ca9d588$var$wrtBigUInt64BE(buf, value, offset, min, max) {\n    $51861dfc7ca9d588$var$checkIntBI(value, min, max, buf, offset, 7);\n    let lo = Number(value & BigInt(0xffffffff));\n    buf[offset + 7] = lo;\n    lo = lo >> 8;\n    buf[offset + 6] = lo;\n    lo = lo >> 8;\n    buf[offset + 5] = lo;\n    lo = lo >> 8;\n    buf[offset + 4] = lo;\n    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n    buf[offset + 3] = hi;\n    hi = hi >> 8;\n    buf[offset + 2] = hi;\n    hi = hi >> 8;\n    buf[offset + 1] = hi;\n    hi = hi >> 8;\n    buf[offset] = hi;\n    return offset + 8;\n}\n$51861dfc7ca9d588$var$Buffer.prototype.writeBigUInt64LE = $51861dfc7ca9d588$var$defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {\n    return $51861dfc7ca9d588$var$wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n});\n$51861dfc7ca9d588$var$Buffer.prototype.writeBigUInt64BE = $51861dfc7ca9d588$var$defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {\n    return $51861dfc7ca9d588$var$wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n});\n$51861dfc7ca9d588$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength - 1);\n        $51861dfc7ca9d588$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n    let i = 0;\n    let mul = 1;\n    let sub = 0;\n    this[offset] = value & 0xFF;\n    while(++i < byteLength && (mul *= 0x100)){\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;\n        this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength - 1);\n        $51861dfc7ca9d588$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n    let i = byteLength - 1;\n    let mul = 1;\n    let sub = 0;\n    this[offset + i] = value & 0xFF;\n    while(--i >= 0 && (mul *= 0x100)){\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;\n        this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkInt(this, value, offset, 1, 0x7f, -128);\n    if (value < 0) value = 0xff + value + 1;\n    this[offset] = value & 0xff;\n    return offset + 1;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkInt(this, value, offset, 2, 0x7fff, -32768);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkInt(this, value, offset, 2, 0x7fff, -32768);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n    return offset + 2;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n    return offset + 4;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);\n    if (value < 0) value = 0xffffffff + value + 1;\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n    return offset + 4;\n};\n$51861dfc7ca9d588$var$Buffer.prototype.writeBigInt64LE = $51861dfc7ca9d588$var$defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {\n    return $51861dfc7ca9d588$var$wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n});\n$51861dfc7ca9d588$var$Buffer.prototype.writeBigInt64BE = $51861dfc7ca9d588$var$defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {\n    return $51861dfc7ca9d588$var$wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n});\nfunction $51861dfc7ca9d588$var$checkIEEE754(buf, value, offset, ext, max, min) {\n    if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n    if (offset < 0) throw new RangeError(\"Index out of range\");\n}\nfunction $51861dfc7ca9d588$var$writeFloat(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);\n    $7221566bd4d49f44$export$68d8715fc104d294(buf, value, offset, littleEndian, 23, 4);\n    return offset + 4;\n}\n$51861dfc7ca9d588$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n    return $51861dfc7ca9d588$var$writeFloat(this, value, offset, true, noAssert);\n};\n$51861dfc7ca9d588$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n    return $51861dfc7ca9d588$var$writeFloat(this, value, offset, false, noAssert);\n};\nfunction $51861dfc7ca9d588$var$writeDouble(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) $51861dfc7ca9d588$var$checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n    $7221566bd4d49f44$export$68d8715fc104d294(buf, value, offset, littleEndian, 52, 8);\n    return offset + 8;\n}\n$51861dfc7ca9d588$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n    return $51861dfc7ca9d588$var$writeDouble(this, value, offset, true, noAssert);\n};\n$51861dfc7ca9d588$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n    return $51861dfc7ca9d588$var$writeDouble(this, value, offset, false, noAssert);\n};\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n$51861dfc7ca9d588$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {\n    if (!$51861dfc7ca9d588$var$Buffer.isBuffer(target)) throw new TypeError(\"argument should be a Buffer\");\n    if (!start) start = 0;\n    if (!end && end !== 0) end = this.length;\n    if (targetStart >= target.length) targetStart = target.length;\n    if (!targetStart) targetStart = 0;\n    if (end > 0 && end < start) end = start;\n    // Copy 0 bytes; we're done\n    if (end === start) return 0;\n    if (target.length === 0 || this.length === 0) return 0;\n    // Fatal error conditions\n    if (targetStart < 0) throw new RangeError(\"targetStart out of bounds\");\n    if (start < 0 || start >= this.length) throw new RangeError(\"Index out of range\");\n    if (end < 0) throw new RangeError(\"sourceEnd out of bounds\");\n    // Are we oob?\n    if (end > this.length) end = this.length;\n    if (target.length - targetStart < end - start) end = target.length - targetStart + start;\n    const len = end - start;\n    if (this === target && typeof Uint8Array.prototype.copyWithin === \"function\") // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end);\n    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n    return len;\n};\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\n$51861dfc7ca9d588$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {\n    // Handle string cases:\n    if (typeof val === \"string\") {\n        if (typeof start === \"string\") {\n            encoding = start;\n            start = 0;\n            end = this.length;\n        } else if (typeof end === \"string\") {\n            encoding = end;\n            end = this.length;\n        }\n        if (encoding !== undefined && typeof encoding !== \"string\") throw new TypeError(\"encoding must be a string\");\n        if (typeof encoding === \"string\" && !$51861dfc7ca9d588$var$Buffer.isEncoding(encoding)) throw new TypeError(\"Unknown encoding: \" + encoding);\n        if (val.length === 1) {\n            const code = val.charCodeAt(0);\n            if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") // Fast path: If `val` fits into a single byte, use that numeric value.\n            val = code;\n        }\n    } else if (typeof val === \"number\") val = val & 255;\n    else if (typeof val === \"boolean\") val = Number(val);\n    // Invalid ranges are not set to a default, so can range check early.\n    if (start < 0 || this.length < start || this.length < end) throw new RangeError(\"Out of range index\");\n    if (end <= start) return this;\n    start = start >>> 0;\n    end = end === undefined ? this.length : end >>> 0;\n    if (!val) val = 0;\n    let i;\n    if (typeof val === \"number\") for(i = start; i < end; ++i)this[i] = val;\n    else {\n        const bytes = $51861dfc7ca9d588$var$Buffer.isBuffer(val) ? val : $51861dfc7ca9d588$var$Buffer.from(val, encoding);\n        const len = bytes.length;\n        if (len === 0) throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];\n    }\n    return this;\n};\n// CUSTOM ERRORS\n// =============\n// Simplified versions from Node, changed for Buffer-only usage\nconst $51861dfc7ca9d588$var$errors = {};\nfunction $51861dfc7ca9d588$var$E(sym, getMessage, Base) {\n    $51861dfc7ca9d588$var$errors[sym] = class NodeError extends Base {\n        constructor(){\n            super();\n            Object.defineProperty(this, \"message\", {\n                value: getMessage.apply(this, arguments),\n                writable: true,\n                configurable: true\n            });\n            // Add the error code to the name to include it in the stack trace.\n            this.name = `${this.name} [${sym}]`;\n            // Access the stack to generate the error message including the error code\n            // from the name.\n            this.stack // eslint-disable-line no-unused-expressions\n            ;\n            // Reset the name to the actual name.\n            delete this.name;\n        }\n        get code() {\n            return sym;\n        }\n        set code(value) {\n            Object.defineProperty(this, \"code\", {\n                configurable: true,\n                enumerable: true,\n                value: value,\n                writable: true\n            });\n        }\n        toString() {\n            return `${this.name} [${sym}]: ${this.message}`;\n        }\n    };\n}\n$51861dfc7ca9d588$var$E(\"ERR_BUFFER_OUT_OF_BOUNDS\", function(name) {\n    if (name) return `${name} is outside of buffer bounds`;\n    return \"Attempt to access memory outside buffer bounds\";\n}, RangeError);\n$51861dfc7ca9d588$var$E(\"ERR_INVALID_ARG_TYPE\", function(name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`;\n}, TypeError);\n$51861dfc7ca9d588$var$E(\"ERR_OUT_OF_RANGE\", function(str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`;\n    let received = input;\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = $51861dfc7ca9d588$var$addNumericalSeparator(String(input));\n    else if (typeof input === \"bigint\") {\n        received = String(input);\n        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = $51861dfc7ca9d588$var$addNumericalSeparator(received);\n        received += \"n\";\n    }\n    msg += ` It must be ${range}. Received ${received}`;\n    return msg;\n}, RangeError);\nfunction $51861dfc7ca9d588$var$addNumericalSeparator(val) {\n    let res = \"\";\n    let i = val.length;\n    const start = val[0] === \"-\" ? 1 : 0;\n    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;\n    return `${val.slice(0, i)}${res}`;\n}\n// CHECK FUNCTIONS\n// ===============\nfunction $51861dfc7ca9d588$var$checkBounds(buf, offset, byteLength) {\n    $51861dfc7ca9d588$var$validateNumber(offset, \"offset\");\n    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) $51861dfc7ca9d588$var$boundsError(offset, buf.length - (byteLength + 1));\n}\nfunction $51861dfc7ca9d588$var$checkIntBI(value, min, max, buf, offset, byteLength) {\n    if (value > max || value < min) {\n        const n = typeof min === \"bigint\" ? \"n\" : \"\";\n        let range;\n        if (byteLength > 3) {\n            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;\n            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;\n        } else range = `>= ${min}${n} and <= ${max}${n}`;\n        throw new $51861dfc7ca9d588$var$errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n    }\n    $51861dfc7ca9d588$var$checkBounds(buf, offset, byteLength);\n}\nfunction $51861dfc7ca9d588$var$validateNumber(value, name) {\n    if (typeof value !== \"number\") throw new $51861dfc7ca9d588$var$errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n}\nfunction $51861dfc7ca9d588$var$boundsError(value, length, type) {\n    if (Math.floor(value) !== value) {\n        $51861dfc7ca9d588$var$validateNumber(value, type);\n        throw new $51861dfc7ca9d588$var$errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n    }\n    if (length < 0) throw new $51861dfc7ca9d588$var$errors.ERR_BUFFER_OUT_OF_BOUNDS();\n    throw new $51861dfc7ca9d588$var$errors.ERR_OUT_OF_RANGE(type || \"offset\", `>= ${type ? 1 : 0} and <= ${length}`, value);\n}\n// HELPER FUNCTIONS\n// ================\nconst $51861dfc7ca9d588$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\nfunction $51861dfc7ca9d588$var$base64clean(str) {\n    // Node takes equal signs as end of the Base64 encoding\n    str = str.split(\"=\")[0];\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n    str = str.trim().replace($51861dfc7ca9d588$var$INVALID_BASE64_RE, \"\");\n    // Node converts strings with length < 2 to ''\n    if (str.length < 2) return \"\";\n    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n    while(str.length % 4 !== 0)str = str + \"=\";\n    return str;\n}\nfunction $51861dfc7ca9d588$var$utf8ToBytes(string, units) {\n    units = units || Infinity;\n    let codePoint;\n    const length = string.length;\n    let leadSurrogate = null;\n    const bytes = [];\n    for(let i = 0; i < length; ++i){\n        codePoint = string.charCodeAt(i);\n        // is surrogate component\n        if (codePoint > 0xD7FF && codePoint < 0xE000) {\n            // last char was a lead\n            if (!leadSurrogate) {\n                // no lead yet\n                if (codePoint > 0xDBFF) {\n                    // unexpected trail\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                } else if (i + 1 === length) {\n                    // unpaired lead\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                }\n                // valid lead\n                leadSurrogate = codePoint;\n                continue;\n            }\n            // 2 leads in a row\n            if (codePoint < 0xDC00) {\n                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                leadSurrogate = codePoint;\n                continue;\n            }\n            // valid surrogate pair\n            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n        } else if (leadSurrogate) // valid bmp char, but last char was a lead\n        {\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        }\n        leadSurrogate = null;\n        // encode utf8\n        if (codePoint < 0x80) {\n            if ((units -= 1) < 0) break;\n            bytes.push(codePoint);\n        } else if (codePoint < 0x800) {\n            if ((units -= 2) < 0) break;\n            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x10000) {\n            if ((units -= 3) < 0) break;\n            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x110000) {\n            if ((units -= 4) < 0) break;\n            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n        } else throw new Error(\"Invalid code point\");\n    }\n    return bytes;\n}\nfunction $51861dfc7ca9d588$var$asciiToBytes(str) {\n    const byteArray = [];\n    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n    return byteArray;\n}\nfunction $51861dfc7ca9d588$var$utf16leToBytes(str, units) {\n    let c, hi, lo;\n    const byteArray = [];\n    for(let i = 0; i < str.length; ++i){\n        if ((units -= 2) < 0) break;\n        c = str.charCodeAt(i);\n        hi = c >> 8;\n        lo = c % 256;\n        byteArray.push(lo);\n        byteArray.push(hi);\n    }\n    return byteArray;\n}\nfunction $51861dfc7ca9d588$var$base64ToBytes(str) {\n    return $eeb0961446aae8e3$export$d622b2ad8d90c771($51861dfc7ca9d588$var$base64clean(str));\n}\nfunction $51861dfc7ca9d588$var$blitBuffer(src, dst, offset, length) {\n    let i;\n    for(i = 0; i < length; ++i){\n        if (i + offset >= dst.length || i >= src.length) break;\n        dst[i + offset] = src[i];\n    }\n    return i;\n}\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction $51861dfc7ca9d588$var$isInstance(obj, type) {\n    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n}\nfunction $51861dfc7ca9d588$var$numberIsNaN(obj) {\n    // For IE11 support\n    return obj !== obj // eslint-disable-line no-self-compare\n    ;\n}\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst $51861dfc7ca9d588$var$hexSliceLookupTable = function() {\n    const alphabet = \"0123456789abcdef\";\n    const table = new Array(256);\n    for(let i = 0; i < 16; ++i){\n        const i16 = i * 16;\n        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];\n    }\n    return table;\n}();\n// Return not function with Error if BigInt not supported\nfunction $51861dfc7ca9d588$var$defineBigIntMethod(fn) {\n    return typeof BigInt === \"undefined\" ? $51861dfc7ca9d588$var$BufferBigIntNotDefined : fn;\n}\nfunction $51861dfc7ca9d588$var$BufferBigIntNotDefined() {\n    throw new Error(\"BigInt not supported\");\n}\n\n\nvar $b4e14b6b8da86996$require$Buffer = $51861dfc7ca9d588$export$a143d493d941bafc;\nconst $b4e14b6b8da86996$var$wss = new (0, $b491f7ab24cc727b$exports.WebSocketServer)({\n    port: 1234\n});\nconst $b4e14b6b8da86996$var$buttons = [\n    {\n        \"A\": (0, (/*@__PURE__*/$parcel$interopDefault($205d8b7d214f5014$exports))).KEYMAP.A\n    },\n    {\n        \"B\": (0, (/*@__PURE__*/$parcel$interopDefault($205d8b7d214f5014$exports))).KEYMAP.B\n    },\n    {\n        \"R\": (0, (/*@__PURE__*/$parcel$interopDefault($205d8b7d214f5014$exports))).KEYMAP.RIGHT\n    },\n    {\n        \"L\": (0, (/*@__PURE__*/$parcel$interopDefault($205d8b7d214f5014$exports))).KEYMAP.LEFT\n    },\n    {\n        \"U\": (0, (/*@__PURE__*/$parcel$interopDefault($205d8b7d214f5014$exports))).KEYMAP.DOWN\n    },\n    {\n        \"D\": (0, (/*@__PURE__*/$parcel$interopDefault($205d8b7d214f5014$exports))).KEYMAP.UP\n    },\n    {\n        \"SL\": (0, (/*@__PURE__*/$parcel$interopDefault($205d8b7d214f5014$exports))).KEYMAP.SELECT\n    },\n    {\n        \"ST\": (0, (/*@__PURE__*/$parcel$interopDefault($205d8b7d214f5014$exports))).KEYMAP.START\n    }\n];\nconst $b4e14b6b8da86996$var$roms = [\n    \"pokemon_emerald.gba\",\n    \"pokemon_crystal.gbc\",\n    \"doom_2.gba\"\n];\nfunction $b4e14b6b8da86996$var$loadGame(gb, game, sav) {\n    game = game < 0 ? 0 : game >= $b4e14b6b8da86996$var$roms.length ? $b4e14b6b8da86996$var$roms.length - 1 : game;\n    var file_path = `./roms/${$b4e14b6b8da86996$var$roms[game]}`;\n    const rom = $eca075ad100d834d$exports.readFileSync(file_path);\n    if (sav) gb.loadRom(rom, sav);\n    else gb.loadRom(rom);\n}\n$b4e14b6b8da86996$var$wss.on(\"connection\", async function connection(ws) {\n    var ready = false;\n    const gb = new (0, (/*@__PURE__*/$parcel$interopDefault($205d8b7d214f5014$exports)))();\n    var interval_id2 = setInterval(()=>{\n        if (!ready) return;\n        gb.doFrame();\n    }, 1000 / 120);\n    var interval_id1 = setInterval(()=>{\n        if (!ready) return;\n        var pix = gb.getScreen();\n        var str = \"scrn\" + $b4e14b6b8da86996$require$Buffer.from(pix, \"ascii\");\n        ws.send(str);\n    }, 1000 / 30);\n    ws.on(\"message\", (data)=>{\n        var dat = data.toString();\n        if (dat.length < 4) gb.pressKey($b4e14b6b8da86996$var$buttons[dat]);\n        else switch(dat.substring(0, 4)){\n            case \"save\":\n                var str = \"save\" + gb.getSaveData();\n                ws.send(str);\n                break;\n            case \"load\":\n                var strs = dat.split(\"|\");\n                if (strs.length > 2) $b4e14b6b8da86996$var$loadGame(gb, Number.parseInt(strs[1]), strs[2]);\n                else $b4e14b6b8da86996$var$loadGame(gb, Number.parseInt(strs[1]));\n                ready = true;\n                break;\n        }\n    });\n    ws.on(\"close\", async function disconnect() {\n        clearInterval(interval_id1);\n        clearInterval(interval_id2);\n    });\n});\n\n\n//# sourceMappingURL=index.09dbb957.js.map\n","//Dump of the post-BOOT I/O register state (From gambatte):\nmodule.exports = [\n    0x0F, 0x00, 0x7C, 0xFF, 0x00, 0x00, 0x00, 0xF8,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,\n    0x80, 0xBF, 0xF3, 0xFF, 0xBF, 0xFF, 0x3F, 0x00,     0xFF, 0xBF, 0x7F, 0xFF, 0x9F, 0xFF, 0xBF, 0xFF,\n    0xFF, 0x00, 0x00, 0xBF, 0x77, 0xF3, 0xF1, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n    0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,     0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,\n    0x91, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,     0x00, 0x00, 0x00, 0x00, 0xFF, 0x7E, 0xFF, 0xFE,\n    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     0xC0, 0xFF, 0xC1, 0x00, 0xFE, 0xFF, 0xFF, 0xFF,\n    0xF8, 0xFF, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x00,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n    0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,     0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D,\n    0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,     0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99,\n    0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,     0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E,\n    0x45, 0xEC, 0x52, 0xFA, 0x08, 0xB7, 0x07, 0x5D,     0x01, 0xFD, 0xC0, 0xFF, 0x08, 0xFC, 0x00, 0xE5,\n    0x0B, 0xF8, 0xC2, 0xCE, 0xF4, 0xF9, 0x0F, 0x7F,     0x45, 0x6D, 0x3D, 0xFE, 0x46, 0x97, 0x33, 0x5E,\n    0x08, 0xEF, 0xF1, 0xFF, 0x86, 0x83, 0x24, 0x74,     0x12, 0xFC, 0x00, 0x9F, 0xB4, 0xB7, 0x06, 0xD5,\n    0xD0, 0x7A, 0x00, 0x9E, 0x04, 0x5F, 0x41, 0x2F,     0x1D, 0x77, 0x36, 0x75, 0x81, 0xAA, 0x70, 0x3A,\n    0x98, 0xD1, 0x71, 0x02, 0x4D, 0x01, 0xC1, 0xFF,     0x0D, 0x00, 0xD3, 0x05, 0xF9, 0x00, 0x0B, 0x00\n];\n","var OPCODE = [\n\t//NOP\n\t//#0x00:\n\tfunction (parentObj) {\n\t\t//Do Nothing...\n\t},\n\t//LD BC, nn\n\t//#0x01:\n\tfunction (parentObj) {\n\t\tparentObj.registerC = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.registerB = parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF);\n\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t},\n\t//LD (BC), A\n\t//#0x02:\n\tfunction (parentObj) {\n\t\tparentObj.memoryWrite((parentObj.registerB << 8) | parentObj.registerC, parentObj.registerA);\n\t},\n\t//INC BC\n\t//#0x03:\n\tfunction (parentObj) {\n\t\tvar temp_var = ((parentObj.registerB << 8) | parentObj.registerC) + 1;\n\t\tparentObj.registerB = (temp_var >> 8) & 0xFF;\n\t\tparentObj.registerC = temp_var & 0xFF;\n\t},\n\t//INC B\n\t//#0x04:\n\tfunction (parentObj) {\n\t\tparentObj.registerB = (parentObj.registerB + 1) & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerB == 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerB & 0xF) == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//DEC B\n\t//#0x05:\n\tfunction (parentObj) {\n\t\tparentObj.registerB = (parentObj.registerB - 1) & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerB == 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerB & 0xF) == 0xF);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//LD B, n\n\t//#0x06:\n\tfunction (parentObj) {\n\t\tparentObj.registerB = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t},\n\t//RLCA\n\t//#0x07:\n\tfunction (parentObj) {\n\t\tparentObj.FCarry = (parentObj.registerA > 0x7F);\n\t\tparentObj.registerA = ((parentObj.registerA << 1) & 0xFF) | (parentObj.registerA >> 7);\n\t\tparentObj.FZero = parentObj.FSubtract = parentObj.FHalfCarry = false;\n\t},\n\t//LD (nn), SP\n\t//#0x08:\n\tfunction (parentObj) {\n\t\tvar temp_var = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t\tparentObj.memoryWrite(temp_var, parentObj.stackPointer & 0xFF);\n\t\tparentObj.memoryWrite((temp_var + 1) & 0xFFFF, parentObj.stackPointer >> 8);\n\t},\n\t//ADD HL, BC\n\t//#0x09:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registersHL + ((parentObj.registerB << 8) | parentObj.registerC);\n\t\tparentObj.FHalfCarry = ((parentObj.registersHL & 0xFFF) > (dirtySum & 0xFFF));\n\t\tparentObj.FCarry = (dirtySum > 0xFFFF);\n\t\tparentObj.registersHL = dirtySum & 0xFFFF;\n\t\tparentObj.FSubtract = false;\n\t},\n\t//LD A, (BC)\n\t//#0x0A:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = parentObj.memoryRead((parentObj.registerB << 8) | parentObj.registerC);\n\t},\n\t//DEC BC\n\t//#0x0B:\n\tfunction (parentObj) {\n\t\tvar temp_var = (((parentObj.registerB << 8) | parentObj.registerC) - 1) & 0xFFFF;\n\t\tparentObj.registerB = temp_var >> 8;\n\t\tparentObj.registerC = temp_var & 0xFF;\n\t},\n\t//INC C\n\t//#0x0C:\n\tfunction (parentObj) {\n\t\tparentObj.registerC = (parentObj.registerC + 1) & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerC == 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerC & 0xF) == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//DEC C\n\t//#0x0D:\n\tfunction (parentObj) {\n\t\tparentObj.registerC = (parentObj.registerC - 1) & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerC == 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerC & 0xF) == 0xF);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//LD C, n\n\t//#0x0E:\n\tfunction (parentObj) {\n\t\tparentObj.registerC = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t},\n\t//RRCA\n\t//#0x0F:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = (parentObj.registerA >> 1) | ((parentObj.registerA & 1) << 7);\n\t\tparentObj.FCarry = (parentObj.registerA > 0x7F);\n\t\tparentObj.FZero = parentObj.FSubtract = parentObj.FHalfCarry = false;\n\t},\n\t//STOP\n\t//#0x10:\n\tfunction (parentObj) {\n\t\tif (parentObj.cGBC) {\n\t\t\tif ((parentObj.memory[0xFF4D] & 0x01) == 0x01) {\t\t//Speed change requested.\n\t\t\t\tif (parentObj.memory[0xFF4D] > 0x7F) {\t\t\t\t//Go back to single speed mode.\n\t\t\t\t\t// console.log(\"Going into single clock speed mode.\", 0);\n\t\t\t\t\tparentObj.doubleSpeedShifter = 0;\n\t\t\t\t\tparentObj.memory[0xFF4D] &= 0x7F;\t\t\t\t//Clear the double speed mode flag.\n\t\t\t\t}\n\t\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t//Go to double speed mode.\n\t\t\t\t\t// console.log(\"Going into double clock speed mode.\", 0);\n\t\t\t\t\tparentObj.doubleSpeedShifter = 1;\n\t\t\t\t\tparentObj.memory[0xFF4D] |= 0x80;\t\t\t\t//Set the double speed mode flag.\n\t\t\t\t}\n\t\t\t\tparentObj.memory[0xFF4D] &= 0xFE;\t\t\t\t\t//Reset the request bit.\n\t\t\t}\n\t\t\telse {\n\t\t\t\tparentObj.handleSTOP();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tparentObj.handleSTOP();\n\t\t}\n\t},\n\t//LD DE, nn\n\t//#0x11:\n\tfunction (parentObj) {\n\t\tparentObj.registerE = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.registerD = parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF);\n\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t},\n\t//LD (DE), A\n\t//#0x12:\n\tfunction (parentObj) {\n\t\tparentObj.memoryWrite((parentObj.registerD << 8) | parentObj.registerE, parentObj.registerA);\n\t},\n\t//INC DE\n\t//#0x13:\n\tfunction (parentObj) {\n\t\tvar temp_var = ((parentObj.registerD << 8) | parentObj.registerE) + 1;\n\t\tparentObj.registerD = (temp_var >> 8) & 0xFF;\n\t\tparentObj.registerE = temp_var & 0xFF;\n\t},\n\t//INC D\n\t//#0x14:\n\tfunction (parentObj) {\n\t\tparentObj.registerD = (parentObj.registerD + 1) & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerD == 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerD & 0xF) == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//DEC D\n\t//#0x15:\n\tfunction (parentObj) {\n\t\tparentObj.registerD = (parentObj.registerD - 1) & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerD == 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerD & 0xF) == 0xF);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//LD D, n\n\t//#0x16:\n\tfunction (parentObj) {\n\t\tparentObj.registerD = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t},\n\t//RLA\n\t//#0x17:\n\tfunction (parentObj) {\n\t\tvar carry_flag = (parentObj.FCarry) ? 1 : 0;\n\t\tparentObj.FCarry = (parentObj.registerA > 0x7F);\n\t\tparentObj.registerA = ((parentObj.registerA << 1) & 0xFF) | carry_flag;\n\t\tparentObj.FZero = parentObj.FSubtract = parentObj.FHalfCarry = false;\n\t},\n\t//JR n\n\t//#0x18:\n\tfunction (parentObj) {\n\t\tparentObj.programCounter = (parentObj.programCounter + ((parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24) >> 24) + 1) & 0xFFFF;\n\t},\n\t//ADD HL, DE\n\t//#0x19:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registersHL + ((parentObj.registerD << 8) | parentObj.registerE);\n\t\tparentObj.FHalfCarry = ((parentObj.registersHL & 0xFFF) > (dirtySum & 0xFFF));\n\t\tparentObj.FCarry = (dirtySum > 0xFFFF);\n\t\tparentObj.registersHL = dirtySum & 0xFFFF;\n\t\tparentObj.FSubtract = false;\n\t},\n\t//LD A, (DE)\n\t//#0x1A:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = parentObj.memoryRead((parentObj.registerD << 8) | parentObj.registerE);\n\t},\n\t//DEC DE\n\t//#0x1B:\n\tfunction (parentObj) {\n\t\tvar temp_var = (((parentObj.registerD << 8) | parentObj.registerE) - 1) & 0xFFFF;\n\t\tparentObj.registerD = temp_var >> 8;\n\t\tparentObj.registerE = temp_var & 0xFF;\n\t},\n\t//INC E\n\t//#0x1C:\n\tfunction (parentObj) {\n\t\tparentObj.registerE = (parentObj.registerE + 1) & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerE == 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerE & 0xF) == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//DEC E\n\t//#0x1D:\n\tfunction (parentObj) {\n\t\tparentObj.registerE = (parentObj.registerE - 1) & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerE == 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerE & 0xF) == 0xF);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//LD E, n\n\t//#0x1E:\n\tfunction (parentObj) {\n\t\tparentObj.registerE = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t},\n\t//RRA\n\t//#0x1F:\n\tfunction (parentObj) {\n\t\tvar carry_flag = (parentObj.FCarry) ? 0x80 : 0;\n\t\tparentObj.FCarry = ((parentObj.registerA & 1) == 1);\n\t\tparentObj.registerA = (parentObj.registerA >> 1) | carry_flag;\n\t\tparentObj.FZero = parentObj.FSubtract = parentObj.FHalfCarry = false;\n\t},\n\t//JR NZ, n\n\t//#0x20:\n\tfunction (parentObj) {\n\t\tif (!parentObj.FZero) {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + ((parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24) >> 24) + 1) & 0xFFFF;\n\t\t\tparentObj.CPUTicks += 4;\n\t\t}\n\t\telse {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t\t}\n\t},\n\t//LD HL, nn\n\t//#0x21:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t},\n\t//LDI (HL), A\n\t//#0x22:\n\tfunction (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerA);\n\t\tparentObj.registersHL = (parentObj.registersHL + 1) & 0xFFFF;\n\t},\n\t//INC HL\n\t//#0x23:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registersHL + 1) & 0xFFFF;\n\t},\n\t//INC H\n\t//#0x24:\n\tfunction (parentObj) {\n\t\tvar H = ((parentObj.registersHL >> 8) + 1) & 0xFF;\n\t\tparentObj.FZero = (H == 0);\n\t\tparentObj.FHalfCarry = ((H & 0xF) == 0);\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.registersHL = (H << 8) | (parentObj.registersHL & 0xFF);\n\t},\n\t//DEC H\n\t//#0x25:\n\tfunction (parentObj) {\n\t\tvar H = ((parentObj.registersHL >> 8) - 1) & 0xFF;\n\t\tparentObj.FZero = (H == 0);\n\t\tparentObj.FHalfCarry = ((H & 0xF) == 0xF);\n\t\tparentObj.FSubtract = true;\n\t\tparentObj.registersHL = (H << 8) | (parentObj.registersHL & 0xFF);\n\t},\n\t//LD H, n\n\t//#0x26:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 8) | (parentObj.registersHL & 0xFF);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t},\n\t//DAA\n\t//#0x27:\n\tfunction (parentObj) {\n\t\tif (!parentObj.FSubtract) {\n\t\t\tif (parentObj.FCarry || parentObj.registerA > 0x99) {\n\t\t\t\tparentObj.registerA = (parentObj.registerA + 0x60) & 0xFF;\n\t\t\t\tparentObj.FCarry = true;\n\t\t\t}\n\t\t\tif (parentObj.FHalfCarry || (parentObj.registerA & 0xF) > 0x9) {\n\t\t\t\tparentObj.registerA = (parentObj.registerA + 0x06) & 0xFF;\n\t\t\t\tparentObj.FHalfCarry = false;\n\t\t\t}\n\t\t}\n\t\telse if (parentObj.FCarry && parentObj.FHalfCarry) {\n\t\t\tparentObj.registerA = (parentObj.registerA + 0x9A) & 0xFF;\n\t\t\tparentObj.FHalfCarry = false;\n\t\t}\n\t\telse if (parentObj.FCarry) {\n\t\t\tparentObj.registerA = (parentObj.registerA + 0xA0) & 0xFF;\n\t\t}\n\t\telse if (parentObj.FHalfCarry) {\n\t\t\tparentObj.registerA = (parentObj.registerA + 0xFA) & 0xFF;\n\t\t\tparentObj.FHalfCarry = false;\n\t\t}\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t},\n\t//JR Z, n\n\t//#0x28:\n\tfunction (parentObj) {\n\t\tif (parentObj.FZero) {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + ((parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24) >> 24) + 1) & 0xFFFF;\n\t\t\tparentObj.CPUTicks += 4;\n\t\t}\n\t\telse {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t\t}\n\t},\n\t//ADD HL, HL\n\t//#0x29:\n\tfunction (parentObj) {\n\t\tparentObj.FHalfCarry = ((parentObj.registersHL & 0xFFF) > 0x7FF);\n\t\tparentObj.FCarry = (parentObj.registersHL > 0x7FFF);\n\t\tparentObj.registersHL = (parentObj.registersHL << 1) & 0xFFFF;\n\t\tparentObj.FSubtract = false;\n\t},\n\t//LDI A, (HL)\n\t//#0x2A:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tparentObj.registersHL = (parentObj.registersHL + 1) & 0xFFFF;\n\t},\n\t//DEC HL\n\t//#0x2B:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registersHL - 1) & 0xFFFF;\n\t},\n\t//INC L\n\t//#0x2C:\n\tfunction (parentObj) {\n\t\tvar L = (parentObj.registersHL + 1) & 0xFF;\n\t\tparentObj.FZero = (L == 0);\n\t\tparentObj.FHalfCarry = ((L & 0xF) == 0);\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | L;\n\t},\n\t//DEC L\n\t//#0x2D:\n\tfunction (parentObj) {\n\t\tvar L = (parentObj.registersHL - 1) & 0xFF;\n\t\tparentObj.FZero = (L == 0);\n\t\tparentObj.FHalfCarry = ((L & 0xF) == 0xF);\n\t\tparentObj.FSubtract = true;\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | L;\n\t},\n\t//LD L, n\n\t//#0x2E:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t},\n\t//CPL\n\t//#0x2F:\n\tfunction (parentObj) {\n\t\tparentObj.registerA ^= 0xFF;\n\t\tparentObj.FSubtract = parentObj.FHalfCarry = true;\n\t},\n\t//JR NC, n\n\t//#0x30:\n\tfunction (parentObj) {\n\t\tif (!parentObj.FCarry) {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + ((parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24) >> 24) + 1) & 0xFFFF;\n\t\t\tparentObj.CPUTicks += 4;\n\t\t}\n\t\telse {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t\t}\n\t},\n\t//LD SP, nn\n\t//#0x31:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t},\n\t//LDD (HL), A\n\t//#0x32:\n\tfunction (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerA);\n\t\tparentObj.registersHL = (parentObj.registersHL - 1) & 0xFFFF;\n\t},\n\t//INC SP\n\t//#0x33:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = (parentObj.stackPointer + 1) & 0xFFFF;\n\t},\n\t//INC (HL)\n\t//#0x34:\n\tfunction (parentObj) {\n\t\tvar temp_var = (parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) + 1) & 0xFF;\n\t\tparentObj.FZero = (temp_var == 0);\n\t\tparentObj.FHalfCarry = ((temp_var & 0xF) == 0);\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n\t},\n\t//DEC (HL)\n\t//#0x35:\n\tfunction (parentObj) {\n\t\tvar temp_var = (parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) - 1) & 0xFF;\n\t\tparentObj.FZero = (temp_var == 0);\n\t\tparentObj.FHalfCarry = ((temp_var & 0xF) == 0xF);\n\t\tparentObj.FSubtract = true;\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n\t},\n\t//LD (HL), n\n\t//#0x36:\n\tfunction (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter));\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t},\n\t//SCF\n\t//#0x37:\n\tfunction (parentObj) {\n\t\tparentObj.FCarry = true;\n\t\tparentObj.FSubtract = parentObj.FHalfCarry = false;\n\t},\n\t//JR C, n\n\t//#0x38:\n\tfunction (parentObj) {\n\t\tif (parentObj.FCarry) {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + ((parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24) >> 24) + 1) & 0xFFFF;\n\t\t\tparentObj.CPUTicks += 4;\n\t\t}\n\t\telse {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t\t}\n\t},\n\t//ADD HL, SP\n\t//#0x39:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registersHL + parentObj.stackPointer;\n\t\tparentObj.FHalfCarry = ((parentObj.registersHL & 0xFFF) > (dirtySum & 0xFFF));\n\t\tparentObj.FCarry = (dirtySum > 0xFFFF);\n\t\tparentObj.registersHL = dirtySum & 0xFFFF;\n\t\tparentObj.FSubtract = false;\n\t},\n\t//LDD A, (HL)\n\t//#0x3A:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tparentObj.registersHL = (parentObj.registersHL - 1) & 0xFFFF;\n\t},\n\t//DEC SP\n\t//#0x3B:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t},\n\t//INC A\n\t//#0x3C:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = (parentObj.registerA + 1) & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//DEC A\n\t//#0x3D:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = (parentObj.registerA - 1) & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) == 0xF);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//LD A, n\n\t//#0x3E:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t},\n\t//CCF\n\t//#0x3F:\n\tfunction (parentObj) {\n\t\tparentObj.FCarry = !parentObj.FCarry;\n\t\tparentObj.FSubtract = parentObj.FHalfCarry = false;\n\t},\n\t//LD B, B\n\t//#0x40:\n\tfunction (parentObj) {\n\t\t//Do nothing...\n\t},\n\t//LD B, C\n\t//#0x41:\n\tfunction (parentObj) {\n\t\tparentObj.registerB = parentObj.registerC;\n\t},\n\t//LD B, D\n\t//#0x42:\n\tfunction (parentObj) {\n\t\tparentObj.registerB = parentObj.registerD;\n\t},\n\t//LD B, E\n\t//#0x43:\n\tfunction (parentObj) {\n\t\tparentObj.registerB = parentObj.registerE;\n\t},\n\t//LD B, H\n\t//#0x44:\n\tfunction (parentObj) {\n\t\tparentObj.registerB = parentObj.registersHL >> 8;\n\t},\n\t//LD B, L\n\t//#0x45:\n\tfunction (parentObj) {\n\t\tparentObj.registerB = parentObj.registersHL & 0xFF;\n\t},\n\t//LD B, (HL)\n\t//#0x46:\n\tfunction (parentObj) {\n\t\tparentObj.registerB = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t},\n\t//LD B, A\n\t//#0x47:\n\tfunction (parentObj) {\n\t\tparentObj.registerB = parentObj.registerA;\n\t},\n\t//LD C, B\n\t//#0x48:\n\tfunction (parentObj) {\n\t\tparentObj.registerC = parentObj.registerB;\n\t},\n\t//LD C, C\n\t//#0x49:\n\tfunction (parentObj) {\n\t\t//Do nothing...\n\t},\n\t//LD C, D\n\t//#0x4A:\n\tfunction (parentObj) {\n\t\tparentObj.registerC = parentObj.registerD;\n\t},\n\t//LD C, E\n\t//#0x4B:\n\tfunction (parentObj) {\n\t\tparentObj.registerC = parentObj.registerE;\n\t},\n\t//LD C, H\n\t//#0x4C:\n\tfunction (parentObj) {\n\t\tparentObj.registerC = parentObj.registersHL >> 8;\n\t},\n\t//LD C, L\n\t//#0x4D:\n\tfunction (parentObj) {\n\t\tparentObj.registerC = parentObj.registersHL & 0xFF;\n\t},\n\t//LD C, (HL)\n\t//#0x4E:\n\tfunction (parentObj) {\n\t\tparentObj.registerC = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t},\n\t//LD C, A\n\t//#0x4F:\n\tfunction (parentObj) {\n\t\tparentObj.registerC = parentObj.registerA;\n\t},\n\t//LD D, B\n\t//#0x50:\n\tfunction (parentObj) {\n\t\tparentObj.registerD = parentObj.registerB;\n\t},\n\t//LD D, C\n\t//#0x51:\n\tfunction (parentObj) {\n\t\tparentObj.registerD = parentObj.registerC;\n\t},\n\t//LD D, D\n\t//#0x52:\n\tfunction (parentObj) {\n\t\t//Do nothing...\n\t},\n\t//LD D, E\n\t//#0x53:\n\tfunction (parentObj) {\n\t\tparentObj.registerD = parentObj.registerE;\n\t},\n\t//LD D, H\n\t//#0x54:\n\tfunction (parentObj) {\n\t\tparentObj.registerD = parentObj.registersHL >> 8;\n\t},\n\t//LD D, L\n\t//#0x55:\n\tfunction (parentObj) {\n\t\tparentObj.registerD = parentObj.registersHL & 0xFF;\n\t},\n\t//LD D, (HL)\n\t//#0x56:\n\tfunction (parentObj) {\n\t\tparentObj.registerD = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t},\n\t//LD D, A\n\t//#0x57:\n\tfunction (parentObj) {\n\t\tparentObj.registerD = parentObj.registerA;\n\t},\n\t//LD E, B\n\t//#0x58:\n\tfunction (parentObj) {\n\t\tparentObj.registerE = parentObj.registerB;\n\t},\n\t//LD E, C\n\t//#0x59:\n\tfunction (parentObj) {\n\t\tparentObj.registerE = parentObj.registerC;\n\t},\n\t//LD E, D\n\t//#0x5A:\n\tfunction (parentObj) {\n\t\tparentObj.registerE = parentObj.registerD;\n\t},\n\t//LD E, E\n\t//#0x5B:\n\tfunction (parentObj) {\n\t\t//Do nothing...\n\t},\n\t//LD E, H\n\t//#0x5C:\n\tfunction (parentObj) {\n\t\tparentObj.registerE = parentObj.registersHL >> 8;\n\t},\n\t//LD E, L\n\t//#0x5D:\n\tfunction (parentObj) {\n\t\tparentObj.registerE = parentObj.registersHL & 0xFF;\n\t},\n\t//LD E, (HL)\n\t//#0x5E:\n\tfunction (parentObj) {\n\t\tparentObj.registerE = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t},\n\t//LD E, A\n\t//#0x5F:\n\tfunction (parentObj) {\n\t\tparentObj.registerE = parentObj.registerA;\n\t},\n\t//LD H, B\n\t//#0x60:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registerB << 8) | (parentObj.registersHL & 0xFF);\n\t},\n\t//LD H, C\n\t//#0x61:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registerC << 8) | (parentObj.registersHL & 0xFF);\n\t},\n\t//LD H, D\n\t//#0x62:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registerD << 8) | (parentObj.registersHL & 0xFF);\n\t},\n\t//LD H, E\n\t//#0x63:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registerE << 8) | (parentObj.registersHL & 0xFF);\n\t},\n\t//LD H, H\n\t//#0x64:\n\tfunction (parentObj) {\n\t\t//Do nothing...\n\t},\n\t//LD H, L\n\t//#0x65:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF) * 0x101;\n\t},\n\t//LD H, (HL)\n\t//#0x66:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) << 8) | (parentObj.registersHL & 0xFF);\n\t},\n\t//LD H, A\n\t//#0x67:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registerA << 8) | (parentObj.registersHL & 0xFF);\n\t},\n\t//LD L, B\n\t//#0x68:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | parentObj.registerB;\n\t},\n\t//LD L, C\n\t//#0x69:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | parentObj.registerC;\n\t},\n\t//LD L, D\n\t//#0x6A:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | parentObj.registerD;\n\t},\n\t//LD L, E\n\t//#0x6B:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | parentObj.registerE;\n\t},\n\t//LD L, H\n\t//#0x6C:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | (parentObj.registersHL >> 8);\n\t},\n\t//LD L, L\n\t//#0x6D:\n\tfunction (parentObj) {\n\t\t//Do nothing...\n\t},\n\t//LD L, (HL)\n\t//#0x6E:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t},\n\t//LD L, A\n\t//#0x6F:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | parentObj.registerA;\n\t},\n\t//LD (HL), B\n\t//#0x70:\n\tfunction (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerB);\n\t},\n\t//LD (HL), C\n\t//#0x71:\n\tfunction (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerC);\n\t},\n\t//LD (HL), D\n\t//#0x72:\n\tfunction (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerD);\n\t},\n\t//LD (HL), E\n\t//#0x73:\n\tfunction (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerE);\n\t},\n\t//LD (HL), H\n\t//#0x74:\n\tfunction (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registersHL >> 8);\n\t},\n\t//LD (HL), L\n\t//#0x75:\n\tfunction (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registersHL & 0xFF);\n\t},\n\t//HALT\n\t//#0x76:\n\tfunction (parentObj) {\n\t\t//See if there's already an IRQ match:\n\t\tif ((parentObj.interruptsEnabled & parentObj.interruptsRequested & 0x1F) > 0) {\n\t\t\tif (!parentObj.cGBC && !parentObj.usedBootROM) {\n\t\t\t\t//HALT bug in the DMG CPU model (Program Counter fails to increment for one instruction after HALT):\n\t\t\t\tparentObj.skipPCIncrement = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//CGB gets around the HALT PC bug by doubling the hidden NOP.\n\t\t\t\tparentObj.CPUTicks += 4;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t//CPU is stalled until the next IRQ match:\n\t\t\tparentObj.calculateHALTPeriod();\n\t\t}\n\t},\n\t//LD (HL), A\n\t//#0x77:\n\tfunction (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.registerA);\n\t},\n\t//LD A, B\n\t//#0x78:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = parentObj.registerB;\n\t},\n\t//LD A, C\n\t//#0x79:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = parentObj.registerC;\n\t},\n\t//LD A, D\n\t//#0x7A:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = parentObj.registerD;\n\t},\n\t//LD A, E\n\t//#0x7B:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = parentObj.registerE;\n\t},\n\t//LD A, H\n\t//#0x7C:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = parentObj.registersHL >> 8;\n\t},\n\t//LD A, L\n\t//#0x7D:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = parentObj.registersHL & 0xFF;\n\t},\n\t//LD, A, (HL)\n\t//#0x7E:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t},\n\t//LD A, A\n\t//#0x7F:\n\tfunction (parentObj) {\n\t\t//Do Nothing...\n\t},\n\t//ADD A, B\n\t//#0x80:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA + parentObj.registerB;\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//ADD A, C\n\t//#0x81:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA + parentObj.registerC;\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//ADD A, D\n\t//#0x82:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA + parentObj.registerD;\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//ADD A, E\n\t//#0x83:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA + parentObj.registerE;\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//ADD A, H\n\t//#0x84:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA + (parentObj.registersHL >> 8);\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//ADD A, L\n\t//#0x85:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA + (parentObj.registersHL & 0xFF);\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//ADD A, (HL)\n\t//#0x86:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA + parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//ADD A, A\n\t//#0x87:\n\tfunction (parentObj) {\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0x8) == 0x8);\n\t\tparentObj.FCarry = (parentObj.registerA > 0x7F);\n\t\tparentObj.registerA = (parentObj.registerA << 1) & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//ADC A, B\n\t//#0x88:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA + parentObj.registerB + ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (parentObj.registerB & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//ADC A, C\n\t//#0x89:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA + parentObj.registerC + ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (parentObj.registerC & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//ADC A, D\n\t//#0x8A:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA + parentObj.registerD + ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (parentObj.registerD & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//ADC A, E\n\t//#0x8B:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA + parentObj.registerE + ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (parentObj.registerE & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//ADC A, H\n\t//#0x8C:\n\tfunction (parentObj) {\n\t\tvar tempValue = (parentObj.registersHL >> 8);\n\t\tvar dirtySum = parentObj.registerA + tempValue + ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (tempValue & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//ADC A, L\n\t//#0x8D:\n\tfunction (parentObj) {\n\t\tvar tempValue = (parentObj.registersHL & 0xFF);\n\t\tvar dirtySum = parentObj.registerA + tempValue + ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (tempValue & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//ADC A, (HL)\n\t//#0x8E:\n\tfunction (parentObj) {\n\t\tvar tempValue = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tvar dirtySum = parentObj.registerA + tempValue + ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (tempValue & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//ADC A, A\n\t//#0x8F:\n\tfunction (parentObj) {\n\t\t//shift left register A one bit for some ops here as an optimization:\n\t\tvar dirtySum = (parentObj.registerA << 1) | ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((((parentObj.registerA << 1) & 0x1E) | ((parentObj.FCarry) ? 1 : 0)) > 0xF);\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//SUB A, B\n\t//#0x90:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.registerB;\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//SUB A, C\n\t//#0x91:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.registerC;\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//SUB A, D\n\t//#0x92:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.registerD;\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//SUB A, E\n\t//#0x93:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.registerE;\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//SUB A, H\n\t//#0x94:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - (parentObj.registersHL >> 8);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//SUB A, L\n\t//#0x95:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - (parentObj.registersHL & 0xFF);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//SUB A, (HL)\n\t//#0x96:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//SUB A, A\n\t//#0x97:\n\tfunction (parentObj) {\n\t\t//number - same number == 0\n\t\tparentObj.registerA = 0;\n\t\tparentObj.FHalfCarry = parentObj.FCarry = false;\n\t\tparentObj.FZero = parentObj.FSubtract = true;\n\t},\n\t//SBC A, B\n\t//#0x98:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.registerB - ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (parentObj.registerB & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//SBC A, C\n\t//#0x99:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.registerC - ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (parentObj.registerC & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//SBC A, D\n\t//#0x9A:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.registerD - ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (parentObj.registerD & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//SBC A, E\n\t//#0x9B:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.registerE - ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (parentObj.registerE & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//SBC A, H\n\t//#0x9C:\n\tfunction (parentObj) {\n\t\tvar temp_var = parentObj.registersHL >> 8;\n\t\tvar dirtySum = parentObj.registerA - temp_var - ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (temp_var & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//SBC A, L\n\t//#0x9D:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - (parentObj.registersHL & 0xFF) - ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (parentObj.registersHL & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//SBC A, (HL)\n\t//#0x9E:\n\tfunction (parentObj) {\n\t\tvar temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tvar dirtySum = parentObj.registerA - temp_var - ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (temp_var & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//SBC A, A\n\t//#0x9F:\n\tfunction (parentObj) {\n\t\t//Optimized SBC A:\n\t\tif (parentObj.FCarry) {\n\t\t\tparentObj.FZero = false;\n\t\t\tparentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = true;\n\t\t\tparentObj.registerA = 0xFF;\n\t\t}\n\t\telse {\n\t\t\tparentObj.FHalfCarry = parentObj.FCarry = false;\n\t\t\tparentObj.FSubtract = parentObj.FZero = true;\n\t\t\tparentObj.registerA = 0;\n\t\t}\n\t},\n\t//AND B\n\t//#0xA0:\n\tfunction (parentObj) {\n\t\tparentObj.registerA &= parentObj.registerB;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = parentObj.FCarry = false;\n\t},\n\t//AND C\n\t//#0xA1:\n\tfunction (parentObj) {\n\t\tparentObj.registerA &= parentObj.registerC;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = parentObj.FCarry = false;\n\t},\n\t//AND D\n\t//#0xA2:\n\tfunction (parentObj) {\n\t\tparentObj.registerA &= parentObj.registerD;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = parentObj.FCarry = false;\n\t},\n\t//AND E\n\t//#0xA3:\n\tfunction (parentObj) {\n\t\tparentObj.registerA &= parentObj.registerE;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = parentObj.FCarry = false;\n\t},\n\t//AND H\n\t//#0xA4:\n\tfunction (parentObj) {\n\t\tparentObj.registerA &= (parentObj.registersHL >> 8);\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = parentObj.FCarry = false;\n\t},\n\t//AND L\n\t//#0xA5:\n\tfunction (parentObj) {\n\t\tparentObj.registerA &= parentObj.registersHL;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = parentObj.FCarry = false;\n\t},\n\t//AND (HL)\n\t//#0xA6:\n\tfunction (parentObj) {\n\t\tparentObj.registerA &= parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = parentObj.FCarry = false;\n\t},\n\t//AND A\n\t//#0xA7:\n\tfunction (parentObj) {\n\t\t//number & same number = same number\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = parentObj.FCarry = false;\n\t},\n\t//XOR B\n\t//#0xA8:\n\tfunction (parentObj) {\n\t\tparentObj.registerA ^= parentObj.registerB;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n\t},\n\t//XOR C\n\t//#0xA9:\n\tfunction (parentObj) {\n\t\tparentObj.registerA ^= parentObj.registerC;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n\t},\n\t//XOR D\n\t//#0xAA:\n\tfunction (parentObj) {\n\t\tparentObj.registerA ^= parentObj.registerD;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n\t},\n\t//XOR E\n\t//#0xAB:\n\tfunction (parentObj) {\n\t\tparentObj.registerA ^= parentObj.registerE;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n\t},\n\t//XOR H\n\t//#0xAC:\n\tfunction (parentObj) {\n\t\tparentObj.registerA ^= (parentObj.registersHL >> 8);\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n\t},\n\t//XOR L\n\t//#0xAD:\n\tfunction (parentObj) {\n\t\tparentObj.registerA ^= (parentObj.registersHL & 0xFF);\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n\t},\n\t//XOR (HL)\n\t//#0xAE:\n\tfunction (parentObj) {\n\t\tparentObj.registerA ^= parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n\t},\n\t//XOR A\n\t//#0xAF:\n\tfunction (parentObj) {\n\t\t//number ^ same number == 0\n\t\tparentObj.registerA = 0;\n\t\tparentObj.FZero = true;\n\t\tparentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n\t},\n\t//OR B\n\t//#0xB0:\n\tfunction (parentObj) {\n\t\tparentObj.registerA |= parentObj.registerB;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n\t},\n\t//OR C\n\t//#0xB1:\n\tfunction (parentObj) {\n\t\tparentObj.registerA |= parentObj.registerC;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n\t},\n\t//OR D\n\t//#0xB2:\n\tfunction (parentObj) {\n\t\tparentObj.registerA |= parentObj.registerD;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n\t},\n\t//OR E\n\t//#0xB3:\n\tfunction (parentObj) {\n\t\tparentObj.registerA |= parentObj.registerE;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n\t},\n\t//OR H\n\t//#0xB4:\n\tfunction (parentObj) {\n\t\tparentObj.registerA |= (parentObj.registersHL >> 8);\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n\t},\n\t//OR L\n\t//#0xB5:\n\tfunction (parentObj) {\n\t\tparentObj.registerA |= (parentObj.registersHL & 0xFF);\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n\t},\n\t//OR (HL)\n\t//#0xB6:\n\tfunction (parentObj) {\n\t\tparentObj.registerA |= parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n\t},\n\t//OR A\n\t//#0xB7:\n\tfunction (parentObj) {\n\t\t//number | same number == same number\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n\t},\n\t//CP B\n\t//#0xB8:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.registerB;\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//CP C\n\t//#0xB9:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.registerC;\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//CP D\n\t//#0xBA:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.registerD;\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//CP E\n\t//#0xBB:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.registerE;\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//CP H\n\t//#0xBC:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - (parentObj.registersHL >> 8);\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//CP L\n\t//#0xBD:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - (parentObj.registersHL & 0xFF);\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//CP (HL)\n\t//#0xBE:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//CP A\n\t//#0xBF:\n\tfunction (parentObj) {\n\t\tparentObj.FHalfCarry = parentObj.FCarry = false;\n\t\tparentObj.FZero = parentObj.FSubtract = true;\n\t},\n\t//RET !FZ\n\t//#0xC0:\n\tfunction (parentObj) {\n\t\tif (!parentObj.FZero) {\n\t\t\tparentObj.programCounter = (parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n\t\t\tparentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;\n\t\t\tparentObj.CPUTicks += 12;\n\t\t}\n\t},\n\t//POP BC\n\t//#0xC1:\n\tfunction (parentObj) {\n\t\tparentObj.registerC = parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n\t\tparentObj.registerB = parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF);\n\t\tparentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;\n\t},\n\t//JP !FZ, nn\n\t//#0xC2:\n\tfunction (parentObj) {\n\t\tif (!parentObj.FZero) {\n\t\t\tparentObj.programCounter = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\t\tparentObj.CPUTicks += 4;\n\t\t}\n\t\telse {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t\t}\n\t},\n\t//JP nn\n\t//#0xC3:\n\tfunction (parentObj) {\n\t\tparentObj.programCounter = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t},\n\t//CALL !FZ, nn\n\t//#0xC4:\n\tfunction (parentObj) {\n\t\tif (!parentObj.FZero) {\n\t\t\tvar temp_pc = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n\t\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n\t\t\tparentObj.programCounter = temp_pc;\n\t\t\tparentObj.CPUTicks += 12;\n\t\t}\n\t\telse {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t\t}\n\t},\n\t//PUSH BC\n\t//#0xC5:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registerB);\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registerC);\n\t},\n\t//ADD, n\n\t//#0xC6:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA + parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) < (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//RST 0\n\t//#0xC7:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n\t\tparentObj.programCounter = 0;\n\t},\n\t//RET FZ\n\t//#0xC8:\n\tfunction (parentObj) {\n\t\tif (parentObj.FZero) {\n\t\t\tparentObj.programCounter = (parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n\t\t\tparentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;\n\t\t\tparentObj.CPUTicks += 12;\n\t\t}\n\t},\n\t//RET\n\t//#0xC9:\n\tfunction (parentObj) {\n\t\tparentObj.programCounter =  (parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n\t\tparentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;\n\t},\n\t//JP FZ, nn\n\t//#0xCA:\n\tfunction (parentObj) {\n\t\tif (parentObj.FZero) {\n\t\t\tparentObj.programCounter = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\t\tparentObj.CPUTicks += 4;\n\t\t}\n\t\telse {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t\t}\n\t},\n\t//Secondary OP Code Set:\n\t//#0xCB:\n\tfunction (parentObj) {\n\t\tvar opcode = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\t//Increment the program counter to the next instruction:\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t\t//Get how many CPU cycles the current 0xCBXX op code counts for:\n\t\tparentObj.CPUTicks += parentObj.SecondaryTICKTable[opcode];\n\t\t//Execute secondary OP codes for the 0xCB OP code call.\n\t\tparentObj.CBOPCODE[opcode](parentObj);\n\t},\n\t//CALL FZ, nn\n\t//#0xCC:\n\tfunction (parentObj) {\n\t\tif (parentObj.FZero) {\n\t\t\tvar temp_pc = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n\t\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n\t\t\tparentObj.programCounter = temp_pc;\n\t\t\tparentObj.CPUTicks += 12;\n\t\t}\n\t\telse {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t\t}\n\t},\n\t//CALL nn\n\t//#0xCD:\n\tfunction (parentObj) {\n\t\tvar temp_pc = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n\t\tparentObj.programCounter = temp_pc;\n\t},\n\t//ADC A, n\n\t//#0xCE:\n\tfunction (parentObj) {\n\t\tvar tempValue = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t\tvar dirtySum = parentObj.registerA + tempValue + ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) + (tempValue & 0xF) + ((parentObj.FCarry) ? 1 : 0) > 0xF);\n\t\tparentObj.FCarry = (dirtySum > 0xFF);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = false;\n\t},\n\t//RST 0x8\n\t//#0xCF:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n\t\tparentObj.programCounter = 0x8;\n\t},\n\t//RET !FC\n\t//#0xD0:\n\tfunction (parentObj) {\n\t\tif (!parentObj.FCarry) {\n\t\t\tparentObj.programCounter = (parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n\t\t\tparentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;\n\t\t\tparentObj.CPUTicks += 12;\n\t\t}\n\t},\n\t//POP DE\n\t//#0xD1:\n\tfunction (parentObj) {\n\t\tparentObj.registerE = parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n\t\tparentObj.registerD = parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF);\n\t\tparentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;\n\t},\n\t//JP !FC, nn\n\t//#0xD2:\n\tfunction (parentObj) {\n\t\tif (!parentObj.FCarry) {\n\t\t\tparentObj.programCounter = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\t\tparentObj.CPUTicks += 4;\n\t\t}\n\t\telse {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t\t}\n\t},\n\t//0xD3 - Illegal\n\t//#0xD3:\n\tfunction (parentObj) {\n\t\tconsole.log(\"Illegal op code 0xD3 called, pausing emulation.\");\n\t\t//pause();\n\t},\n\t//CALL !FC, nn\n\t//#0xD4:\n\tfunction (parentObj) {\n\t\tif (!parentObj.FCarry) {\n\t\t\tvar temp_pc = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n\t\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n\t\t\tparentObj.programCounter = temp_pc;\n\t\t\tparentObj.CPUTicks += 12;\n\t\t}\n\t\telse {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t\t}\n\t},\n\t//PUSH DE\n\t//#0xD5:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registerD);\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registerE);\n\t},\n\t//SUB A, n\n\t//#0xD6:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) < (dirtySum & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//RST 0x10\n\t//#0xD7:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n\t\tparentObj.programCounter = 0x10;\n\t},\n\t//RET FC\n\t//#0xD8:\n\tfunction (parentObj) {\n\t\tif (parentObj.FCarry) {\n\t\t\tparentObj.programCounter = (parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n\t\t\tparentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;\n\t\t\tparentObj.CPUTicks += 12;\n\t\t}\n\t},\n\t//RETI\n\t//#0xD9:\n\tfunction (parentObj) {\n\t\tparentObj.programCounter = (parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n\t\tparentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;\n\t\t//Immediate for HALT:\n\t\tparentObj.IRQEnableDelay = (parentObj.IRQEnableDelay == 2 || parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) == 0x76) ? 1 : 2;\n\t},\n\t//JP FC, nn\n\t//#0xDA:\n\tfunction (parentObj) {\n\t\tif (parentObj.FCarry) {\n\t\t\tparentObj.programCounter = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\t\tparentObj.CPUTicks += 4;\n\t\t}\n\t\telse {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t\t}\n\t},\n\t//0xDB - Illegal\n\t//#0xDB:\n\tfunction (parentObj) {\n\t\tconsole.log(\"Illegal op code 0xDB called, pausing emulation.\");\n\t\t//pause();\n\t},\n\t//CALL FC, nn\n\t//#0xDC:\n\tfunction (parentObj) {\n\t\tif (parentObj.FCarry) {\n\t\t\tvar temp_pc = (parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n\t\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n\t\t\tparentObj.programCounter = temp_pc;\n\t\t\tparentObj.CPUTicks += 12;\n\t\t}\n\t\telse {\n\t\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t\t}\n\t},\n\t//0xDD - Illegal\n\t//#0xDD:\n\tfunction (parentObj) {\n\t\tconsole.log(\"Illegal op code 0xDD called, pausing emulation.\");\n\t\t//pause();\n\t},\n\t//SBC A, n\n\t//#0xDE:\n\tfunction (parentObj) {\n\t\tvar temp_var = parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t\tvar dirtySum = parentObj.registerA - temp_var - ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = ((parentObj.registerA & 0xF) - (temp_var & 0xF) - ((parentObj.FCarry) ? 1 : 0) < 0);\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.registerA = dirtySum & 0xFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//RST 0x18\n\t//#0xDF:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n\t\tparentObj.programCounter = 0x18;\n\t},\n\t//LDH (n), A\n\t//#0xE0:\n\tfunction (parentObj) {\n\t\tparentObj.memoryHighWrite(parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter), parentObj.registerA);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t},\n\t//POP HL\n\t//#0xE1:\n\tfunction (parentObj) {\n\t\tparentObj.registersHL = (parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n\t\tparentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;\n\t},\n\t//LD (0xFF00 + C), A\n\t//#0xE2:\n\tfunction (parentObj) {\n\t\tparentObj.memoryHighWriter[parentObj.registerC](parentObj, parentObj.registerC, parentObj.registerA);\n\t},\n\t//0xE3 - Illegal\n\t//#0xE3:\n\tfunction (parentObj) {\n\t\tconsole.log(\"Illegal op code 0xE3 called, pausing emulation.\", 2);\n\t\t//pause();\n\t},\n\t//0xE4 - Illegal\n\t//#0xE4:\n\tfunction (parentObj) {\n\t\tconsole.log(\"Illegal op code 0xE4 called, pausing emulation.\", 2);\n\t\t//pause();\n\t},\n\t//PUSH HL\n\t//#0xE5:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registersHL >> 8);\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registersHL & 0xFF);\n\t},\n\t//AND n\n\t//#0xE6:\n\tfunction (parentObj) {\n\t\tparentObj.registerA &= parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = parentObj.FCarry = false;\n\t},\n\t//RST 0x20\n\t//#0xE7:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n\t\tparentObj.programCounter = 0x20;\n\t},\n\t//ADD SP, n\n\t//#0xE8:\n\tfunction (parentObj) {\n\t\tvar temp_value2 = (parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24) >> 24;\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t\tvar temp_value = (parentObj.stackPointer + temp_value2) & 0xFFFF;\n\t\ttemp_value2 = parentObj.stackPointer ^ temp_value2 ^ temp_value;\n\t\tparentObj.stackPointer = temp_value;\n\t\tparentObj.FCarry = ((temp_value2 & 0x100) == 0x100);\n\t\tparentObj.FHalfCarry = ((temp_value2 & 0x10) == 0x10);\n\t\tparentObj.FZero = parentObj.FSubtract = false;\n\t},\n\t//JP, (HL)\n\t//#0xE9:\n\tfunction (parentObj) {\n\t\tparentObj.programCounter = parentObj.registersHL;\n\t},\n\t//LD n, A\n\t//#0xEA:\n\tfunction (parentObj) {\n\t\tparentObj.memoryWrite((parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter), parentObj.registerA);\n\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t},\n\t//0xEB - Illegal\n\t//#0xEB:\n\tfunction (parentObj) {\n\t\tconsole.log(\"Illegal op code 0xEB called, pausing emulation.\", 2);\n\t\t//pause();\n\t},\n\t//0xEC - Illegal\n\t//#0xEC:\n\tfunction (parentObj) {\n\t\tconsole.log(\"Illegal op code 0xEC called, pausing emulation.\", 2);\n\t\t//pause();\n\t},\n\t//0xED - Illegal\n\t//#0xED:\n\tfunction (parentObj) {\n\t\tconsole.log(\"Illegal op code 0xED called, pausing emulation.\", 2);\n\t\t//pause();\n\t},\n\t//XOR n\n\t//#0xEE:\n\tfunction (parentObj) {\n\t\tparentObj.registerA ^= parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FSubtract = parentObj.FHalfCarry = parentObj.FCarry = false;\n\t},\n\t//RST 0x28\n\t//#0xEF:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n\t\tparentObj.programCounter = 0x28;\n\t},\n\t//LDH A, (n)\n\t//#0xF0:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = parentObj.memoryHighRead(parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter));\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t},\n\t//POP AF\n\t//#0xF1:\n\tfunction (parentObj) {\n\t\tvar temp_var = parentObj.memoryReader[parentObj.stackPointer](parentObj, parentObj.stackPointer);\n\t\tparentObj.FZero = (temp_var > 0x7F);\n\t\tparentObj.FSubtract = ((temp_var & 0x40) == 0x40);\n\t\tparentObj.FHalfCarry = ((temp_var & 0x20) == 0x20);\n\t\tparentObj.FCarry = ((temp_var & 0x10) == 0x10);\n\t\tparentObj.registerA = parentObj.memoryRead((parentObj.stackPointer + 1) & 0xFFFF);\n\t\tparentObj.stackPointer = (parentObj.stackPointer + 2) & 0xFFFF;\n\t},\n\t//LD A, (0xFF00 + C)\n\t//#0xF2:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = parentObj.memoryHighReader[parentObj.registerC](parentObj, parentObj.registerC);\n\t},\n\t//DI\n\t//#0xF3:\n\tfunction (parentObj) {\n\t\tparentObj.IME = false;\n\t\tparentObj.IRQEnableDelay = 0;\n\t},\n\t//0xF4 - Illegal\n\t//#0xF4:\n\tfunction (parentObj) {\n\t\tconsole.log(\"Illegal op code 0xF4 called, pausing emulation.\", 2);\n\t\t//pause();\n\t},\n\t//PUSH AF\n\t//#0xF5:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.registerA);\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, ((parentObj.FZero) ? 0x80 : 0) | ((parentObj.FSubtract) ? 0x40 : 0) | ((parentObj.FHalfCarry) ? 0x20 : 0) | ((parentObj.FCarry) ? 0x10 : 0));\n\t},\n\t//OR n\n\t//#0xF6:\n\tfunction (parentObj) {\n\t\tparentObj.registerA |= parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t\tparentObj.FSubtract = parentObj.FCarry = parentObj.FHalfCarry = false;\n\t},\n\t//RST 0x30\n\t//#0xF7:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n\t\tparentObj.programCounter = 0x30;\n\t},\n\t//LDHL SP, n\n\t//#0xF8:\n\tfunction (parentObj) {\n\t\tvar temp_var = (parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) << 24) >> 24;\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t\tparentObj.registersHL = (parentObj.stackPointer + temp_var) & 0xFFFF;\n\t\ttemp_var = parentObj.stackPointer ^ temp_var ^ parentObj.registersHL;\n\t\tparentObj.FCarry = ((temp_var & 0x100) == 0x100);\n\t\tparentObj.FHalfCarry = ((temp_var & 0x10) == 0x10);\n\t\tparentObj.FZero = parentObj.FSubtract = false;\n\t},\n\t//LD SP, HL\n\t//#0xF9:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = parentObj.registersHL;\n\t},\n\t//LD A, (nn)\n\t//#0xFA:\n\tfunction (parentObj) {\n\t\tparentObj.registerA = parentObj.memoryRead((parentObj.memoryRead((parentObj.programCounter + 1) & 0xFFFF) << 8) | parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter));\n\t\tparentObj.programCounter = (parentObj.programCounter + 2) & 0xFFFF;\n\t},\n\t//EI\n\t//#0xFB:\n\tfunction (parentObj) {\n\t\t//Immediate for HALT:\n\t\tparentObj.IRQEnableDelay = (parentObj.IRQEnableDelay == 2 || parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter) == 0x76) ? 1 : 2;\n\t},\n\t//0xFC - Illegal\n\t//#0xFC:\n\tfunction (parentObj) {\n\t\tconsole.log(\"Illegal op code 0xFC called, pausing emulation.\", 2);\n\t\t//pause();\n\t},\n\t//0xFD - Illegal\n\t//#0xFD:\n\tfunction (parentObj) {\n\t\tconsole.log(\"Illegal op code 0xFD called, pausing emulation.\", 2);\n\t\t//pause();\n\t},\n\t//CP n\n\t//#0xFE:\n\tfunction (parentObj) {\n\t\tvar dirtySum = parentObj.registerA - parentObj.memoryReader[parentObj.programCounter](parentObj, parentObj.programCounter);\n\t\tparentObj.programCounter = (parentObj.programCounter + 1) & 0xFFFF;\n\t\tparentObj.FHalfCarry = ((dirtySum & 0xF) > (parentObj.registerA & 0xF));\n\t\tparentObj.FCarry = (dirtySum < 0);\n\t\tparentObj.FZero = (dirtySum == 0);\n\t\tparentObj.FSubtract = true;\n\t},\n\t//RST 0x38\n\t//#0xFF:\n\tfunction (parentObj) {\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter >> 8);\n\t\tparentObj.stackPointer = (parentObj.stackPointer - 1) & 0xFFFF;\n\t\tparentObj.memoryWriter[parentObj.stackPointer](parentObj, parentObj.stackPointer, parentObj.programCounter & 0xFF);\n\t\tparentObj.programCounter = 0x38;\n\t}\n];\n\n\nmodule.exports = OPCODE;\n","var CBOPCODE = [\n\t//RLC B\n\t//#0x00:\n\tfunction (parentObj) {\n\t\tparentObj.FCarry = (parentObj.registerB > 0x7F);\n\t\tparentObj.registerB = ((parentObj.registerB << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerB == 0);\n\t}\n\t//RLC C\n\t//#0x01:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = (parentObj.registerC > 0x7F);\n\t\tparentObj.registerC = ((parentObj.registerC << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerC == 0);\n\t}\n\t//RLC D\n\t//#0x02:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = (parentObj.registerD > 0x7F);\n\t\tparentObj.registerD = ((parentObj.registerD << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerD == 0);\n\t}\n\t//RLC E\n\t//#0x03:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = (parentObj.registerE > 0x7F);\n\t\tparentObj.registerE = ((parentObj.registerE << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerE == 0);\n\t}\n\t//RLC H\n\t//#0x04:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = (parentObj.registersHL > 0x7FFF);\n\t\tparentObj.registersHL = ((parentObj.registersHL << 1) & 0xFE00) | ((parentObj.FCarry) ? 0x100 : 0) | (parentObj.registersHL & 0xFF);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registersHL < 0x100);\n\t}\n\t//RLC L\n\t//#0x05:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registersHL & 0x80) == 0x80);\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | ((parentObj.registersHL << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);\n\t}\n\t//RLC (HL)\n\t//#0x06:\n\t,function (parentObj) {\n\t\tvar temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tparentObj.FCarry = (temp_var > 0x7F);\n\t\ttemp_var = ((temp_var << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (temp_var == 0);\n\t}\n\t//RLC A\n\t//#0x07:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = (parentObj.registerA > 0x7F);\n\t\tparentObj.registerA = ((parentObj.registerA << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t}\n\t//RRC B\n\t//#0x08:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registerB & 0x01) == 0x01);\n\t\tparentObj.registerB = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerB >> 1);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerB == 0);\n\t}\n\t//RRC C\n\t//#0x09:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registerC & 0x01) == 0x01);\n\t\tparentObj.registerC = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerC >> 1);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerC == 0);\n\t}\n\t//RRC D\n\t//#0x0A:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registerD & 0x01) == 0x01);\n\t\tparentObj.registerD = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerD >> 1);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerD == 0);\n\t}\n\t//RRC E\n\t//#0x0B:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registerE & 0x01) == 0x01);\n\t\tparentObj.registerE = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerE >> 1);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerE == 0);\n\t}\n\t//RRC H\n\t//#0x0C:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registersHL & 0x0100) == 0x0100);\n\t\tparentObj.registersHL = ((parentObj.FCarry) ? 0x8000 : 0) | ((parentObj.registersHL >> 1) & 0xFF00) | (parentObj.registersHL & 0xFF);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registersHL < 0x100);\n\t}\n\t//RRC L\n\t//#0x0D:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registersHL & 0x01) == 0x01);\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | ((parentObj.FCarry) ? 0x80 : 0) | ((parentObj.registersHL & 0xFF) >> 1);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);\n\t}\n\t//RRC (HL)\n\t//#0x0E:\n\t,function (parentObj) {\n\t\tvar temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tparentObj.FCarry = ((temp_var & 0x01) == 0x01);\n\t\ttemp_var = ((parentObj.FCarry) ? 0x80 : 0) | (temp_var >> 1);\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (temp_var == 0);\n\t}\n\t//RRC A\n\t//#0x0F:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registerA & 0x01) == 0x01);\n\t\tparentObj.registerA = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerA >> 1);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t}\n\t//RL B\n\t//#0x10:\n\t,function (parentObj) {\n\t\tvar newFCarry = (parentObj.registerB > 0x7F);\n\t\tparentObj.registerB = ((parentObj.registerB << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerB == 0);\n\t}\n\t//RL C\n\t//#0x11:\n\t,function (parentObj) {\n\t\tvar newFCarry = (parentObj.registerC > 0x7F);\n\t\tparentObj.registerC = ((parentObj.registerC << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerC == 0);\n\t}\n\t//RL D\n\t//#0x12:\n\t,function (parentObj) {\n\t\tvar newFCarry = (parentObj.registerD > 0x7F);\n\t\tparentObj.registerD = ((parentObj.registerD << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerD == 0);\n\t}\n\t//RL E\n\t//#0x13:\n\t,function (parentObj) {\n\t\tvar newFCarry = (parentObj.registerE > 0x7F);\n\t\tparentObj.registerE = ((parentObj.registerE << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerE == 0);\n\t}\n\t//RL H\n\t//#0x14:\n\t,function (parentObj) {\n\t\tvar newFCarry = (parentObj.registersHL > 0x7FFF);\n\t\tparentObj.registersHL = ((parentObj.registersHL << 1) & 0xFE00) | ((parentObj.FCarry) ? 0x100 : 0) | (parentObj.registersHL & 0xFF);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registersHL < 0x100);\n\t}\n\t//RL L\n\t//#0x15:\n\t,function (parentObj) {\n\t\tvar newFCarry = ((parentObj.registersHL & 0x80) == 0x80);\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | ((parentObj.registersHL << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);\n\t}\n\t//RL (HL)\n\t//#0x16:\n\t,function (parentObj) {\n\t\tvar temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tvar newFCarry = (temp_var > 0x7F);\n\t\ttemp_var = ((temp_var << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (temp_var == 0);\n\t}\n\t//RL A\n\t//#0x17:\n\t,function (parentObj) {\n\t\tvar newFCarry = (parentObj.registerA > 0x7F);\n\t\tparentObj.registerA = ((parentObj.registerA << 1) & 0xFF) | ((parentObj.FCarry) ? 1 : 0);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t}\n\t//RR B\n\t//#0x18:\n\t,function (parentObj) {\n\t\tvar newFCarry = ((parentObj.registerB & 0x01) == 0x01);\n\t\tparentObj.registerB = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerB >> 1);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerB == 0);\n\t}\n\t//RR C\n\t//#0x19:\n\t,function (parentObj) {\n\t\tvar newFCarry = ((parentObj.registerC & 0x01) == 0x01);\n\t\tparentObj.registerC = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerC >> 1);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerC == 0);\n\t}\n\t//RR D\n\t//#0x1A:\n\t,function (parentObj) {\n\t\tvar newFCarry = ((parentObj.registerD & 0x01) == 0x01);\n\t\tparentObj.registerD = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerD >> 1);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerD == 0);\n\t}\n\t//RR E\n\t//#0x1B:\n\t,function (parentObj) {\n\t\tvar newFCarry = ((parentObj.registerE & 0x01) == 0x01);\n\t\tparentObj.registerE = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerE >> 1);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerE == 0);\n\t}\n\t//RR H\n\t//#0x1C:\n\t,function (parentObj) {\n\t\tvar newFCarry = ((parentObj.registersHL & 0x0100) == 0x0100);\n\t\tparentObj.registersHL = ((parentObj.FCarry) ? 0x8000 : 0) | ((parentObj.registersHL >> 1) & 0xFF00) | (parentObj.registersHL & 0xFF);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registersHL < 0x100);\n\t}\n\t//RR L\n\t//#0x1D:\n\t,function (parentObj) {\n\t\tvar newFCarry = ((parentObj.registersHL & 0x01) == 0x01);\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | ((parentObj.FCarry) ? 0x80 : 0) | ((parentObj.registersHL & 0xFF) >> 1);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);\n\t}\n\t//RR (HL)\n\t//#0x1E:\n\t,function (parentObj) {\n\t\tvar temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tvar newFCarry = ((temp_var & 0x01) == 0x01);\n\t\ttemp_var = ((parentObj.FCarry) ? 0x80 : 0) | (temp_var >> 1);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (temp_var == 0);\n\t}\n\t//RR A\n\t//#0x1F:\n\t,function (parentObj) {\n\t\tvar newFCarry = ((parentObj.registerA & 0x01) == 0x01);\n\t\tparentObj.registerA = ((parentObj.FCarry) ? 0x80 : 0) | (parentObj.registerA >> 1);\n\t\tparentObj.FCarry = newFCarry;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t}\n\t//SLA B\n\t//#0x20:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = (parentObj.registerB > 0x7F);\n\t\tparentObj.registerB = (parentObj.registerB << 1) & 0xFF;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerB == 0);\n\t}\n\t//SLA C\n\t//#0x21:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = (parentObj.registerC > 0x7F);\n\t\tparentObj.registerC = (parentObj.registerC << 1) & 0xFF;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerC == 0);\n\t}\n\t//SLA D\n\t//#0x22:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = (parentObj.registerD > 0x7F);\n\t\tparentObj.registerD = (parentObj.registerD << 1) & 0xFF;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerD == 0);\n\t}\n\t//SLA E\n\t//#0x23:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = (parentObj.registerE > 0x7F);\n\t\tparentObj.registerE = (parentObj.registerE << 1) & 0xFF;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerE == 0);\n\t}\n\t//SLA H\n\t//#0x24:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = (parentObj.registersHL > 0x7FFF);\n\t\tparentObj.registersHL = ((parentObj.registersHL << 1) & 0xFE00) | (parentObj.registersHL & 0xFF);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registersHL < 0x100);\n\t}\n\t//SLA L\n\t//#0x25:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registersHL & 0x0080) == 0x0080);\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | ((parentObj.registersHL << 1) & 0xFF);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);\n\t}\n\t//SLA (HL)\n\t//#0x26:\n\t,function (parentObj) {\n\t\tvar temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tparentObj.FCarry = (temp_var > 0x7F);\n\t\ttemp_var = (temp_var << 1) & 0xFF;\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (temp_var == 0);\n\t}\n\t//SLA A\n\t//#0x27:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = (parentObj.registerA > 0x7F);\n\t\tparentObj.registerA = (parentObj.registerA << 1) & 0xFF;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t}\n\t//SRA B\n\t//#0x28:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registerB & 0x01) == 0x01);\n\t\tparentObj.registerB = (parentObj.registerB & 0x80) | (parentObj.registerB >> 1);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerB == 0);\n\t}\n\t//SRA C\n\t//#0x29:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registerC & 0x01) == 0x01);\n\t\tparentObj.registerC = (parentObj.registerC & 0x80) | (parentObj.registerC >> 1);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerC == 0);\n\t}\n\t//SRA D\n\t//#0x2A:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registerD & 0x01) == 0x01);\n\t\tparentObj.registerD = (parentObj.registerD & 0x80) | (parentObj.registerD >> 1);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerD == 0);\n\t}\n\t//SRA E\n\t//#0x2B:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registerE & 0x01) == 0x01);\n\t\tparentObj.registerE = (parentObj.registerE & 0x80) | (parentObj.registerE >> 1);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerE == 0);\n\t}\n\t//SRA H\n\t//#0x2C:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registersHL & 0x0100) == 0x0100);\n\t\tparentObj.registersHL = ((parentObj.registersHL >> 1) & 0xFF00) | (parentObj.registersHL & 0x80FF);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registersHL < 0x100);\n\t}\n\t//SRA L\n\t//#0x2D:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registersHL & 0x0001) == 0x0001);\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF80) | ((parentObj.registersHL & 0xFF) >> 1);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);\n\t}\n\t//SRA (HL)\n\t//#0x2E:\n\t,function (parentObj) {\n\t\tvar temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tparentObj.FCarry = ((temp_var & 0x01) == 0x01);\n\t\ttemp_var = (temp_var & 0x80) | (temp_var >> 1);\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (temp_var == 0);\n\t}\n\t//SRA A\n\t//#0x2F:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registerA & 0x01) == 0x01);\n\t\tparentObj.registerA = (parentObj.registerA & 0x80) | (parentObj.registerA >> 1);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t}\n\t//SWAP B\n\t//#0x30:\n\t,function (parentObj) {\n\t\tparentObj.registerB = ((parentObj.registerB & 0xF) << 4) | (parentObj.registerB >> 4);\n\t\tparentObj.FZero = (parentObj.registerB == 0);\n\t\tparentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n\t}\n\t//SWAP C\n\t//#0x31:\n\t,function (parentObj) {\n\t\tparentObj.registerC = ((parentObj.registerC & 0xF) << 4) | (parentObj.registerC >> 4);\n\t\tparentObj.FZero = (parentObj.registerC == 0);\n\t\tparentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n\t}\n\t//SWAP D\n\t//#0x32:\n\t,function (parentObj) {\n\t\tparentObj.registerD = ((parentObj.registerD & 0xF) << 4) | (parentObj.registerD >> 4);\n\t\tparentObj.FZero = (parentObj.registerD == 0);\n\t\tparentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n\t}\n\t//SWAP E\n\t//#0x33:\n\t,function (parentObj) {\n\t\tparentObj.registerE = ((parentObj.registerE & 0xF) << 4) | (parentObj.registerE >> 4);\n\t\tparentObj.FZero = (parentObj.registerE == 0);\n\t\tparentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n\t}\n\t//SWAP H\n\t//#0x34:\n\t,function (parentObj) {\n\t\tparentObj.registersHL = ((parentObj.registersHL & 0xF00) << 4) | ((parentObj.registersHL & 0xF000) >> 4) | (parentObj.registersHL & 0xFF);\n\t\tparentObj.FZero = (parentObj.registersHL < 0x100);\n\t\tparentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n\t}\n\t//SWAP L\n\t//#0x35:\n\t,function (parentObj) {\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | ((parentObj.registersHL & 0xF) << 4) | ((parentObj.registersHL & 0xF0) >> 4);\n\t\tparentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);\n\t\tparentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n\t}\n\t//SWAP (HL)\n\t//#0x36:\n\t,function (parentObj) {\n\t\tvar temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\ttemp_var = ((temp_var & 0xF) << 4) | (temp_var >> 4);\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var);\n\t\tparentObj.FZero = (temp_var == 0);\n\t\tparentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n\t}\n\t//SWAP A\n\t//#0x37:\n\t,function (parentObj) {\n\t\tparentObj.registerA = ((parentObj.registerA & 0xF) << 4) | (parentObj.registerA >> 4);\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t\tparentObj.FCarry = parentObj.FHalfCarry = parentObj.FSubtract = false;\n\t}\n\t//SRL B\n\t//#0x38:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registerB & 0x01) == 0x01);\n\t\tparentObj.registerB >>= 1;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerB == 0);\n\t}\n\t//SRL C\n\t//#0x39:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registerC & 0x01) == 0x01);\n\t\tparentObj.registerC >>= 1;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerC == 0);\n\t}\n\t//SRL D\n\t//#0x3A:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registerD & 0x01) == 0x01);\n\t\tparentObj.registerD >>= 1;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerD == 0);\n\t}\n\t//SRL E\n\t//#0x3B:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registerE & 0x01) == 0x01);\n\t\tparentObj.registerE >>= 1;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerE == 0);\n\t}\n\t//SRL H\n\t//#0x3C:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registersHL & 0x0100) == 0x0100);\n\t\tparentObj.registersHL = ((parentObj.registersHL >> 1) & 0xFF00) | (parentObj.registersHL & 0xFF);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registersHL < 0x100);\n\t}\n\t//SRL L\n\t//#0x3D:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registersHL & 0x0001) == 0x0001);\n\t\tparentObj.registersHL = (parentObj.registersHL & 0xFF00) | ((parentObj.registersHL & 0xFF) >> 1);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0xFF) == 0);\n\t}\n\t//SRL (HL)\n\t//#0x3E:\n\t,function (parentObj) {\n\t\tvar temp_var = parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL);\n\t\tparentObj.FCarry = ((temp_var & 0x01) == 0x01);\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, temp_var >> 1);\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (temp_var < 2);\n\t}\n\t//SRL A\n\t//#0x3F:\n\t,function (parentObj) {\n\t\tparentObj.FCarry = ((parentObj.registerA & 0x01) == 0x01);\n\t\tparentObj.registerA >>= 1;\n\t\tparentObj.FHalfCarry = parentObj.FSubtract = false;\n\t\tparentObj.FZero = (parentObj.registerA == 0);\n\t}\n\t//BIT 0, B\n\t//#0x40:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerB & 0x01) == 0);\n\t}\n\t//BIT 0, C\n\t//#0x41:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerC & 0x01) == 0);\n\t}\n\t//BIT 0, D\n\t//#0x42:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerD & 0x01) == 0);\n\t}\n\t//BIT 0, E\n\t//#0x43:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerE & 0x01) == 0);\n\t}\n\t//BIT 0, H\n\t//#0x44:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x0100) == 0);\n\t}\n\t//BIT 0, L\n\t//#0x45:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x0001) == 0);\n\t}\n\t//BIT 0, (HL)\n\t//#0x46:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x01) == 0);\n\t}\n\t//BIT 0, A\n\t//#0x47:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerA & 0x01) == 0);\n\t}\n\t//BIT 1, B\n\t//#0x48:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerB & 0x02) == 0);\n\t}\n\t//BIT 1, C\n\t//#0x49:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerC & 0x02) == 0);\n\t}\n\t//BIT 1, D\n\t//#0x4A:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerD & 0x02) == 0);\n\t}\n\t//BIT 1, E\n\t//#0x4B:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerE & 0x02) == 0);\n\t}\n\t//BIT 1, H\n\t//#0x4C:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x0200) == 0);\n\t}\n\t//BIT 1, L\n\t//#0x4D:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x0002) == 0);\n\t}\n\t//BIT 1, (HL)\n\t//#0x4E:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x02) == 0);\n\t}\n\t//BIT 1, A\n\t//#0x4F:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerA & 0x02) == 0);\n\t}\n\t//BIT 2, B\n\t//#0x50:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerB & 0x04) == 0);\n\t}\n\t//BIT 2, C\n\t//#0x51:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerC & 0x04) == 0);\n\t}\n\t//BIT 2, D\n\t//#0x52:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerD & 0x04) == 0);\n\t}\n\t//BIT 2, E\n\t//#0x53:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerE & 0x04) == 0);\n\t}\n\t//BIT 2, H\n\t//#0x54:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x0400) == 0);\n\t}\n\t//BIT 2, L\n\t//#0x55:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x0004) == 0);\n\t}\n\t//BIT 2, (HL)\n\t//#0x56:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x04) == 0);\n\t}\n\t//BIT 2, A\n\t//#0x57:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerA & 0x04) == 0);\n\t}\n\t//BIT 3, B\n\t//#0x58:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerB & 0x08) == 0);\n\t}\n\t//BIT 3, C\n\t//#0x59:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerC & 0x08) == 0);\n\t}\n\t//BIT 3, D\n\t//#0x5A:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerD & 0x08) == 0);\n\t}\n\t//BIT 3, E\n\t//#0x5B:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerE & 0x08) == 0);\n\t}\n\t//BIT 3, H\n\t//#0x5C:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x0800) == 0);\n\t}\n\t//BIT 3, L\n\t//#0x5D:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x0008) == 0);\n\t}\n\t//BIT 3, (HL)\n\t//#0x5E:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x08) == 0);\n\t}\n\t//BIT 3, A\n\t//#0x5F:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerA & 0x08) == 0);\n\t}\n\t//BIT 4, B\n\t//#0x60:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerB & 0x10) == 0);\n\t}\n\t//BIT 4, C\n\t//#0x61:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerC & 0x10) == 0);\n\t}\n\t//BIT 4, D\n\t//#0x62:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerD & 0x10) == 0);\n\t}\n\t//BIT 4, E\n\t//#0x63:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerE & 0x10) == 0);\n\t}\n\t//BIT 4, H\n\t//#0x64:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x1000) == 0);\n\t}\n\t//BIT 4, L\n\t//#0x65:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x0010) == 0);\n\t}\n\t//BIT 4, (HL)\n\t//#0x66:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x10) == 0);\n\t}\n\t//BIT 4, A\n\t//#0x67:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerA & 0x10) == 0);\n\t}\n\t//BIT 5, B\n\t//#0x68:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerB & 0x20) == 0);\n\t}\n\t//BIT 5, C\n\t//#0x69:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerC & 0x20) == 0);\n\t}\n\t//BIT 5, D\n\t//#0x6A:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerD & 0x20) == 0);\n\t}\n\t//BIT 5, E\n\t//#0x6B:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerE & 0x20) == 0);\n\t}\n\t//BIT 5, H\n\t//#0x6C:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x2000) == 0);\n\t}\n\t//BIT 5, L\n\t//#0x6D:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x0020) == 0);\n\t}\n\t//BIT 5, (HL)\n\t//#0x6E:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x20) == 0);\n\t}\n\t//BIT 5, A\n\t//#0x6F:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerA & 0x20) == 0);\n\t}\n\t//BIT 6, B\n\t//#0x70:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerB & 0x40) == 0);\n\t}\n\t//BIT 6, C\n\t//#0x71:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerC & 0x40) == 0);\n\t}\n\t//BIT 6, D\n\t//#0x72:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerD & 0x40) == 0);\n\t}\n\t//BIT 6, E\n\t//#0x73:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerE & 0x40) == 0);\n\t}\n\t//BIT 6, H\n\t//#0x74:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x4000) == 0);\n\t}\n\t//BIT 6, L\n\t//#0x75:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x0040) == 0);\n\t}\n\t//BIT 6, (HL)\n\t//#0x76:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x40) == 0);\n\t}\n\t//BIT 6, A\n\t//#0x77:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerA & 0x40) == 0);\n\t}\n\t//BIT 7, B\n\t//#0x78:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerB & 0x80) == 0);\n\t}\n\t//BIT 7, C\n\t//#0x79:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerC & 0x80) == 0);\n\t}\n\t//BIT 7, D\n\t//#0x7A:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerD & 0x80) == 0);\n\t}\n\t//BIT 7, E\n\t//#0x7B:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerE & 0x80) == 0);\n\t}\n\t//BIT 7, H\n\t//#0x7C:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x8000) == 0);\n\t}\n\t//BIT 7, L\n\t//#0x7D:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registersHL & 0x0080) == 0);\n\t}\n\t//BIT 7, (HL)\n\t//#0x7E:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x80) == 0);\n\t}\n\t//BIT 7, A\n\t//#0x7F:\n\t,function (parentObj) {\n\t\tparentObj.FHalfCarry = true;\n\t\tparentObj.FSubtract = false;\n\t\tparentObj.FZero = ((parentObj.registerA & 0x80) == 0);\n\t}\n\t//RES 0, B\n\t//#0x80:\n\t,function (parentObj) {\n\t\tparentObj.registerB &= 0xFE;\n\t}\n\t//RES 0, C\n\t//#0x81:\n\t,function (parentObj) {\n\t\tparentObj.registerC &= 0xFE;\n\t}\n\t//RES 0, D\n\t//#0x82:\n\t,function (parentObj) {\n\t\tparentObj.registerD &= 0xFE;\n\t}\n\t//RES 0, E\n\t//#0x83:\n\t,function (parentObj) {\n\t\tparentObj.registerE &= 0xFE;\n\t}\n\t//RES 0, H\n\t//#0x84:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0xFEFF;\n\t}\n\t//RES 0, L\n\t//#0x85:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0xFFFE;\n\t}\n\t//RES 0, (HL)\n\t//#0x86:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xFE);\n\t}\n\t//RES 0, A\n\t//#0x87:\n\t,function (parentObj) {\n\t\tparentObj.registerA &= 0xFE;\n\t}\n\t//RES 1, B\n\t//#0x88:\n\t,function (parentObj) {\n\t\tparentObj.registerB &= 0xFD;\n\t}\n\t//RES 1, C\n\t//#0x89:\n\t,function (parentObj) {\n\t\tparentObj.registerC &= 0xFD;\n\t}\n\t//RES 1, D\n\t//#0x8A:\n\t,function (parentObj) {\n\t\tparentObj.registerD &= 0xFD;\n\t}\n\t//RES 1, E\n\t//#0x8B:\n\t,function (parentObj) {\n\t\tparentObj.registerE &= 0xFD;\n\t}\n\t//RES 1, H\n\t//#0x8C:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0xFDFF;\n\t}\n\t//RES 1, L\n\t//#0x8D:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0xFFFD;\n\t}\n\t//RES 1, (HL)\n\t//#0x8E:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xFD);\n\t}\n\t//RES 1, A\n\t//#0x8F:\n\t,function (parentObj) {\n\t\tparentObj.registerA &= 0xFD;\n\t}\n\t//RES 2, B\n\t//#0x90:\n\t,function (parentObj) {\n\t\tparentObj.registerB &= 0xFB;\n\t}\n\t//RES 2, C\n\t//#0x91:\n\t,function (parentObj) {\n\t\tparentObj.registerC &= 0xFB;\n\t}\n\t//RES 2, D\n\t//#0x92:\n\t,function (parentObj) {\n\t\tparentObj.registerD &= 0xFB;\n\t}\n\t//RES 2, E\n\t//#0x93:\n\t,function (parentObj) {\n\t\tparentObj.registerE &= 0xFB;\n\t}\n\t//RES 2, H\n\t//#0x94:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0xFBFF;\n\t}\n\t//RES 2, L\n\t//#0x95:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0xFFFB;\n\t}\n\t//RES 2, (HL)\n\t//#0x96:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xFB);\n\t}\n\t//RES 2, A\n\t//#0x97:\n\t,function (parentObj) {\n\t\tparentObj.registerA &= 0xFB;\n\t}\n\t//RES 3, B\n\t//#0x98:\n\t,function (parentObj) {\n\t\tparentObj.registerB &= 0xF7;\n\t}\n\t//RES 3, C\n\t//#0x99:\n\t,function (parentObj) {\n\t\tparentObj.registerC &= 0xF7;\n\t}\n\t//RES 3, D\n\t//#0x9A:\n\t,function (parentObj) {\n\t\tparentObj.registerD &= 0xF7;\n\t}\n\t//RES 3, E\n\t//#0x9B:\n\t,function (parentObj) {\n\t\tparentObj.registerE &= 0xF7;\n\t}\n\t//RES 3, H\n\t//#0x9C:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0xF7FF;\n\t}\n\t//RES 3, L\n\t//#0x9D:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0xFFF7;\n\t}\n\t//RES 3, (HL)\n\t//#0x9E:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xF7);\n\t}\n\t//RES 3, A\n\t//#0x9F:\n\t,function (parentObj) {\n\t\tparentObj.registerA &= 0xF7;\n\t}\n\t//RES 3, B\n\t//#0xA0:\n\t,function (parentObj) {\n\t\tparentObj.registerB &= 0xEF;\n\t}\n\t//RES 4, C\n\t//#0xA1:\n\t,function (parentObj) {\n\t\tparentObj.registerC &= 0xEF;\n\t}\n\t//RES 4, D\n\t//#0xA2:\n\t,function (parentObj) {\n\t\tparentObj.registerD &= 0xEF;\n\t}\n\t//RES 4, E\n\t//#0xA3:\n\t,function (parentObj) {\n\t\tparentObj.registerE &= 0xEF;\n\t}\n\t//RES 4, H\n\t//#0xA4:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0xEFFF;\n\t}\n\t//RES 4, L\n\t//#0xA5:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0xFFEF;\n\t}\n\t//RES 4, (HL)\n\t//#0xA6:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xEF);\n\t}\n\t//RES 4, A\n\t//#0xA7:\n\t,function (parentObj) {\n\t\tparentObj.registerA &= 0xEF;\n\t}\n\t//RES 5, B\n\t//#0xA8:\n\t,function (parentObj) {\n\t\tparentObj.registerB &= 0xDF;\n\t}\n\t//RES 5, C\n\t//#0xA9:\n\t,function (parentObj) {\n\t\tparentObj.registerC &= 0xDF;\n\t}\n\t//RES 5, D\n\t//#0xAA:\n\t,function (parentObj) {\n\t\tparentObj.registerD &= 0xDF;\n\t}\n\t//RES 5, E\n\t//#0xAB:\n\t,function (parentObj) {\n\t\tparentObj.registerE &= 0xDF;\n\t}\n\t//RES 5, H\n\t//#0xAC:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0xDFFF;\n\t}\n\t//RES 5, L\n\t//#0xAD:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0xFFDF;\n\t}\n\t//RES 5, (HL)\n\t//#0xAE:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xDF);\n\t}\n\t//RES 5, A\n\t//#0xAF:\n\t,function (parentObj) {\n\t\tparentObj.registerA &= 0xDF;\n\t}\n\t//RES 6, B\n\t//#0xB0:\n\t,function (parentObj) {\n\t\tparentObj.registerB &= 0xBF;\n\t}\n\t//RES 6, C\n\t//#0xB1:\n\t,function (parentObj) {\n\t\tparentObj.registerC &= 0xBF;\n\t}\n\t//RES 6, D\n\t//#0xB2:\n\t,function (parentObj) {\n\t\tparentObj.registerD &= 0xBF;\n\t}\n\t//RES 6, E\n\t//#0xB3:\n\t,function (parentObj) {\n\t\tparentObj.registerE &= 0xBF;\n\t}\n\t//RES 6, H\n\t//#0xB4:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0xBFFF;\n\t}\n\t//RES 6, L\n\t//#0xB5:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0xFFBF;\n\t}\n\t//RES 6, (HL)\n\t//#0xB6:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0xBF);\n\t}\n\t//RES 6, A\n\t//#0xB7:\n\t,function (parentObj) {\n\t\tparentObj.registerA &= 0xBF;\n\t}\n\t//RES 7, B\n\t//#0xB8:\n\t,function (parentObj) {\n\t\tparentObj.registerB &= 0x7F;\n\t}\n\t//RES 7, C\n\t//#0xB9:\n\t,function (parentObj) {\n\t\tparentObj.registerC &= 0x7F;\n\t}\n\t//RES 7, D\n\t//#0xBA:\n\t,function (parentObj) {\n\t\tparentObj.registerD &= 0x7F;\n\t}\n\t//RES 7, E\n\t//#0xBB:\n\t,function (parentObj) {\n\t\tparentObj.registerE &= 0x7F;\n\t}\n\t//RES 7, H\n\t//#0xBC:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0x7FFF;\n\t}\n\t//RES 7, L\n\t//#0xBD:\n\t,function (parentObj) {\n\t\tparentObj.registersHL &= 0xFF7F;\n\t}\n\t//RES 7, (HL)\n\t//#0xBE:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) & 0x7F);\n\t}\n\t//RES 7, A\n\t//#0xBF:\n\t,function (parentObj) {\n\t\tparentObj.registerA &= 0x7F;\n\t}\n\t//SET 0, B\n\t//#0xC0:\n\t,function (parentObj) {\n\t\tparentObj.registerB |= 0x01;\n\t}\n\t//SET 0, C\n\t//#0xC1:\n\t,function (parentObj) {\n\t\tparentObj.registerC |= 0x01;\n\t}\n\t//SET 0, D\n\t//#0xC2:\n\t,function (parentObj) {\n\t\tparentObj.registerD |= 0x01;\n\t}\n\t//SET 0, E\n\t//#0xC3:\n\t,function (parentObj) {\n\t\tparentObj.registerE |= 0x01;\n\t}\n\t//SET 0, H\n\t//#0xC4:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x0100;\n\t}\n\t//SET 0, L\n\t//#0xC5:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x01;\n\t}\n\t//SET 0, (HL)\n\t//#0xC6:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x01);\n\t}\n\t//SET 0, A\n\t//#0xC7:\n\t,function (parentObj) {\n\t\tparentObj.registerA |= 0x01;\n\t}\n\t//SET 1, B\n\t//#0xC8:\n\t,function (parentObj) {\n\t\tparentObj.registerB |= 0x02;\n\t}\n\t//SET 1, C\n\t//#0xC9:\n\t,function (parentObj) {\n\t\tparentObj.registerC |= 0x02;\n\t}\n\t//SET 1, D\n\t//#0xCA:\n\t,function (parentObj) {\n\t\tparentObj.registerD |= 0x02;\n\t}\n\t//SET 1, E\n\t//#0xCB:\n\t,function (parentObj) {\n\t\tparentObj.registerE |= 0x02;\n\t}\n\t//SET 1, H\n\t//#0xCC:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x0200;\n\t}\n\t//SET 1, L\n\t//#0xCD:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x02;\n\t}\n\t//SET 1, (HL)\n\t//#0xCE:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x02);\n\t}\n\t//SET 1, A\n\t//#0xCF:\n\t,function (parentObj) {\n\t\tparentObj.registerA |= 0x02;\n\t}\n\t//SET 2, B\n\t//#0xD0:\n\t,function (parentObj) {\n\t\tparentObj.registerB |= 0x04;\n\t}\n\t//SET 2, C\n\t//#0xD1:\n\t,function (parentObj) {\n\t\tparentObj.registerC |= 0x04;\n\t}\n\t//SET 2, D\n\t//#0xD2:\n\t,function (parentObj) {\n\t\tparentObj.registerD |= 0x04;\n\t}\n\t//SET 2, E\n\t//#0xD3:\n\t,function (parentObj) {\n\t\tparentObj.registerE |= 0x04;\n\t}\n\t//SET 2, H\n\t//#0xD4:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x0400;\n\t}\n\t//SET 2, L\n\t//#0xD5:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x04;\n\t}\n\t//SET 2, (HL)\n\t//#0xD6:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x04);\n\t}\n\t//SET 2, A\n\t//#0xD7:\n\t,function (parentObj) {\n\t\tparentObj.registerA |= 0x04;\n\t}\n\t//SET 3, B\n\t//#0xD8:\n\t,function (parentObj) {\n\t\tparentObj.registerB |= 0x08;\n\t}\n\t//SET 3, C\n\t//#0xD9:\n\t,function (parentObj) {\n\t\tparentObj.registerC |= 0x08;\n\t}\n\t//SET 3, D\n\t//#0xDA:\n\t,function (parentObj) {\n\t\tparentObj.registerD |= 0x08;\n\t}\n\t//SET 3, E\n\t//#0xDB:\n\t,function (parentObj) {\n\t\tparentObj.registerE |= 0x08;\n\t}\n\t//SET 3, H\n\t//#0xDC:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x0800;\n\t}\n\t//SET 3, L\n\t//#0xDD:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x08;\n\t}\n\t//SET 3, (HL)\n\t//#0xDE:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x08);\n\t}\n\t//SET 3, A\n\t//#0xDF:\n\t,function (parentObj) {\n\t\tparentObj.registerA |= 0x08;\n\t}\n\t//SET 4, B\n\t//#0xE0:\n\t,function (parentObj) {\n\t\tparentObj.registerB |= 0x10;\n\t}\n\t//SET 4, C\n\t//#0xE1:\n\t,function (parentObj) {\n\t\tparentObj.registerC |= 0x10;\n\t}\n\t//SET 4, D\n\t//#0xE2:\n\t,function (parentObj) {\n\t\tparentObj.registerD |= 0x10;\n\t}\n\t//SET 4, E\n\t//#0xE3:\n\t,function (parentObj) {\n\t\tparentObj.registerE |= 0x10;\n\t}\n\t//SET 4, H\n\t//#0xE4:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x1000;\n\t}\n\t//SET 4, L\n\t//#0xE5:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x10;\n\t}\n\t//SET 4, (HL)\n\t//#0xE6:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x10);\n\t}\n\t//SET 4, A\n\t//#0xE7:\n\t,function (parentObj) {\n\t\tparentObj.registerA |= 0x10;\n\t}\n\t//SET 5, B\n\t//#0xE8:\n\t,function (parentObj) {\n\t\tparentObj.registerB |= 0x20;\n\t}\n\t//SET 5, C\n\t//#0xE9:\n\t,function (parentObj) {\n\t\tparentObj.registerC |= 0x20;\n\t}\n\t//SET 5, D\n\t//#0xEA:\n\t,function (parentObj) {\n\t\tparentObj.registerD |= 0x20;\n\t}\n\t//SET 5, E\n\t//#0xEB:\n\t,function (parentObj) {\n\t\tparentObj.registerE |= 0x20;\n\t}\n\t//SET 5, H\n\t//#0xEC:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x2000;\n\t}\n\t//SET 5, L\n\t//#0xED:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x20;\n\t}\n\t//SET 5, (HL)\n\t//#0xEE:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x20);\n\t}\n\t//SET 5, A\n\t//#0xEF:\n\t,function (parentObj) {\n\t\tparentObj.registerA |= 0x20;\n\t}\n\t//SET 6, B\n\t//#0xF0:\n\t,function (parentObj) {\n\t\tparentObj.registerB |= 0x40;\n\t}\n\t//SET 6, C\n\t//#0xF1:\n\t,function (parentObj) {\n\t\tparentObj.registerC |= 0x40;\n\t}\n\t//SET 6, D\n\t//#0xF2:\n\t,function (parentObj) {\n\t\tparentObj.registerD |= 0x40;\n\t}\n\t//SET 6, E\n\t//#0xF3:\n\t,function (parentObj) {\n\t\tparentObj.registerE |= 0x40;\n\t}\n\t//SET 6, H\n\t//#0xF4:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x4000;\n\t}\n\t//SET 6, L\n\t//#0xF5:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x40;\n\t}\n\t//SET 6, (HL)\n\t//#0xF6:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x40);\n\t}\n\t//SET 6, A\n\t//#0xF7:\n\t,function (parentObj) {\n\t\tparentObj.registerA |= 0x40;\n\t}\n\t//SET 7, B\n\t//#0xF8:\n\t,function (parentObj) {\n\t\tparentObj.registerB |= 0x80;\n\t}\n\t//SET 7, C\n\t//#0xF9:\n\t,function (parentObj) {\n\t\tparentObj.registerC |= 0x80;\n\t}\n\t//SET 7, D\n\t//#0xFA:\n\t,function (parentObj) {\n\t\tparentObj.registerD |= 0x80;\n\t}\n\t//SET 7, E\n\t//#0xFB:\n\t,function (parentObj) {\n\t\tparentObj.registerE |= 0x80;\n\t}\n\t//SET 7, H\n\t//#0xFC:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x8000;\n\t}\n\t//SET 7, L\n\t//#0xFD:\n\t,function (parentObj) {\n\t\tparentObj.registersHL |= 0x80;\n\t}\n\t//SET 7, (HL)\n\t//#0xFE:\n\t,function (parentObj) {\n\t\tparentObj.memoryWriter[parentObj.registersHL](parentObj, parentObj.registersHL, parentObj.memoryReader[parentObj.registersHL](parentObj, parentObj.registersHL) | 0x80);\n\t}\n\t//SET 7, A\n\t//#0xFF:\n\t,function (parentObj) {\n\t\tparentObj.registerA |= 0x80;\n\t}\n];\n\nmodule.exports = CBOPCODE;","//Number of machine cycles for each instruction:\nmodule.exports = [\n   /*   0,  1,  2,  3,  4,  5,  6,  7,      8,  9,  A, B,  C,  D, E,  F*/\n    4, 12,  8,  8,  4,  4,  8,  4,     20,  8,  8, 8,  4,  4, 8,  4,  //0\n    4, 12,  8,  8,  4,  4,  8,  4,     12,  8,  8, 8,  4,  4, 8,  4,  //1\n    8, 12,  8,  8,  4,  4,  8,  4,      8,  8,  8, 8,  4,  4, 8,  4,  //2\n    8, 12,  8,  8, 12, 12, 12,  4,      8,  8,  8, 8,  4,  4, 8,  4,  //3\n\n    4,  4,  4,  4,  4,  4,  8,  4,      4,  4,  4, 4,  4,  4, 8,  4,  //4\n    4,  4,  4,  4,  4,  4,  8,  4,      4,  4,  4, 4,  4,  4, 8,  4,  //5\n    4,  4,  4,  4,  4,  4,  8,  4,      4,  4,  4, 4,  4,  4, 8,  4,  //6\n    8,  8,  8,  8,  8,  8,  4,  8,      4,  4,  4, 4,  4,  4, 8,  4,  //7\n\n    4,  4,  4,  4,  4,  4,  8,  4,      4,  4,  4, 4,  4,  4, 8,  4,  //8\n    4,  4,  4,  4,  4,  4,  8,  4,      4,  4,  4, 4,  4,  4, 8,  4,  //9\n    4,  4,  4,  4,  4,  4,  8,  4,      4,  4,  4, 4,  4,  4, 8,  4,  //A\n    4,  4,  4,  4,  4,  4,  8,  4,      4,  4,  4, 4,  4,  4, 8,  4,  //B\n\n    8, 12, 12, 16, 12, 16,  8, 16,      8, 16, 12, 0, 12, 24, 8, 16,  //C\n    8, 12, 12,  4, 12, 16,  8, 16,      8, 16, 12, 4, 12,  4, 8, 16,  //D\n   12, 12,  8,  4,  4, 16,  8, 16,     16,  4, 16, 4,  4,  4, 8, 16,  //E\n   12, 12,  8,  4,  4, 16,  8, 16,     12,  8, 16, 4,  0,  4, 8, 16   //F\n];\n","//Number of machine cycles for each 0xCBXX instruction:\nmodule.exports = [\n/*  0, 1, 2, 3, 4, 5,  6, 7,        8, 9, A, B, C, D,  E, F*/\n    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //0\n    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //1\n    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //2\n    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //3\n\n    8, 8, 8, 8, 8, 8, 12, 8,        8, 8, 8, 8, 8, 8, 12, 8,  //4\n    8, 8, 8, 8, 8, 8, 12, 8,        8, 8, 8, 8, 8, 8, 12, 8,  //5\n    8, 8, 8, 8, 8, 8, 12, 8,        8, 8, 8, 8, 8, 8, 12, 8,  //6\n    8, 8, 8, 8, 8, 8, 12, 8,        8, 8, 8, 8, 8, 8, 12, 8,  //7\n\n    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //8\n    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //9\n    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //A\n    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //B\n\n    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //C\n    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //D\n    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8,  //E\n    8, 8, 8, 8, 8, 8, 16, 8,        8, 8, 8, 8, 8, 8, 16, 8   //F\n];\n","import * as fs from 'fs';\r\nimport Gameboy from 'serverboy';\r\nimport { WebSocketServer } from 'ws';\r\n\r\nconst wss = new WebSocketServer({port: 1234});\r\n\r\nconst buttons = [\r\n    {\"A\": Gameboy.KEYMAP.A},\r\n    {\"B\": Gameboy.KEYMAP.B},\r\n    {\"R\": Gameboy.KEYMAP.RIGHT},\r\n    {\"L\": Gameboy.KEYMAP.LEFT},\r\n    {\"U\": Gameboy.KEYMAP.DOWN},\r\n    {\"D\": Gameboy.KEYMAP.UP},\r\n    {\"SL\": Gameboy.KEYMAP.SELECT},\r\n    {\"ST\": Gameboy.KEYMAP.START}\r\n]\r\n\r\nconst roms = [\r\n    'pokemon_emerald.gba',\r\n    'pokemon_crystal.gbc',\r\n    'doom_2.gba'\r\n]\r\n\r\nfunction loadGame(gb: Gameboy, game: number, sav?: string){\r\n    game = game < 0? 0 : (game >= roms.length? roms.length - 1: game);\r\n    \r\n    var file_path = `./roms/${roms[game]}`;\r\n\r\n    const rom = fs.readFileSync(file_path);\r\n    if(sav)\r\n        gb.loadRom(rom, sav);\r\n    else\r\n        gb.loadRom(rom);\r\n}\r\n\r\nwss.on('connection', async function connection(ws) {\r\n\r\n    var ready = false;\r\n\r\n    const gb = new Gameboy();\r\n\r\n    var interval_id2 = setInterval(() => {\r\n        if(!ready)\r\n            return;\r\n        gb.doFrame();\r\n    }, 1000/120);\r\n\r\n    var interval_id1 = setInterval(() => {\r\n        if(!ready)\r\n            return;\r\n        var pix = gb.getScreen();\r\n        var str = \"scrn\" + Buffer.from(pix, 'ascii');\r\n        ws.send(str);\r\n    }, 1000/30);\r\n\r\n    ws.on('message', (data)=>{\r\n        var dat = data.toString();\r\n        if(dat.length < 4)\r\n            gb.pressKey(buttons[dat]);\r\n        else{\r\n            switch(dat.substring(0, 4)){\r\n                case 'save':\r\n                    var str = 'save' + gb.getSaveData();\r\n                    ws.send(str);\r\n                    break;\r\n                \r\n                case 'load':\r\n                    var strs = dat.split('|')\r\n                    if(strs.length > 2)\r\n                        loadGame(gb, Number.parseInt(strs[1]), strs[2]);\r\n                    else\r\n                        loadGame(gb, Number.parseInt(strs[1]));\r\n                    ready = true;\r\n                    break;\r\n            }\r\n        }\r\n    })\r\n\r\n    ws.on('close', async function disconnect() {\r\n        clearInterval(interval_id1);\r\n        clearInterval(interval_id2);\r\n    });\r\n});\r\n","\"use strict\";","'use-strict'\nvar GameBoyCore = require(\"./gameboy_core/gameboy.js\");\n\nconst KEYMAP = {\n    RIGHT : 0,\n    LEFT : 1,\n    UP : 2,\n    DOWN : 3,\n    A : 4,\n    B : 5,\n    SELECT : 6,\n    START : 7\n};\n\n\nconst PRIVATE = '_' + process.hrtime().join('.');\nfunction Interface() {\n    let _that = this[PRIVATE] = {\n        __proto__ : Interface._prototype,\n        gameboy : null, //Core emulator\n        frames : 0, //Number of elapsed frames\n        pressed : new Array(Object.keys(KEYMAP).length), //Which keys are currently being held down\n    };\n    _that[PRIVATE] = _that;\n}\n\nInterface._prototype = {\n\n    //Check to make sure the gameboy object has been created.\n    initialized : function () {\n        let _that = this[PRIVATE];\n        return typeof _that.gameboy === 'object' && _that.gameboy != null;\n    },\n\n    /*\n     *Make sure that the emulator is \"running\" (note that this is different than play/pause)\n     *Think of it like turning the key in your ignition before you start driving your car\n     *TODO: does `true` mean it's running or does `true` mean it's stopped?\n     */\n    running : function () {\n       let _that = this[PRIVATE];\n       return (_that.gameboy.stopEmulator & 2) == 0;\n    },\n\n    /*\n     * Presses or releases a key\n     * - note that in the gameboy core, a key will stay pressed until it has been explicitly released.\n     * - will do nothing if the emulator is running\n     *\n     * @param keycode 1-8 number of the key to press (see Interface.KEYCODES)\n     * @param `true` to press key, `false` to release\n     */\n    sendKey : function (keycode, down) {\n        let _that = this[PRIVATE];\n        if (_that.initialized() && _that.running()) {\n            _that.gameboy.JoyPadEvent(keycode, down);\n        }\n    },\n\n    //Stop emulator, reset relevant variables\n    shutdownEmulation : function () {\n        let _that = this[PRIVATE];\n        if (_that.initialized() && _that.running()) {\n            _that.gameboy.stopEmulator |= 2;\n            _that.frames = 0; //Reset internal variables\n        }\n    }\n};\n\nInterface.prototype = {\n    constructor : Interface,\n\n    /*\n     * Load a ROM - like popping in a new cartridge\n     * - Won't do anything if the emulator hasn't been initialized.\n     *\n     * TODO: better documentation on what ROMs are and how they should be formatted.\n     */\n    loadRom : function (ROM, saveData) {\n        let that = this;\n        let _that = this[PRIVATE];\n\n        // if (!_that.initialized()) {\n        //     return false;\n        // }\n\n        //TODO: autosave last state?\n        _that.shutdownEmulation(); //Will shut down emulator if it's still running.\n\n        _that.gameboy = new GameBoyCore(ROM);\n        _that.gameboy.openMBC = function (title) {\n\n            /* TODO: you can load in from a specific title? Kind of cool, I guess. */\n            return saveData || [];\n        };\n\n        //Start emulator (some logic in here that needs to be documented)\n        _that.gameboy.start();\n        _that.gameboy.stopEmulator &= 1;\n        _that.gameboy.iterations = 0;\n\n        return true;\n    },\n\n    /*\n     * Emulates a single frame\n     *\n     * TODO: add documentation for imageData\n     * @param partial - DEPRECATED - whether or not to render the entire screen or just the changed bits\n     * @returns Array - image data for that frame, which can later be converted into a canvas writeable format\n     */\n    doFrame : function (partial) {\n        let _that = this[PRIVATE];\n        //Press required keys\n        for (let i=_that.pressed.length-1; i>=0; i--) {\n            if (_that.pressed[i]) {\n                _that.sendKey(i, true);\n            }\n        }\n\n        _that.gameboy.frameDone = false;\n        while(!_that.gameboy.frameDone) {\n            _that.gameboy.run(); //Run internal logic until the entire frame as finished.\n        }\n\n        //Release all keys\n        for (let i=_that.pressed.length-1; i>=0; i--) {\n            _that.pressed[i] = false;\n            _that.sendKey(i, false);\n        }\n\n        ++_that.frames;\n\n        return partial ? _that.gameboy.partialScreen : _that.gameboy.currentScreen;\n    },\n\n    /*\n     * Pass in an array of keys you want pressed\n     * - this array should be propogated with values from ``Interface.KEYMAP``\n     * - you can not undo a press. Once a key is pressed it stays pressed until the end of the frame.\n     */\n    pressKeys : function (keys) {\n        keys = keys || [];\n\n        let that = this;\n        for (let i=keys.length-1; i>=0; i--) {\n            that.pressKey(keys[i]);\n        }\n    },\n\n    /*\n     * Presses a key corresponding with ``Interface.KEYMAP``\n     * - you can not undo a press. Once a key is pressed it stays pressed until the end of the frame.\n     */\n    pressKey : function (key) {\n        let _that = this[PRIVATE];\n\n        if (typeof key === 'string') {\n            key = KEYMAP[key.toUpperCase()];\n        }\n\n        if (key < _that.pressed.length && key != null) {\n            _that.pressed[key] = true;\n        }\n    },\n\n    /*\n     * Returns an array of all currently pressed keys\n     * - built using the enum ``Interface.KEYMAP``\n     */\n    getKeys : function () {\n        let _that = this[PRIVATE];\n        return _that.pressed.slice(0);\n    },\n\n    getScreen : function () {\n        var _that = this[PRIVATE];\n        return _that.gameboy.currentScreen;\n    },\n\n    /*\n     * Gets a block of memory, you can specify a start and an end if you want\n     * - this is an expensive operation and should be called sparingly\n     *\n     * TODO perf test ``slice`` vs a ``for`` loop\n     */\n    getMemory : function(start, end) {\n        let _that = this[PRIVATE];\n        start = start || 0;\n        end = end || _that.gameboy.memory.length - 1;\n\n        start = Math.max(start, 0);\n        end = Math.min(end, _that.gameboy.memory.length - 1);\n\n        if (start === 0 && end === _that.gameboy.memory.length - 1) {\n            return _that.gameboy.memory;\n        }\n\n        return _that.gameboy.memory.slice(start, end); //Why are you doing this functionally instead of just returning the entire object?\n        //Is it for speed?\n    },\n\n    getAudio : function() {\n        let _that = this[PRIVATE];\n        return _that.gameboy.audioBuffer;\n    },\n\n    getSaveData: function() {\n        let _that= this[PRIVATE];\n        return _that.gameboy.saveSRAMState();\n    },\n\n    setMemory : function(start, data) {\n        let _that = this[PRIVATE];\n        start = Math.max(start, 0);\n\n        for (let i = 0; i < start.length; i++) {\n            _that.gameboy.memory[start + i] = data[i];\n        }\n    },\n};\n\nInterface.KEYMAP = KEYMAP;\nmodule.exports = Interface;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\n/*\n * JavaScript GameBoy Color Emulator\n * Copyright (C) 2010 - 2012 Grant Galitz\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * version 2 as published by the Free Software Foundation.\n * The full license is available at http://www.gnu.org/licenses/gpl.html\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n */\nvar Instance = require(\"./instance.js\");\nvar settings = require(\"./settings.js\");\nvar saving = require(\"./saveState.js\");\n\n//I need to mock a whole bunch of stuff on top of this.\n//var XAudioServer = require('./audio/XAudioServer.js');\n\n//TODO: Fix and reimplement missing function.\nfunction cout() { };\nfunction pause() { };\n\nfunction GameBoyCore(ROMImage) {\n    Instance.call(this, ROMImage);\n    this.ROMImageIsString = 'string' == typeof ROMImage;\n}\n\nGameBoyCore.prototype = {\n    constructor: GameBoyCore,\n\n    //-----------------ARCHITECTURE-------------------------\n    GBBOOTROM : [], //Add 256 byte boot rom here if you are going to use it.\n    GBCBOOTROM : [], //Add 2048 byte boot rom here if you are going to use it.\n    ffxxDump : require('./architecture/ffxxDump.js'),\n    OPCODE : require('./architecture/OPCODE.js'),\n    CBOPCODE : require('./architecture/CBOPCODE.js'),\n    TICKTable : require('./architecture/TICKTable.js'),\n    SecondaryTICKTable : require('./architecture/SecondaryTICKTable.js'),\n    //-------------------------------------------------------\n\n\n    //------------SAVE/LOAD----------------------------------\n\n    saveState : saving.saveState,\n    saving : saving.returnFromState,\n\n    saveSRAMState : function () {\n        if (!this.cBATT || this.MBCRam.length == 0) {\n            return []; //No bettery backup...\n        }\n\n        return this.fromTypedArray(this.MBCRam);\n    },\n\n    saveRTCState : function () {\n        if (!this.cTIMER) {\n            return []; //No battery backup\n        }\n\n        //Return the MBC RAM for backup...\n        return [\n            this.lastIteration,\n            this.RTCisLatched,\n            this.latchedSeconds,\n            this.latchedMinutes,\n            this.latchedHours,\n            this.latchedLDays,\n            this.latchedHDays,\n            this.RTCSeconds,\n            this.RTCMinutes,\n            this.RTCHours,\n            this.RTCDays,\n            this.RTCDayOverFlow,\n            this.RTCHALT\n        ];\n    }\n};\n\n\nGameBoyCore.prototype.returnFromRTCState = function () {\n    if (typeof this.openRTC == \"function\" && this.cTIMER) {\n        var rtcData = this.openRTC(this.name);\n        var index = 0;\n        this.lastIteration = rtcData[index++];\n        this.RTCisLatched = rtcData[index++];\n        this.latchedSeconds = rtcData[index++];\n        this.latchedMinutes = rtcData[index++];\n        this.latchedHours = rtcData[index++];\n        this.latchedLDays = rtcData[index++];\n        this.latchedHDays = rtcData[index++];\n        this.RTCSeconds = rtcData[index++];\n        this.RTCMinutes = rtcData[index++];\n        this.RTCHours = rtcData[index++];\n        this.RTCDays = rtcData[index++];\n        this.RTCDayOverFlow = rtcData[index++];\n        this.RTCHALT = rtcData[index];\n    }\n};\n\nGameBoyCore.prototype.start = function () {\n    this.initMemory();  //Write the startup memory.\n    this.ROMLoad();     //Load the ROM into memory and get cartridge information from it.\n    this.initLCD();     //Initialize the graphics.\n    this.initSound(); //Sound object initialization. Optional.\n    this.run();         //Start the emulation.\n}\nGameBoyCore.prototype.initMemory = function () {\n    //Initialize the RAM:\n    this.memory = this.getTypedArray(0x10000, 0, \"uint8\");\n    this.frameBuffer = this.getTypedArray(23040, 0xF8F8F8, \"int32\");\n    this.BGCHRBank1 = this.getTypedArray(0x800, 0, \"uint8\");\n    this.TICKTable = this.toTypedArray(this.TICKTable, \"uint8\");\n    this.SecondaryTICKTable = this.toTypedArray(this.SecondaryTICKTable, \"uint8\");\n    this.channel3PCM = this.getTypedArray(0x20, 0, \"int8\");\n}\n\nGameBoyCore.prototype.generateCacheArray = function (tileAmount) {\n    var tileArray = [];\n    var tileNumber = 0;\n    while (tileNumber < tileAmount) {\n        tileArray[tileNumber++] = this.getTypedArray(64, 0, \"uint8\");\n    }\n    return tileArray;\n}\nGameBoyCore.prototype.initSkipBootstrap = function () {\n    //Fill in the boot ROM set register values\n    //Default values to the GB boot ROM values, then fill in the GBC boot ROM values after ROM loading\n    var index = 0xFF;\n    while (index >= 0) {\n        if (index >= 0x30 && index < 0x40) {\n            this.memoryWrite(0xFF00 | index, this.ffxxDump[index]);\n        }\n        else {\n            switch (index) {\n                case 0x00:\n                case 0x01:\n                case 0x02:\n                case 0x05:\n                case 0x07:\n                case 0x0F:\n                case 0xFF:\n                    this.memoryWrite(0xFF00 | index, this.ffxxDump[index]);\n                    break;\n                default:\n                    this.memory[0xFF00 | index] = this.ffxxDump[index];\n            }\n        }\n        --index;\n    }\n    if (this.cGBC) {\n        this.memory[0xFF6C] = 0xFE;\n        this.memory[0xFF74] = 0xFE;\n    }\n    else {\n        this.memory[0xFF48] = 0xFF;\n        this.memory[0xFF49] = 0xFF;\n        this.memory[0xFF6C] = 0xFF;\n        this.memory[0xFF74] = 0xFF;\n    }\n    //Start as an unset device:\n    cout(\"Starting without the GBC boot ROM.\", 0);\n    this.registerA = (this.cGBC) ? 0x11 : 0x1;\n    this.registerB = 0;\n    this.registerC = 0x13;\n    this.registerD = 0;\n    this.registerE = 0xD8;\n    this.FZero = true;\n    this.FSubtract = false;\n    this.FHalfCarry = true;\n    this.FCarry = true;\n    this.registersHL = 0x014D;\n    this.LCDCONTROL = this.LINECONTROL;\n    this.IME = false;\n    this.IRQLineMatched = 0;\n    this.interruptsRequested = 225;\n    this.interruptsEnabled = 0;\n    this.hdmaRunning = false;\n    this.CPUTicks = 12;\n    this.STATTracker = 0;\n    this.modeSTAT = 1;\n    this.spriteCount = 252;\n    this.LYCMatchTriggerSTAT = false;\n    this.mode2TriggerSTAT = false;\n    this.mode1TriggerSTAT = false;\n    this.mode0TriggerSTAT = false;\n    this.LCDisOn = true;\n    this.channel1FrequencyTracker = 0x2000;\n    this.channel1DutyTracker = 0;\n    this.channel1CachedDuty = this.dutyLookup[2];\n    this.channel1totalLength = 0;\n    this.channel1envelopeVolume = 0;\n    this.channel1envelopeType = false;\n    this.channel1envelopeSweeps = 0;\n    this.channel1envelopeSweepsLast = 0;\n    this.channel1consecutive = true;\n    this.channel1frequency = 1985;\n    this.channel1SweepFault = true;\n    this.channel1ShadowFrequency = 1985;\n    this.channel1timeSweep = 1;\n    this.channel1lastTimeSweep = 0;\n    this.channel1Swept = false;\n    this.channel1frequencySweepDivider = 0;\n    this.channel1decreaseSweep = false;\n    this.channel2FrequencyTracker = 0x2000;\n    this.channel2DutyTracker = 0;\n    this.channel2CachedDuty = this.dutyLookup[2];\n    this.channel2totalLength = 0;\n    this.channel2envelopeVolume = 0;\n    this.channel2envelopeType = false;\n    this.channel2envelopeSweeps = 0;\n    this.channel2envelopeSweepsLast = 0;\n    this.channel2consecutive = true;\n    this.channel2frequency = 0;\n    this.channel3canPlay = false;\n    this.channel3totalLength = 0;\n    this.channel3patternType = 4;\n    this.channel3frequency = 0;\n    this.channel3consecutive = true;\n    this.channel3Counter = 0x418;\n    this.channel4FrequencyPeriod = 8;\n    this.channel4totalLength = 0;\n    this.channel4envelopeVolume = 0;\n    this.channel4currentVolume = 0;\n    this.channel4envelopeType = false;\n    this.channel4envelopeSweeps = 0;\n    this.channel4envelopeSweepsLast = 0;\n    this.channel4consecutive = true;\n    this.channel4BitRange = 0x7FFF;\n    this.channel4VolumeShifter = 15;\n    this.channel1FrequencyCounter = 0x200;\n    this.channel2FrequencyCounter = 0x200;\n    this.channel3Counter = 0x800;\n    this.channel3FrequencyPeriod = 0x800;\n    this.channel3lastSampleLookup = 0;\n    this.channel4lastSampleLookup = 0;\n    this.VinLeftChannelMasterVolume = 8;\n    this.VinRightChannelMasterVolume = 8;\n    this.soundMasterEnabled = true;\n    this.leftChannel1 = true;\n    this.leftChannel2 = true;\n    this.leftChannel3 = true;\n    this.leftChannel4 = true;\n    this.rightChannel1 = true;\n    this.rightChannel2 = true;\n    this.rightChannel3 = false;\n    this.rightChannel4 = false;\n    this.DIVTicks = 27044;\n    this.LCDTicks = 160;\n    this.timerTicks = 0;\n    this.TIMAEnabled = false;\n    this.TACClocker = 1024;\n    this.serialTimer = 0;\n    this.serialShiftTimer = 0;\n    this.serialShiftTimerAllocated = 0;\n    this.IRQEnableDelay = 0;\n    this.actualScanLine = 144;\n    this.lastUnrenderedLine = 0;\n    this.gfxWindowDisplay = false;\n    this.gfxSpriteShow = false;\n    this.gfxSpriteNormalHeight = true;\n    this.bgEnabled = true;\n    this.BGPriorityEnabled = true;\n    this.gfxWindowCHRBankPosition = 0;\n    this.gfxBackgroundCHRBankPosition = 0;\n    this.gfxBackgroundBankOffset = 0;\n    this.windowY = 0;\n    this.windowX = 0;\n    this.drewBlank = 0;\n    this.midScanlineOffset = -1;\n    this.currentX = 0;\n}\nGameBoyCore.prototype.initBootstrap = function () {\n    //Start as an unset device:\n    cout(\"Starting the selected boot ROM.\", 0);\n    this.programCounter = 0;\n    this.stackPointer = 0;\n    this.IME = false;\n    this.LCDTicks = 0;\n    this.DIVTicks = 0;\n    this.registerA = 0;\n    this.registerB = 0;\n    this.registerC = 0;\n    this.registerD = 0;\n    this.registerE = 0;\n    this.FZero = this.FSubtract = this.FHalfCarry = this.FCarry = false;\n    this.registersHL = 0;\n    this.leftChannel1 = false;\n    this.leftChannel2 = false;\n    this.leftChannel3 = false;\n    this.leftChannel4 = false;\n    this.rightChannel1 = false;\n    this.rightChannel2 = false;\n    this.rightChannel3 = false;\n    this.rightChannel4 = false;\n    this.channel2frequency = this.channel1frequency = 0;\n    this.channel4consecutive = this.channel2consecutive = this.channel1consecutive = false;\n    this.VinLeftChannelMasterVolume = 8;\n    this.VinRightChannelMasterVolume = 8;\n    this.memory[0xFF00] = 0xF;  //Set the joypad state.\n}\nGameBoyCore.prototype.ROMLoad = function () {\n  //Load the first two ROM banks (0x0000 - 0x7FFF) into regular gameboy memory:\n  this.ROM = [];\n  this.usedBootROM = settings[1] && ((!settings[11] && this.GBCBOOTROM.length == 0x800) || (settings[11] && this.GBBOOTROM.length == 0x100));\n  var maxLength = this.ROMImage.length;\n  if (maxLength < 0x4000) {\n    throw(new Error(\"ROM image size too small.\"));\n  }\n  this.ROM = this.getTypedArray(maxLength, 0, \"uint8\");\n  var romIndex = 0;\n  if (this.usedBootROM) {\n    if (!settings[11]) {\n      //Patch in the GBC boot ROM into the memory map:\n      if (this.ROMImageIsString) {\n        for (; romIndex < 0x100; ++romIndex) {\n          this.memory[romIndex] = this.GBCBOOTROM[romIndex];                      //Load in the GameBoy Color BOOT ROM.\n          this.ROM[romIndex] = (this.ROMImage.charCodeAt(romIndex) & 0xFF);             //Decode the ROM binary for the switch out.\n        }\n        for (; romIndex < 0x200; ++romIndex) {\n          this.memory[romIndex] = this.ROM[romIndex] = (this.ROMImage.charCodeAt(romIndex) & 0xFF); //Load in the game ROM.\n        }\n        for (; romIndex < 0x900; ++romIndex) {\n          this.memory[romIndex] = this.GBCBOOTROM[romIndex - 0x100];                  //Load in the GameBoy Color BOOT ROM.\n          this.ROM[romIndex] = (this.ROMImage.charCodeAt(romIndex) & 0xFF);             //Decode the ROM binary for the switch out.\n        }\n      } else {\n        for (; romIndex < 0x100; ++romIndex) {\n          this.memory[romIndex] = this.GBCBOOTROM[romIndex];                      //Load in the GameBoy Color BOOT ROM.\n          this.ROM[romIndex] = this.ROMImage[romIndex];             //Decode the ROM binary for the switch out.\n        }\n        for (; romIndex < 0x200; ++romIndex) {\n          this.memory[romIndex] = this.ROM[romIndex] = this.ROMImage[romIndex]; //Load in the game ROM.\n        }\n        for (; romIndex < 0x900; ++romIndex) {\n          this.memory[romIndex] = this.GBCBOOTROM[romIndex - 0x100];                  //Load in the GameBoy Color BOOT ROM.\n          this.ROM[romIndex] = this.ROMImage[romIndex];             //Decode the ROM binary for the switch out.\n        }\n      }\n\n      this.usedGBCBootROM = true;\n    }\n    else {\n      if (this.ROMImageIsString) {\n        //Patch in the GBC boot ROM into the memory map:\n        for (; romIndex < 0x100; ++romIndex) {\n          this.memory[romIndex] = this.GBBOOTROM[romIndex];                     //Load in the GameBoy Color BOOT ROM.\n          this.ROM[romIndex] = (this.ROMImage.charCodeAt(romIndex) & 0xFF);             //Decode the ROM binary for the switch out.\n        }\n      } else {\n        //Patch in the GBC boot ROM into the memory map:\n        for (; romIndex < 0x100; ++romIndex) {\n          this.memory[romIndex] = this.GBBOOTROM[romIndex];                     //Load in the GameBoy Color BOOT ROM.\n          this.ROM[romIndex] = this.ROMImage.romIndex;             //Decode the ROM binary for the switch out.\n        }\n      }\n    }\n    if (this.ROMImageIsString) {\n      for (; romIndex < 0x4000; ++romIndex) {\n        this.memory[romIndex] = this.ROM[romIndex] = (this.ROMImage.charCodeAt(romIndex) & 0xFF); //Load in the game ROM.\n      }\n    } else {\n      for (; romIndex < 0x4000; ++romIndex) {\n        this.memory[romIndex] = this.ROM[romIndex] = this.ROMImage[romIndex]; //Load in the game ROM.\n      }\n    }\n  }\n  else {\n    if (this.ROMImageIsString) {\n      //Don't load in the boot ROM:\n      for (; romIndex < 0x4000; ++romIndex) {\n        this.memory[romIndex] = this.ROM[romIndex] = (this.ROMImage.charCodeAt(romIndex) & 0xFF); //Load in the game ROM.\n      }\n    } else {\n      //Don't load in the boot ROM:\n      for (; romIndex < 0x4000; ++romIndex) {\n        this.memory[romIndex] = this.ROM[romIndex] = this.ROMImage[romIndex]; //Load in the game ROM.\n      }\n    }\n  }\n  //Finish the decoding of the ROM binary:\n  if (this.ROMImageIsString) {\n    for (; romIndex < maxLength; ++romIndex) {\n      this.ROM[romIndex] = this.ROMImage.charCodeAt(romIndex) & 0xFF;\n    }\n  } else {\n    for (; romIndex < maxLength; ++romIndex) {\n      this.ROM[romIndex] = this.ROMImage[romIndex];\n    }\n  }\n  this.ROMBankEdge = Math.floor(this.ROM.length / 0x4000);\n  //Set up the emulator for the cartidge specifics:\n  this.interpretCartridge();\n  //Check for IRQ matching upon initialization:\n  this.checkIRQMatching();\n};\nGameBoyCore.prototype.getROMImage = function () {\n    //Return the binary version of the ROM image currently running:\n    if (this.ROMImage.length > 0) {\n        return this.ROMImage.length;\n    }\n    var length = this.ROM.length;\n    for (var index = 0; index < length; index++) {\n        this.ROMImage += String.fromCharCode(this.ROM[index]);\n    }\n    return this.ROMImage;\n}\nGameBoyCore.prototype.interpretCartridge = function () {\n    var extra;\n\n    if (this.ROMImageIsString) {\n        // ROM name\n        for (var index = 0x134; index < 0x13F; index++) {\n            if (this.ROMImage[index] > 0) {\n                this.name += this.ROMImage[index];\n            }\n        }\n        // ROM game code (for newer games)\n        for (var index = 0x13F; index < 0x143; index++) {\n            if (this.ROMImage[index] > 0) {\n                this.gameCode += this.ROMImage[index];\n            }\n        }\n\n        extra = this.ROMImage[0x143];\n    } else {\n        // ROM name\n        for (var index = 0x134; index < 0x13F; index++) {\n          if (this.ROMImage[index] > 0) {\n            this.name += String.fromCharCode(this.ROMImage[index]);\n          }\n        }\n        // ROM game code (for newer games)\n        for (var index = 0x13F; index < 0x143; index++) {\n          if (this.ROMImage[index] > 0) {\n            this.gameCode += String.fromCharCode(this.ROMImage[index]);\n          }\n        }\n\n        extra = String.fromCharCode(this.ROMImage[0x143]);\n    }\n\n\n    // You don't want extra output, do you?\n    // console.log(\"Game Title: \" + this.name + \"[\" + this.gameCode + \"][\" + this.ROMImage[0x143] + \"]\");\n\n    // Cartridge type\n    this.cartridgeType = this.ROM[0x147];\n    //console.log(\"Cartridge type #\" + this.cartridgeType);\n    //Map out ROM cartridge sub-types.\n    var MBCType = \"\";\n    switch (this.cartridgeType) {\n        case 0x00:\n            //ROM w/o bank switching\n            if (!settings[9]) {\n                MBCType = \"ROM\";\n                break;\n            }\n        case 0x01:\n            this.cMBC1 = true;\n            MBCType = \"MBC1\";\n            break;\n        case 0x02:\n            this.cMBC1 = true;\n            this.cSRAM = true;\n            MBCType = \"MBC1 + SRAM\";\n            break;\n        case 0x03:\n            this.cMBC1 = true;\n            this.cSRAM = true;\n            this.cBATT = true;\n            MBCType = \"MBC1 + SRAM + BATT\";\n            break;\n        case 0x05:\n            this.cMBC2 = true;\n            MBCType = \"MBC2\";\n            break;\n        case 0x06:\n            this.cMBC2 = true;\n            this.cBATT = true;\n            MBCType = \"MBC2 + BATT\";\n            break;\n        case 0x08:\n            this.cSRAM = true;\n            MBCType = \"ROM + SRAM\";\n            break;\n        case 0x09:\n            this.cSRAM = true;\n            this.cBATT = true;\n            MBCType = \"ROM + SRAM + BATT\";\n            break;\n        case 0x0B:\n            this.cMMMO1 = true;\n            MBCType = \"MMMO1\";\n            break;\n        case 0x0C:\n            this.cMMMO1 = true;\n            this.cSRAM = true;\n            MBCType = \"MMMO1 + SRAM\";\n            break;\n        case 0x0D:\n            this.cMMMO1 = true;\n            this.cSRAM = true;\n            this.cBATT = true;\n            MBCType = \"MMMO1 + SRAM + BATT\";\n            break;\n        case 0x0F:\n            this.cMBC3 = true;\n            this.cTIMER = true;\n            this.cBATT = true;\n            MBCType = \"MBC3 + TIMER + BATT\";\n            break;\n        case 0x10:\n            this.cMBC3 = true;\n            this.cTIMER = true;\n            this.cBATT = true;\n            this.cSRAM = true;\n            MBCType = \"MBC3 + TIMER + BATT + SRAM\";\n            break;\n        case 0x11:\n            this.cMBC3 = true;\n            MBCType = \"MBC3\";\n            break;\n        case 0x12:\n            this.cMBC3 = true;\n            this.cSRAM = true;\n            MBCType = \"MBC3 + SRAM\";\n            break;\n        case 0x13:\n            this.cMBC3 = true;\n            this.cSRAM = true;\n            this.cBATT = true;\n            MBCType = \"MBC3 + SRAM + BATT\";\n            break;\n        case 0x19:\n            this.cMBC5 = true;\n            MBCType = \"MBC5\";\n            break;\n        case 0x1A:\n            this.cMBC5 = true;\n            this.cSRAM = true;\n            MBCType = \"MBC5 + SRAM\";\n            break;\n        case 0x1B:\n            this.cMBC5 = true;\n            this.cSRAM = true;\n            this.cBATT = true;\n            MBCType = \"MBC5 + SRAM + BATT\";\n            break;\n        case 0x1C:\n            this.cRUMBLE = true;\n            MBCType = \"RUMBLE\";\n            break;\n        case 0x1D:\n            this.cRUMBLE = true;\n            this.cSRAM = true;\n            MBCType = \"RUMBLE + SRAM\";\n            break;\n        case 0x1E:\n            this.cRUMBLE = true;\n            this.cSRAM = true;\n            this.cBATT = true;\n            MBCType = \"RUMBLE + SRAM + BATT\";\n            break;\n        case 0x1F:\n            this.cCamera = true;\n            MBCType = \"GameBoy Camera\";\n            break;\n        case 0x22:\n            this.cMBC7 = true;\n            this.cSRAM = true;\n            this.cBATT = true;\n            MBCType = \"MBC7 + SRAM + BATT\";\n            break;\n        case 0xFD:\n            this.cTAMA5 = true;\n            MBCType = \"TAMA5\";\n            break;\n        case 0xFE:\n            this.cHuC3 = true;\n            MBCType = \"HuC3\";\n            break;\n        case 0xFF:\n            this.cHuC1 = true;\n            MBCType = \"HuC1\";\n            break;\n        default:\n            MBCType = \"Unknown\";\n            console.log(\"Cartridge type is unknown.\");\n            pause();\n    }\n    cout(\"Cartridge Type: \" + MBCType + \".\", 0);\n    // ROM and RAM banks\n    this.numROMBanks = this.ROMBanks[this.ROM[0x148]];\n    cout(this.numROMBanks + \" ROM banks.\", 0);\n    switch (this.RAMBanks[this.ROM[0x149]]) {\n        case 0:\n            cout(\"No RAM banking requested for allocation or MBC is of type 2.\", 0);\n            break;\n        case 2:\n            cout(\"1 RAM bank requested for allocation.\", 0);\n            break;\n        case 3:\n            cout(\"4 RAM banks requested for allocation.\", 0);\n            break;\n        case 4:\n            cout(\"16 RAM banks requested for allocation.\", 0);\n            break;\n        default:\n            cout(\"RAM bank amount requested is unknown, will use maximum allowed by specified MBC type.\", 0);\n    }\n    //Check the GB/GBC mode byte:\n    if (!this.usedBootROM) {\n        switch (this.ROM[0x143]) {\n            case 0x00:  //Only GB mode\n                this.cGBC = false;\n                cout(\"Only GB mode detected.\", 0);\n                break;\n            case 0x32:  //Exception to the GBC identifying code:\n                if (!settings[2] && this.name + this.gameCode + this.ROM[0x143] == \"Game and Watch 50\") {\n                    this.cGBC = true;\n                    cout(\"Created a boot exception for Game and Watch Gallery 2 (GBC ID byte is wrong on the cartridge).\", 1);\n                }\n                else {\n                    this.cGBC = false;\n                }\n                break;\n            case 0x80:  //Both GB + GBC modes\n                this.cGBC = !settings[2];\n                cout(\"GB and GBC mode detected.\", 0);\n                break;\n            case 0xC0:  //Only GBC mode\n                this.cGBC = true;\n                cout(\"Only GBC mode detected.\", 0);\n                break;\n            default:\n                this.cGBC = false;\n                cout(\"Unknown GameBoy game type code #\" + this.ROM[0x143] + \", defaulting to GB mode (Old games don't have a type code).\", 1);\n        }\n        this.inBootstrap = false;\n        this.setupRAM();    //CPU/(V)RAM initialization.\n        this.initSkipBootstrap();\n    }\n    else {\n        this.cGBC = this.usedGBCBootROM;    //Allow the GBC boot ROM to run in GBC mode...\n        this.setupRAM();    //CPU/(V)RAM initialization.\n        this.initBootstrap();\n    }\n    this.initializeModeSpecificArrays();\n    //License Code Lookup:\n    var cOldLicense = this.ROM[0x14B];\n    var cNewLicense = (this.ROM[0x144] & 0xFF00) | (this.ROM[0x145] & 0xFF);\n    if (cOldLicense != 0x33) {\n        //Old Style License Header\n        cout(\"Old style license code: \" + cOldLicense, 0);\n    }\n    else {\n        //New Style License Header\n        cout(\"New style license code: \" + cNewLicense, 0);\n    }\n    this.ROMImage = \"\"; //Memory consumption reduction.\n};\nGameBoyCore.prototype.disableBootROM = function () {\n    //Remove any traces of the boot ROM from ROM memory.\n    for (var index = 0; index < 0x100; ++index) {\n        this.memory[index] = this.ROM[index];   //Replace the GameBoy or GameBoy Color boot ROM with the game ROM.\n    }\n    if (this.usedGBCBootROM) {\n        //Remove any traces of the boot ROM from ROM memory.\n        for (index = 0x200; index < 0x900; ++index) {\n            this.memory[index] = this.ROM[index];   //Replace the GameBoy Color boot ROM with the game ROM.\n        }\n        if (!this.cGBC) {\n            //Clean up the post-boot (GB mode only) state:\n            this.GBCtoGBModeAdjust();\n        }\n        else {\n            this.recompileBootIOWriteHandling();\n        }\n    }\n    else {\n        this.recompileBootIOWriteHandling();\n    }\n};\nGameBoyCore.prototype.initializeTiming = function () {\n    //Emulator Timing:\n    this.clocksPerSecond = this.emulatorSpeed * 0x400000;\n    this.baseCPUCyclesPerIteration = this.clocksPerSecond / 1000 * settings[6];\n    this.CPUCyclesTotalRoundoff = this.baseCPUCyclesPerIteration % 4;\n    this.CPUCyclesTotalBase = this.CPUCyclesTotal = (this.baseCPUCyclesPerIteration - this.CPUCyclesTotalRoundoff) | 0;\n    this.CPUCyclesTotalCurrent = 0;\n};\nGameBoyCore.prototype.setSpeed = function (speed) {\n    this.emulatorSpeed = speed;\n    this.initializeTiming();\n    if (this.audioHandle) {\n        this.initSound();\n    }\n};\nGameBoyCore.prototype.setupRAM = function () {\n    //Setup the auxilliary/switchable RAM:\n    if (this.cMBC2) {\n        this.numRAMBanks = 1 / 16;\n    }\n    else if (this.cMBC1 || this.cRUMBLE || this.cMBC3 || this.cHuC3) {\n        this.numRAMBanks = 4;\n    }\n    else if (this.cMBC5) {\n        this.numRAMBanks = 16;\n    }\n    else if (this.cSRAM) {\n        this.numRAMBanks = 1;\n    }\n    if (this.numRAMBanks > 0) {\n        if (!this.MBCRAMUtilized()) {\n            //For ROM and unknown MBC cartridges using the external RAM:\n            this.MBCRAMBanksEnabled = true;\n        }\n        //Switched RAM Used\n        var MBCRam = (typeof this.openMBC == \"function\") ? this.openMBC(this.name) : [];\n        if (MBCRam.length > 0) {\n            //Flash the SRAM into memory:\n            this.MBCRam = this.toTypedArray(MBCRam, \"uint8\");\n        }\n        else {\n            this.MBCRam = this.getTypedArray(this.numRAMBanks * 0x2000, 0, \"uint8\");\n        }\n    }\n    cout(\"Actual bytes of MBC RAM allocated: \" + (this.numRAMBanks * 0x2000), 0);\n    this.returnFromRTCState();\n    //Setup the RAM for GBC mode.\n    if (this.cGBC) {\n        this.VRAM = this.getTypedArray(0x2000, 0, \"uint8\");\n        this.GBCMemory = this.getTypedArray(0x7000, 0, \"uint8\");\n    }\n    this.memoryReadJumpCompile();\n    this.memoryWriteJumpCompile();\n};\nGameBoyCore.prototype.MBCRAMUtilized = function () {\n    return this.cMBC1 || this.cMBC2 || this.cMBC3 || this.cMBC5 || this.cMBC7 || this.cRUMBLE;\n};\nGameBoyCore.prototype.recomputeDimension = function () {\n    //Cache some dimension info:\n    this.onscreenWidth = 160;\n    this.onscreenHeight = 144;\n\n    this.offscreenWidth = 160;\n    this.offscreenHeight = 144;\n    this.offscreenRGBCount = this.offscreenWidth * this.offscreenHeight * 4;\n};\nGameBoyCore.prototype.initLCD = function () {\n    this.recomputeDimension();\n    if (this.offscreenRGBCount != 92160) {\n        //Only create the resizer handle if we need it:\n        this.compileResizeFrameBufferFunction();\n    }\n    else {\n        //Resizer not needed:\n        this.resizer = null;\n    }\n\n    try {\n        this.canvasBuffer = {\n            \"data\": new Uint8ClampedArray(92160),\n            \"height\": 144,\n            \"width\": 160\n        };\n\n        //Taking canvas out of the picture.\n        //this.canvasBuffer = this.drawContextOffScreen.createImageData(144, 160);\n            //this.canvasBuffer.prototype = ImageData;\n            //new ImageData(160, 144);//{'width':160, 'height':144, 'data':new Array(160*144*4)};//this.drawContextOffscreen.createImageData(this.offscreenWidth, this.offscreenHeight);\n    }\n    catch (error) {\n        console.log('hack failed: ' + error.message + ': falling back to getImageData initialization');\n        //cout(\"Falling back to the getImageData initialization (Error \\\"\" + error.message + \"\\\").\", 1);\n        //this.canvasBuffer = this.drawContextOffscreen.getImageData(0, 0, this.offscreenWidth, this.offscreenHeight);\n    }\n    var index = this.offscreenRGBCount;\n    while (index > 0) {\n        this.canvasBuffer.data[index -= 4] = 0xF8;\n        this.canvasBuffer.data[index + 1] = 0xF8;\n        this.canvasBuffer.data[index + 2] = 0xF8;\n        this.canvasBuffer.data[index + 3] = 0xFF;\n    }\n    //this.graphicsBlit();\n    if (this.swizzledFrame == null) {\n        this.swizzledFrame = this.getTypedArray(69120, 0xFF, \"uint8\");\n    }\n\n    //Test the draw system and browser vblank latching:\n    this.drewFrame = true; //Copy the latest graphics to buffer.\n    this.requestDraw();\n};\n\n//I think I'm just copying out framebuffer.  So maybe I dont' need to do anything?\nGameBoyCore.prototype.graphicsBlit = function () {\n\n    if(!this.currentScreenFixed) { this.currentScreenFixed = []; }\n    this.lastScreen = this.currentScreenFixed;\n\n    this.currentScreen = [];//new Uint8Array(this.canvasBuffer.data.length);\n    this.partialScreen = [];\n\n\n    for (var i=0; i < this.canvasBuffer.data.length; i++){\n       //Build partial frame.\n       if(this.lastScreen[i] != this.canvasBuffer.data[i]) {\n           this.partialScreen.push(i);\n           this.partialScreen.push(this.canvasBuffer.data[i]);\n       }\n\n        //Build full frame.\n       this.currentScreenFixed[i] = this.canvasBuffer.data[i];\n       //this.currentScreen.push(i);\n       this.currentScreen.push(this.canvasBuffer.data[i]);\n\n    }\n};\nGameBoyCore.prototype.JoyPadEvent = function (key, down) {\n    if (down) {\n        this.JoyPad &= 0xFF ^ (1 << key);\n        if (!this.cGBC && (!this.usedBootROM || !this.usedGBCBootROM)) {\n            this.interruptsRequested |= 0x10;   //A real GBC doesn't set this!\n            this.remainingClocks = 0;\n            this.checkIRQMatching();\n        }\n    }\n    else {\n        this.JoyPad |= (1 << key);\n    }\n    this.memory[0xFF00] = (this.memory[0xFF00] & 0x30) + ((((this.memory[0xFF00] & 0x20) == 0) ? (this.JoyPad >> 4) : 0xF) & (((this.memory[0xFF00] & 0x10) == 0) ? (this.JoyPad & 0xF) : 0xF));\n    this.CPUStopped = false;\n}\nGameBoyCore.prototype.GyroEvent = function (x, y) {\n    x *= -100;\n    x += 2047;\n    this.highX = x >> 8;\n    this.lowX = x & 0xFF;\n    y *= -100;\n    y += 2047;\n    this.highY = y >> 8;\n    this.lowY = y & 0xFF;\n}\nGameBoyCore.prototype.initSound = function () {\n    this.audioResamplerFirstPassFactor = Math.max(Math.min(Math.floor(this.clocksPerSecond / 44100), Math.floor(0xFFFF / 0x1E0)), 1);\n    this.downSampleInputDivider = 1 / (this.audioResamplerFirstPassFactor * 0xF0);\n\n\n    if (settings[0]) {\n        // this.audioHandle = new XAudioServer(\n        //     2,\n        //     this.clocksPerSecond / this.audioResamplerFirstPassFactor,\n        //     0,\n        //     Math.max(this.baseCPUCyclesPerIteration * settings[8] / this.audioResamplerFirstPassFactor, 8192) << 1,\n        //     null,\n        //     settings[3],\n        //     function () {\n        //         settings[0] = false;\n        //     });\n\n        // console.log('Initializing Audio Buffer:');\n        // console.log(`Sample Rate: ${ this.clocksPerSecond / this.audioResamplerFirstPassFactor }`);\n        // console.log(`Max Buffer Size: ${ Math.max(this.baseCPUCyclesPerIteration * settings[8] / this.audioResamplerFirstPassFactor, 8192) << 1 }`);\n\n        this.initAudioBuffer();\n    }\n    else if (this.audioHandle) {\n        //Mute the audio output, as it has an immediate silencing effect:\n        this.audioHandle.changeVolume(0);\n    }\n}\nGameBoyCore.prototype.changeVolume = function () {\n    if (settings[0] && this.audioHandle) {\n        this.audioHandle.changeVolume(settings[3]);\n    }\n}\nGameBoyCore.prototype.initAudioBuffer = function () {\n    this.audioIndex = 0;\n    this.audioDestinationPosition = 0;\n    this.downsampleInput = 0;\n    this.bufferContainAmount = Math.max(this.baseCPUCyclesPerIteration * settings[7] / this.audioResamplerFirstPassFactor, 4096) << 1;\n    this.numSamplesTotal = (this.baseCPUCyclesPerIteration / this.audioResamplerFirstPassFactor) << 1;\n    this.audioBuffer = this.getTypedArray(this.numSamplesTotal, 0, \"float32\");\n}\nGameBoyCore.prototype.intializeWhiteNoise = function () {\n    //Noise Sample Tables:\n    var randomFactor = 1;\n    //15-bit LSFR Cache Generation:\n    this.LSFR15Table = this.getTypedArray(0x80000, 0, \"int8\");\n    var LSFR = 0x7FFF;  //Seed value has all its bits set.\n    var LSFRShifted = 0x3FFF;\n    for (var index = 0; index < 0x8000; ++index) {\n        //Normalize the last LSFR value for usage:\n        randomFactor = 1 - (LSFR & 1);  //Docs say it's the inverse.\n        //Cache the different volume level results:\n        this.LSFR15Table[0x08000 | index] = randomFactor;\n        this.LSFR15Table[0x10000 | index] = randomFactor * 0x2;\n        this.LSFR15Table[0x18000 | index] = randomFactor * 0x3;\n        this.LSFR15Table[0x20000 | index] = randomFactor * 0x4;\n        this.LSFR15Table[0x28000 | index] = randomFactor * 0x5;\n        this.LSFR15Table[0x30000 | index] = randomFactor * 0x6;\n        this.LSFR15Table[0x38000 | index] = randomFactor * 0x7;\n        this.LSFR15Table[0x40000 | index] = randomFactor * 0x8;\n        this.LSFR15Table[0x48000 | index] = randomFactor * 0x9;\n        this.LSFR15Table[0x50000 | index] = randomFactor * 0xA;\n        this.LSFR15Table[0x58000 | index] = randomFactor * 0xB;\n        this.LSFR15Table[0x60000 | index] = randomFactor * 0xC;\n        this.LSFR15Table[0x68000 | index] = randomFactor * 0xD;\n        this.LSFR15Table[0x70000 | index] = randomFactor * 0xE;\n        this.LSFR15Table[0x78000 | index] = randomFactor * 0xF;\n        //Recompute the LSFR algorithm:\n        LSFRShifted = LSFR >> 1;\n        LSFR = LSFRShifted | (((LSFRShifted ^ LSFR) & 0x1) << 14);\n    }\n    //7-bit LSFR Cache Generation:\n    this.LSFR7Table = this.getTypedArray(0x800, 0, \"int8\");\n    LSFR = 0x7F;    //Seed value has all its bits set.\n    for (index = 0; index < 0x80; ++index) {\n        //Normalize the last LSFR value for usage:\n        randomFactor = 1 - (LSFR & 1);  //Docs say it's the inverse.\n        //Cache the different volume level results:\n        this.LSFR7Table[0x080 | index] = randomFactor;\n        this.LSFR7Table[0x100 | index] = randomFactor * 0x2;\n        this.LSFR7Table[0x180 | index] = randomFactor * 0x3;\n        this.LSFR7Table[0x200 | index] = randomFactor * 0x4;\n        this.LSFR7Table[0x280 | index] = randomFactor * 0x5;\n        this.LSFR7Table[0x300 | index] = randomFactor * 0x6;\n        this.LSFR7Table[0x380 | index] = randomFactor * 0x7;\n        this.LSFR7Table[0x400 | index] = randomFactor * 0x8;\n        this.LSFR7Table[0x480 | index] = randomFactor * 0x9;\n        this.LSFR7Table[0x500 | index] = randomFactor * 0xA;\n        this.LSFR7Table[0x580 | index] = randomFactor * 0xB;\n        this.LSFR7Table[0x600 | index] = randomFactor * 0xC;\n        this.LSFR7Table[0x680 | index] = randomFactor * 0xD;\n        this.LSFR7Table[0x700 | index] = randomFactor * 0xE;\n        this.LSFR7Table[0x780 | index] = randomFactor * 0xF;\n        //Recompute the LSFR algorithm:\n        LSFRShifted = LSFR >> 1;\n        LSFR = LSFRShifted | (((LSFRShifted ^ LSFR) & 0x1) << 6);\n    }\n    //Set the default noise table:\n    this.noiseSampleTable = this.LSFR15Table;\n}\nGameBoyCore.prototype.audioUnderrunAdjustment = function () {\n    if (settings[0]) {\n        //var underrunAmount = this.audioHandle.remainingBuffer();\n        var underrunAmount = null; //I don't know what this is or why it matters.\n        //From what I can tell, this is basically just \"how much space do I have left in this buffer.\"\n        //I'm gonna need to care about that.\n        //But I'm not sure how *much* I'm going to need to care about it.\n        //If I'm working with the raw buffer, then maybe... maybe I can just change the size to fit?\n        //For now I'm going to ignore it and see what happens.\n        //I need to know what the output format of the audio is.\n\n        if (typeof underrunAmount == \"number\") {\n            underrunAmount = this.bufferContainAmount - Math.max(underrunAmount, 0);\n            if (underrunAmount > 0) {\n                this.recalculateIterationClockLimitForAudio((underrunAmount >> 1) * this.audioResamplerFirstPassFactor);\n            }\n        }\n    }\n}\nGameBoyCore.prototype.initializeAudioStartState = function () {\n    this.channel1FrequencyTracker = 0x2000;\n    this.channel1DutyTracker = 0;\n    this.channel1CachedDuty = this.dutyLookup[2];\n    this.channel1totalLength = 0;\n    this.channel1envelopeVolume = 0;\n    this.channel1envelopeType = false;\n    this.channel1envelopeSweeps = 0;\n    this.channel1envelopeSweepsLast = 0;\n    this.channel1consecutive = true;\n    this.channel1frequency = 0;\n    this.channel1SweepFault = false;\n    this.channel1ShadowFrequency = 0;\n    this.channel1timeSweep = 1;\n    this.channel1lastTimeSweep = 0;\n    this.channel1Swept = false;\n    this.channel1frequencySweepDivider = 0;\n    this.channel1decreaseSweep = false;\n    this.channel2FrequencyTracker = 0x2000;\n    this.channel2DutyTracker = 0;\n    this.channel2CachedDuty = this.dutyLookup[2];\n    this.channel2totalLength = 0;\n    this.channel2envelopeVolume = 0;\n    this.channel2envelopeType = false;\n    this.channel2envelopeSweeps = 0;\n    this.channel2envelopeSweepsLast = 0;\n    this.channel2consecutive = true;\n    this.channel2frequency = 0;\n    this.channel3canPlay = false;\n    this.channel3totalLength = 0;\n    this.channel3patternType = 4;\n    this.channel3frequency = 0;\n    this.channel3consecutive = true;\n    this.channel3Counter = 0x800;\n    this.channel4FrequencyPeriod = 8;\n    this.channel4totalLength = 0;\n    this.channel4envelopeVolume = 0;\n    this.channel4currentVolume = 0;\n    this.channel4envelopeType = false;\n    this.channel4envelopeSweeps = 0;\n    this.channel4envelopeSweepsLast = 0;\n    this.channel4consecutive = true;\n    this.channel4BitRange = 0x7FFF;\n    this.noiseSampleTable = this.LSFR15Table;\n    this.channel4VolumeShifter = 15;\n    this.channel1FrequencyCounter = 0x2000;\n    this.channel2FrequencyCounter = 0x2000;\n    this.channel3Counter = 0x800;\n    this.channel3FrequencyPeriod = 0x800;\n    this.channel3lastSampleLookup = 0;\n    this.channel4lastSampleLookup = 0;\n    this.VinLeftChannelMasterVolume = 8;\n    this.VinRightChannelMasterVolume = 8;\n    this.mixerOutputCache = 0;\n    this.sequencerClocks = 0x2000;\n    this.sequencePosition = 0;\n    this.channel4FrequencyPeriod = 8;\n    this.channel4Counter = 8;\n    this.cachedChannel3Sample = 0;\n    this.cachedChannel4Sample = 0;\n    this.channel1Enabled = false;\n    this.channel2Enabled = false;\n    this.channel3Enabled = false;\n    this.channel4Enabled = false;\n    this.channel1canPlay = false;\n    this.channel2canPlay = false;\n    this.channel4canPlay = false;\n    this.audioClocksUntilNextEvent = 1;\n    this.audioClocksUntilNextEventCounter = 1;\n    this.channel1OutputLevelCache();\n    this.channel2OutputLevelCache();\n    this.channel3OutputLevelCache();\n    this.channel4OutputLevelCache();\n    this.noiseSampleTable = this.LSFR15Table;\n}\nGameBoyCore.prototype.outputAudio = function () {\n    this.audioBuffer[this.audioDestinationPosition++] = (this.downsampleInput >>> 16) * this.downSampleInputDivider - 1;\n    this.audioBuffer[this.audioDestinationPosition++] = (this.downsampleInput & 0xFFFF) * this.downSampleInputDivider - 1;\n    if (this.audioDestinationPosition == this.numSamplesTotal) {\n        //this.audioHandle.writeAudioNoCallback(this.audioBuffer);\n        this.audioDestinationPosition = 0;\n    }\n    this.downsampleInput = 0;\n}\n//Below are the audio generation functions timed against the CPU:\nGameBoyCore.prototype.generateAudio = function (numSamples) {\n    var multiplier = 0;\n    if (this.soundMasterEnabled && !this.CPUStopped) {\n        for (var clockUpTo = 0; numSamples > 0;) {\n            clockUpTo = Math.min(this.audioClocksUntilNextEventCounter, this.sequencerClocks, numSamples);\n            this.audioClocksUntilNextEventCounter -= clockUpTo;\n            this.sequencerClocks -= clockUpTo;\n            numSamples -= clockUpTo;\n            while (clockUpTo > 0) {\n                multiplier = Math.min(clockUpTo, this.audioResamplerFirstPassFactor - this.audioIndex);\n                clockUpTo -= multiplier;\n                this.audioIndex += multiplier;\n                this.downsampleInput += this.mixerOutputCache * multiplier;\n                if (this.audioIndex == this.audioResamplerFirstPassFactor) {\n                    this.audioIndex = 0;\n                    this.outputAudio();\n                }\n            }\n            if (this.sequencerClocks == 0) {\n                this.audioComputeSequencer();\n                this.sequencerClocks = 0x2000;\n            }\n            if (this.audioClocksUntilNextEventCounter == 0) {\n                this.computeAudioChannels();\n            }\n        }\n    }\n    else {\n        //SILENT OUTPUT:\n        while (numSamples > 0) {\n            multiplier = Math.min(numSamples, this.audioResamplerFirstPassFactor - this.audioIndex);\n            numSamples -= multiplier;\n            this.audioIndex += multiplier;\n            if (this.audioIndex == this.audioResamplerFirstPassFactor) {\n                this.audioIndex = 0;\n                this.outputAudio();\n            }\n        }\n    }\n}\n//Generate audio, but don't actually output it (Used for when sound is disabled by user/browser):\nGameBoyCore.prototype.generateAudioFake = function (numSamples) {\n    if (this.soundMasterEnabled && !this.CPUStopped) {\n        for (var clockUpTo = 0; numSamples > 0;) {\n            clockUpTo = Math.min(this.audioClocksUntilNextEventCounter, this.sequencerClocks, numSamples);\n            this.audioClocksUntilNextEventCounter -= clockUpTo;\n            this.sequencerClocks -= clockUpTo;\n            numSamples -= clockUpTo;\n            if (this.sequencerClocks == 0) {\n                this.audioComputeSequencer();\n                this.sequencerClocks = 0x2000;\n            }\n            if (this.audioClocksUntilNextEventCounter == 0) {\n                this.computeAudioChannels();\n            }\n        }\n    }\n}\nGameBoyCore.prototype.audioJIT = function () {\n    //Audio Sample Generation Timing:\n    if (settings[0]) {\n        this.generateAudio(this.audioTicks);\n    }\n    else {\n        this.generateAudioFake(this.audioTicks);\n    }\n    this.audioTicks = 0;\n}\nGameBoyCore.prototype.audioComputeSequencer = function () {\n    switch (this.sequencePosition++) {\n        case 0:\n            this.clockAudioLength();\n            break;\n        case 2:\n            this.clockAudioLength();\n            this.clockAudioSweep();\n            break;\n        case 4:\n            this.clockAudioLength();\n            break;\n        case 6:\n            this.clockAudioLength();\n            this.clockAudioSweep();\n            break;\n        case 7:\n            this.clockAudioEnvelope();\n            this.sequencePosition = 0;\n    }\n}\nGameBoyCore.prototype.clockAudioLength = function () {\n    //Channel 1:\n    if (this.channel1totalLength > 1) {\n        --this.channel1totalLength;\n    }\n    else if (this.channel1totalLength == 1) {\n        this.channel1totalLength = 0;\n        this.channel1EnableCheck();\n        this.memory[0xFF26] &= 0xFE;    //Channel #1 On Flag Off\n    }\n    //Channel 2:\n    if (this.channel2totalLength > 1) {\n        --this.channel2totalLength;\n    }\n    else if (this.channel2totalLength == 1) {\n        this.channel2totalLength = 0;\n        this.channel2EnableCheck();\n        this.memory[0xFF26] &= 0xFD;    //Channel #2 On Flag Off\n    }\n    //Channel 3:\n    if (this.channel3totalLength > 1) {\n        --this.channel3totalLength;\n    }\n    else if (this.channel3totalLength == 1) {\n        this.channel3totalLength = 0;\n        this.channel3EnableCheck();\n        this.memory[0xFF26] &= 0xFB;    //Channel #3 On Flag Off\n    }\n    //Channel 4:\n    if (this.channel4totalLength > 1) {\n        --this.channel4totalLength;\n    }\n    else if (this.channel4totalLength == 1) {\n        this.channel4totalLength = 0;\n        this.channel4EnableCheck();\n        this.memory[0xFF26] &= 0xF7;    //Channel #4 On Flag Off\n    }\n}\nGameBoyCore.prototype.clockAudioSweep = function () {\n    //Channel 1:\n    if (!this.channel1SweepFault && this.channel1timeSweep > 0) {\n        if (--this.channel1timeSweep == 0) {\n            this.runAudioSweep();\n        }\n    }\n}\nGameBoyCore.prototype.runAudioSweep = function () {\n    //Channel 1:\n    if (this.channel1lastTimeSweep > 0) {\n        if (this.channel1frequencySweepDivider > 0) {\n            this.channel1Swept = true;\n            if (this.channel1decreaseSweep) {\n                this.channel1ShadowFrequency -= this.channel1ShadowFrequency >> this.channel1frequencySweepDivider;\n                this.channel1frequency = this.channel1ShadowFrequency & 0x7FF;\n                this.channel1FrequencyTracker = (0x800 - this.channel1frequency) << 2;\n            }\n            else {\n                this.channel1ShadowFrequency += this.channel1ShadowFrequency >> this.channel1frequencySweepDivider;\n                this.channel1frequency = this.channel1ShadowFrequency;\n                if (this.channel1ShadowFrequency <= 0x7FF) {\n                    this.channel1FrequencyTracker = (0x800 - this.channel1frequency) << 2;\n                    //Run overflow check twice:\n                    if ((this.channel1ShadowFrequency + (this.channel1ShadowFrequency >> this.channel1frequencySweepDivider)) > 0x7FF) {\n                        this.channel1SweepFault = true;\n                        this.channel1EnableCheck();\n                        this.memory[0xFF26] &= 0xFE;    //Channel #1 On Flag Off\n                    }\n                }\n                else {\n                    this.channel1frequency &= 0x7FF;\n                    this.channel1SweepFault = true;\n                    this.channel1EnableCheck();\n                    this.memory[0xFF26] &= 0xFE;    //Channel #1 On Flag Off\n                }\n            }\n            this.channel1timeSweep = this.channel1lastTimeSweep;\n        }\n        else {\n            //Channel has sweep disabled and timer becomes a length counter:\n            this.channel1SweepFault = true;\n            this.channel1EnableCheck();\n        }\n    }\n}\nGameBoyCore.prototype.channel1AudioSweepPerformDummy = function () {\n    //Channel 1:\n    if (this.channel1frequencySweepDivider > 0) {\n        if (!this.channel1decreaseSweep) {\n            var channel1ShadowFrequency = this.channel1ShadowFrequency + (this.channel1ShadowFrequency >> this.channel1frequencySweepDivider);\n            if (channel1ShadowFrequency <= 0x7FF) {\n                //Run overflow check twice:\n                if ((channel1ShadowFrequency + (channel1ShadowFrequency >> this.channel1frequencySweepDivider)) > 0x7FF) {\n                    this.channel1SweepFault = true;\n                    this.channel1EnableCheck();\n                    this.memory[0xFF26] &= 0xFE;    //Channel #1 On Flag Off\n                }\n            }\n            else {\n                this.channel1SweepFault = true;\n                this.channel1EnableCheck();\n                this.memory[0xFF26] &= 0xFE;    //Channel #1 On Flag Off\n            }\n        }\n    }\n}\nGameBoyCore.prototype.clockAudioEnvelope = function () {\n    //Channel 1:\n    if (this.channel1envelopeSweepsLast > -1) {\n        if (this.channel1envelopeSweeps > 0) {\n            --this.channel1envelopeSweeps;\n        }\n        else {\n            if (!this.channel1envelopeType) {\n                if (this.channel1envelopeVolume > 0) {\n                    --this.channel1envelopeVolume;\n                    this.channel1envelopeSweeps = this.channel1envelopeSweepsLast;\n                    this.channel1OutputLevelCache();\n                }\n                else {\n                    this.channel1envelopeSweepsLast = -1;\n                }\n            }\n            else if (this.channel1envelopeVolume < 0xF) {\n                ++this.channel1envelopeVolume;\n                this.channel1envelopeSweeps = this.channel1envelopeSweepsLast;\n                this.channel1OutputLevelCache();\n            }\n            else {\n                this.channel1envelopeSweepsLast = -1;\n            }\n        }\n    }\n    //Channel 2:\n    if (this.channel2envelopeSweepsLast > -1) {\n        if (this.channel2envelopeSweeps > 0) {\n            --this.channel2envelopeSweeps;\n        }\n        else {\n            if (!this.channel2envelopeType) {\n                if (this.channel2envelopeVolume > 0) {\n                    --this.channel2envelopeVolume;\n                    this.channel2envelopeSweeps = this.channel2envelopeSweepsLast;\n                    this.channel2OutputLevelCache();\n                }\n                else {\n                    this.channel2envelopeSweepsLast = -1;\n                }\n            }\n            else if (this.channel2envelopeVolume < 0xF) {\n                ++this.channel2envelopeVolume;\n                this.channel2envelopeSweeps = this.channel2envelopeSweepsLast;\n                this.channel2OutputLevelCache();\n            }\n            else {\n                this.channel2envelopeSweepsLast = -1;\n            }\n        }\n    }\n    //Channel 4:\n    if (this.channel4envelopeSweepsLast > -1) {\n        if (this.channel4envelopeSweeps > 0) {\n            --this.channel4envelopeSweeps;\n        }\n        else {\n            if (!this.channel4envelopeType) {\n                if (this.channel4envelopeVolume > 0) {\n                    this.channel4currentVolume = --this.channel4envelopeVolume << this.channel4VolumeShifter;\n                    this.channel4envelopeSweeps = this.channel4envelopeSweepsLast;\n                    this.channel4UpdateCache();\n                }\n                else {\n                    this.channel4envelopeSweepsLast = -1;\n                }\n            }\n            else if (this.channel4envelopeVolume < 0xF) {\n                this.channel4currentVolume = ++this.channel4envelopeVolume << this.channel4VolumeShifter;\n                this.channel4envelopeSweeps = this.channel4envelopeSweepsLast;\n                this.channel4UpdateCache();\n            }\n            else {\n                this.channel4envelopeSweepsLast = -1;\n            }\n        }\n    }\n}\nGameBoyCore.prototype.computeAudioChannels = function () {\n    //Clock down the four audio channels to the next closest audio event:\n    this.channel1FrequencyCounter -= this.audioClocksUntilNextEvent;\n    this.channel2FrequencyCounter -= this.audioClocksUntilNextEvent;\n    this.channel3Counter -= this.audioClocksUntilNextEvent;\n    this.channel4Counter -= this.audioClocksUntilNextEvent;\n    //Channel 1 counter:\n    if (this.channel1FrequencyCounter == 0) {\n        this.channel1FrequencyCounter = this.channel1FrequencyTracker;\n        this.channel1DutyTracker = (this.channel1DutyTracker + 1) & 0x7;\n        this.channel1OutputLevelTrimaryCache();\n    }\n    //Channel 2 counter:\n    if (this.channel2FrequencyCounter == 0) {\n        this.channel2FrequencyCounter = this.channel2FrequencyTracker;\n        this.channel2DutyTracker = (this.channel2DutyTracker + 1) & 0x7;\n        this.channel2OutputLevelTrimaryCache();\n    }\n    //Channel 3 counter:\n    if (this.channel3Counter == 0) {\n        if (this.channel3canPlay) {\n            this.channel3lastSampleLookup = (this.channel3lastSampleLookup + 1) & 0x1F;\n        }\n        this.channel3Counter = this.channel3FrequencyPeriod;\n        this.channel3UpdateCache();\n    }\n    //Channel 4 counter:\n    if (this.channel4Counter == 0) {\n        this.channel4lastSampleLookup = (this.channel4lastSampleLookup + 1) & this.channel4BitRange;\n        this.channel4Counter = this.channel4FrequencyPeriod;\n        this.channel4UpdateCache();\n    }\n    //Find the number of clocks to next closest counter event:\n    this.audioClocksUntilNextEventCounter = this.audioClocksUntilNextEvent = Math.min(this.channel1FrequencyCounter, this.channel2FrequencyCounter, this.channel3Counter, this.channel4Counter);\n}\nGameBoyCore.prototype.channel1EnableCheck = function () {\n    this.channel1Enabled = ((this.channel1consecutive || this.channel1totalLength > 0) && !this.channel1SweepFault && this.channel1canPlay);\n    this.channel1OutputLevelSecondaryCache();\n}\nGameBoyCore.prototype.channel1VolumeEnableCheck = function () {\n    this.channel1canPlay = (this.memory[0xFF12] > 7);\n    this.channel1EnableCheck();\n    this.channel1OutputLevelSecondaryCache();\n}\nGameBoyCore.prototype.channel1OutputLevelCache = function () {\n    this.channel1currentSampleLeft = (this.leftChannel1) ? this.channel1envelopeVolume : 0;\n    this.channel1currentSampleRight = (this.rightChannel1) ? this.channel1envelopeVolume : 0;\n    this.channel1OutputLevelSecondaryCache();\n}\nGameBoyCore.prototype.channel1OutputLevelSecondaryCache = function () {\n    if (this.channel1Enabled) {\n        this.channel1currentSampleLeftSecondary = this.channel1currentSampleLeft;\n        this.channel1currentSampleRightSecondary = this.channel1currentSampleRight;\n    }\n    else {\n        this.channel1currentSampleLeftSecondary = 0;\n        this.channel1currentSampleRightSecondary = 0;\n    }\n    this.channel1OutputLevelTrimaryCache();\n}\nGameBoyCore.prototype.channel1OutputLevelTrimaryCache = function () {\n    if (this.channel1CachedDuty[this.channel1DutyTracker] && settings[14][0]) {\n        this.channel1currentSampleLeftTrimary = this.channel1currentSampleLeftSecondary;\n        this.channel1currentSampleRightTrimary = this.channel1currentSampleRightSecondary;\n    }\n    else {\n        this.channel1currentSampleLeftTrimary = 0;\n        this.channel1currentSampleRightTrimary = 0;\n    }\n    this.mixerOutputLevelCache();\n}\nGameBoyCore.prototype.channel2EnableCheck = function () {\n    this.channel2Enabled = ((this.channel2consecutive || this.channel2totalLength > 0) && this.channel2canPlay);\n    this.channel2OutputLevelSecondaryCache();\n}\nGameBoyCore.prototype.channel2VolumeEnableCheck = function () {\n    this.channel2canPlay = (this.memory[0xFF17] > 7);\n    this.channel2EnableCheck();\n    this.channel2OutputLevelSecondaryCache();\n}\nGameBoyCore.prototype.channel2OutputLevelCache = function () {\n    this.channel2currentSampleLeft = (this.leftChannel2) ? this.channel2envelopeVolume : 0;\n    this.channel2currentSampleRight = (this.rightChannel2) ? this.channel2envelopeVolume : 0;\n    this.channel2OutputLevelSecondaryCache();\n}\nGameBoyCore.prototype.channel2OutputLevelSecondaryCache = function () {\n    if (this.channel2Enabled) {\n        this.channel2currentSampleLeftSecondary = this.channel2currentSampleLeft;\n        this.channel2currentSampleRightSecondary = this.channel2currentSampleRight;\n    }\n    else {\n        this.channel2currentSampleLeftSecondary = 0;\n        this.channel2currentSampleRightSecondary = 0;\n    }\n    this.channel2OutputLevelTrimaryCache();\n}\nGameBoyCore.prototype.channel2OutputLevelTrimaryCache = function () {\n    if (this.channel2CachedDuty[this.channel2DutyTracker] && settings[14][1]) {\n        this.channel2currentSampleLeftTrimary = this.channel2currentSampleLeftSecondary;\n        this.channel2currentSampleRightTrimary = this.channel2currentSampleRightSecondary;\n    }\n    else {\n        this.channel2currentSampleLeftTrimary = 0;\n        this.channel2currentSampleRightTrimary = 0;\n    }\n    this.mixerOutputLevelCache();\n}\nGameBoyCore.prototype.channel3EnableCheck = function () {\n    this.channel3Enabled = (/*this.channel3canPlay && */(this.channel3consecutive || this.channel3totalLength > 0));\n    this.channel3OutputLevelSecondaryCache();\n}\nGameBoyCore.prototype.channel3OutputLevelCache = function () {\n    this.channel3currentSampleLeft = (this.leftChannel3) ? this.cachedChannel3Sample : 0;\n    this.channel3currentSampleRight = (this.rightChannel3) ? this.cachedChannel3Sample : 0;\n    this.channel3OutputLevelSecondaryCache();\n}\nGameBoyCore.prototype.channel3OutputLevelSecondaryCache = function () {\n    if (this.channel3Enabled && settings[14][2]) {\n        this.channel3currentSampleLeftSecondary = this.channel3currentSampleLeft;\n        this.channel3currentSampleRightSecondary = this.channel3currentSampleRight;\n    }\n    else {\n        this.channel3currentSampleLeftSecondary = 0;\n        this.channel3currentSampleRightSecondary = 0;\n    }\n    this.mixerOutputLevelCache();\n}\nGameBoyCore.prototype.channel4EnableCheck = function () {\n    this.channel4Enabled = ((this.channel4consecutive || this.channel4totalLength > 0) && this.channel4canPlay);\n    this.channel4OutputLevelSecondaryCache();\n}\nGameBoyCore.prototype.channel4VolumeEnableCheck = function () {\n    this.channel4canPlay = (this.memory[0xFF21] > 7);\n    this.channel4EnableCheck();\n    this.channel4OutputLevelSecondaryCache();\n}\nGameBoyCore.prototype.channel4OutputLevelCache = function () {\n    this.channel4currentSampleLeft = (this.leftChannel4) ? this.cachedChannel4Sample : 0;\n    this.channel4currentSampleRight = (this.rightChannel4) ? this.cachedChannel4Sample : 0;\n    this.channel4OutputLevelSecondaryCache();\n}\nGameBoyCore.prototype.channel4OutputLevelSecondaryCache = function () {\n    if (this.channel4Enabled && settings[14][3]) {\n        this.channel4currentSampleLeftSecondary = this.channel4currentSampleLeft;\n        this.channel4currentSampleRightSecondary = this.channel4currentSampleRight;\n    }\n    else {\n        this.channel4currentSampleLeftSecondary = 0;\n        this.channel4currentSampleRightSecondary = 0;\n    }\n    this.mixerOutputLevelCache();\n}\nGameBoyCore.prototype.mixerOutputLevelCache = function () {\n    this.mixerOutputCache = ((((this.channel1currentSampleLeftTrimary + this.channel2currentSampleLeftTrimary + this.channel3currentSampleLeftSecondary + this.channel4currentSampleLeftSecondary) * this.VinLeftChannelMasterVolume) << 16) |\n    ((this.channel1currentSampleRightTrimary + this.channel2currentSampleRightTrimary + this.channel3currentSampleRightSecondary + this.channel4currentSampleRightSecondary) * this.VinRightChannelMasterVolume));\n}\nGameBoyCore.prototype.channel3UpdateCache = function () {\n    this.cachedChannel3Sample = this.channel3PCM[this.channel3lastSampleLookup] >> this.channel3patternType;\n    this.channel3OutputLevelCache();\n}\nGameBoyCore.prototype.channel3WriteRAM = function (address, data) {\n    if (this.channel3canPlay) {\n        this.audioJIT();\n        //address = this.channel3lastSampleLookup >> 1;\n    }\n    this.memory[0xFF30 | address] = data;\n    address <<= 1;\n    this.channel3PCM[address] = data >> 4;\n    this.channel3PCM[address | 1] = data & 0xF;\n}\nGameBoyCore.prototype.channel4UpdateCache = function () {\n    this.cachedChannel4Sample = this.noiseSampleTable[this.channel4currentVolume | this.channel4lastSampleLookup];\n    this.channel4OutputLevelCache();\n}\nGameBoyCore.prototype.run = function () {\n    //The preprocessing before the actual iteration loop:\n    if ((this.stopEmulator & 2) == 0) {\n        if ((this.stopEmulator & 1) == 1) {\n            if (!this.CPUStopped) {\n                this.stopEmulator = 0;\n                this.audioUnderrunAdjustment();\n                this.clockUpdate();         //RTC clocking.\n                if (!this.halt) {\n                    this.executeIteration();\n                }\n                else {                      //Finish the HALT rundown execution.\n                    this.CPUTicks = 0;\n                    this.calculateHALTPeriod();\n                    if (this.halt) {\n                        this.updateCore();\n                        this.iterationEndRoutine();\n                    }\n                    else {\n                        this.executeIteration();\n                    }\n                }\n                //Request the graphics target to be updated:\n                this.requestDraw();\n                this.frameDone = true;\n            }\n            else {\n                this.audioUnderrunAdjustment();\n                this.audioTicks += this.CPUCyclesTotal;\n                this.audioJIT();\n                this.stopEmulator |= 1;         //End current loop.\n            }\n        }\n        else {      //We can only get here if there was an internal error, but the loop was restarted.\n            console.log(\"Iterator restarted a faulted core.\");\n            pause();\n        }\n    }\n}\nGameBoyCore.prototype.executeIteration = function () {\n    //Iterate the interpreter loop:\n    var opcodeToExecute = 0;\n    var timedTicks = 0;\n    while (this.stopEmulator == 0) {\n        //Interrupt Arming:\n        switch (this.IRQEnableDelay) {\n            case 1:\n                this.IME = true;\n                this.checkIRQMatching();\n            case 2:\n                --this.IRQEnableDelay;\n        }\n        //Is an IRQ set to fire?:\n        if (this.IRQLineMatched > 0) {\n            //IME is true and and interrupt was matched:\n            this.launchIRQ();\n        }\n        //Fetch the current opcode:\n        opcodeToExecute = this.memoryReader[this.programCounter](this, this.programCounter);\n        //Increment the program counter to the next instruction:\n        this.programCounter = (this.programCounter + 1) & 0xFFFF;\n        //Check for the program counter quirk:\n        if (this.skipPCIncrement) {\n            this.programCounter = (this.programCounter - 1) & 0xFFFF;\n            this.skipPCIncrement = false;\n        }\n        //Get how many CPU cycles the current instruction counts for:\n        this.CPUTicks = this.TICKTable[opcodeToExecute];\n        //Execute the current instruction:\n        this.OPCODE[opcodeToExecute](this);\n        //Update the state (Inlined updateCoreFull manually here):\n        //Update the clocking for the LCD emulation:\n        this.LCDTicks += this.CPUTicks >> this.doubleSpeedShifter;  //LCD Timing\n        this.LCDCONTROL[this.actualScanLine](this);                 //Scan Line and STAT Mode Control\n        //Single-speed relative timing for A/V emulation:\n        timedTicks = this.CPUTicks >> this.doubleSpeedShifter;      //CPU clocking can be updated from the LCD handling.\n        this.audioTicks += timedTicks;                              //Audio Timing\n        this.emulatorTicks += timedTicks;                           //Emulator Timing\n        //CPU Timers:\n        this.DIVTicks += this.CPUTicks;                             //DIV Timing\n        if (this.TIMAEnabled) {                                     //TIMA Timing\n            this.timerTicks += this.CPUTicks;\n            while (this.timerTicks >= this.TACClocker) {\n                this.timerTicks -= this.TACClocker;\n                if (++this.memory[0xFF05] == 0x100) {\n                    this.memory[0xFF05] = this.memory[0xFF06];\n                    this.interruptsRequested |= 0x4;\n                    this.checkIRQMatching();\n                }\n            }\n        }\n        if (this.serialTimer > 0) {                                     //Serial Timing\n            //IRQ Counter:\n            this.serialTimer -= this.CPUTicks;\n            if (this.serialTimer <= 0) {\n                this.interruptsRequested |= 0x8;\n                this.checkIRQMatching();\n            }\n            //Bit Shit Counter:\n            this.serialShiftTimer -= this.CPUTicks;\n            if (this.serialShiftTimer <= 0) {\n                this.serialShiftTimer = this.serialShiftTimerAllocated;\n                this.memory[0xFF01] = ((this.memory[0xFF01] << 1) & 0xFE) | 0x01;   //We could shift in actual link data here if we were to implement such!!!\n            }\n        }\n        //End of iteration routine:\n        if (this.emulatorTicks >= this.CPUCyclesTotal) {\n            this.iterationEndRoutine();\n        }\n    }\n}\nGameBoyCore.prototype.iterationEndRoutine = function () {\n    if ((this.stopEmulator & 0x1) == 0) {\n        this.audioJIT();    //Make sure we at least output once per iteration.\n        //Update DIV Alignment (Integer overflow safety):\n        this.memory[0xFF04] = (this.memory[0xFF04] + (this.DIVTicks >> 8)) & 0xFF;\n        this.DIVTicks &= 0xFF;\n        //Update emulator flags:\n        this.stopEmulator |= 1;         //End current loop.\n        this.emulatorTicks -= this.CPUCyclesTotal;\n        this.CPUCyclesTotalCurrent += this.CPUCyclesTotalRoundoff;\n        this.recalculateIterationClockLimit();\n    }\n}\nGameBoyCore.prototype.handleSTOP = function () {\n    this.CPUStopped = true;                     //Stop CPU until joypad input changes.\n    this.iterationEndRoutine();\n    if (this.emulatorTicks < 0) {\n        this.audioTicks -= this.emulatorTicks;\n        this.audioJIT();\n    }\n}\nGameBoyCore.prototype.recalculateIterationClockLimit = function () {\n    var endModulus = this.CPUCyclesTotalCurrent % 4;\n    this.CPUCyclesTotal = this.CPUCyclesTotalBase + this.CPUCyclesTotalCurrent - endModulus;\n    this.CPUCyclesTotalCurrent = endModulus;\n}\nGameBoyCore.prototype.recalculateIterationClockLimitForAudio = function (audioClocking) {\n    this.CPUCyclesTotal += Math.min((audioClocking >> 2) << 2, this.CPUCyclesTotalBase << 1);\n}\nGameBoyCore.prototype.scanLineMode2 = function () { //OAM Search Period\n    if (this.STATTracker != 1) {\n        if (this.mode2TriggerSTAT) {\n            this.interruptsRequested |= 0x2;\n            this.checkIRQMatching();\n        }\n        this.STATTracker = 1;\n        this.modeSTAT = 2;\n    }\n}\nGameBoyCore.prototype.scanLineMode3 = function () { //Scan Line Drawing Period\n    if (this.modeSTAT != 3) {\n        if (this.STATTracker == 0 && this.mode2TriggerSTAT) {\n            this.interruptsRequested |= 0x2;\n            this.checkIRQMatching();\n        }\n        this.STATTracker = 1;\n        this.modeSTAT = 3;\n    }\n}\nGameBoyCore.prototype.scanLineMode0 = function () { //Horizontal Blanking Period\n    if (this.modeSTAT != 0) {\n        if (this.STATTracker != 2) {\n            if (this.STATTracker == 0) {\n                if (this.mode2TriggerSTAT) {\n                    this.interruptsRequested |= 0x2;\n                    this.checkIRQMatching();\n                }\n                this.modeSTAT = 3;\n            }\n            this.incrementScanLineQueue();\n            this.updateSpriteCount(this.actualScanLine);\n            this.STATTracker = 2;\n        }\n        if (this.LCDTicks >= this.spriteCount) {\n            if (this.hdmaRunning) {\n                this.executeHDMA();\n            }\n            if (this.mode0TriggerSTAT) {\n                this.interruptsRequested |= 0x2;\n                this.checkIRQMatching();\n            }\n            this.STATTracker = 3;\n            this.modeSTAT = 0;\n        }\n    }\n}\nGameBoyCore.prototype.clocksUntilLYCMatch = function () {\n    if (this.memory[0xFF45] != 0) {\n        if (this.memory[0xFF45] > this.actualScanLine) {\n            return 456 * (this.memory[0xFF45] - this.actualScanLine);\n        }\n        return 456 * (154 - this.actualScanLine + this.memory[0xFF45]);\n    }\n    return (456 * ((this.actualScanLine == 153 && this.memory[0xFF44] == 0) ? 154 : (153 - this.actualScanLine))) + 8;\n}\nGameBoyCore.prototype.clocksUntilMode0 = function () {\n    switch (this.modeSTAT) {\n        case 0:\n            if (this.actualScanLine == 143) {\n                this.updateSpriteCount(0);\n                return this.spriteCount + 5016;\n            }\n            this.updateSpriteCount(this.actualScanLine + 1);\n            return this.spriteCount + 456;\n        case 2:\n        case 3:\n            this.updateSpriteCount(this.actualScanLine);\n            return this.spriteCount;\n        case 1:\n            this.updateSpriteCount(0);\n            return this.spriteCount + (456 * (154 - this.actualScanLine));\n    }\n}\nGameBoyCore.prototype.updateSpriteCount = function (line) {\n    this.spriteCount = 252;\n    if (this.cGBC && this.gfxSpriteShow) {                                      //Is the window enabled and are we in CGB mode?\n        var lineAdjusted = line + 0x10;\n        var yoffset = 0;\n        var yCap = (this.gfxSpriteNormalHeight) ? 0x8 : 0x10;\n        for (var OAMAddress = 0xFE00; OAMAddress < 0xFEA0 && this.spriteCount < 312; OAMAddress += 4) {\n            yoffset = lineAdjusted - this.memory[OAMAddress];\n            if (yoffset > -1 && yoffset < yCap) {\n                this.spriteCount += 6;\n            }\n        }\n    }\n};\nGameBoyCore.prototype.matchLYC = function () {  //LYC Register Compare\n    if (this.memory[0xFF44] == this.memory[0xFF45]) {\n        this.memory[0xFF41] |= 0x04;\n        if (this.LYCMatchTriggerSTAT) {\n            this.interruptsRequested |= 0x2;\n            this.checkIRQMatching();\n        }\n    }\n    else {\n        this.memory[0xFF41] &= 0x7B;\n    }\n};\nGameBoyCore.prototype.updateCore = function () {\n    //Update the clocking for the LCD emulation:\n    this.LCDTicks += this.CPUTicks >> this.doubleSpeedShifter;  //LCD Timing\n    this.LCDCONTROL[this.actualScanLine](this);                 //Scan Line and STAT Mode Control\n    //Single-speed relative timing for A/V emulation:\n    var timedTicks = this.CPUTicks >> this.doubleSpeedShifter;  //CPU clocking can be updated from the LCD handling.\n    this.audioTicks += timedTicks;                              //Audio Timing\n    this.emulatorTicks += timedTicks;                           //Emulator Timing\n    //CPU Timers:\n    this.DIVTicks += this.CPUTicks;                             //DIV Timing\n    if (this.TIMAEnabled) {                                     //TIMA Timing\n        this.timerTicks += this.CPUTicks;\n        while (this.timerTicks >= this.TACClocker) {\n            this.timerTicks -= this.TACClocker;\n            if (++this.memory[0xFF05] == 0x100) {\n                this.memory[0xFF05] = this.memory[0xFF06];\n                this.interruptsRequested |= 0x4;\n                this.checkIRQMatching();\n            }\n        }\n    }\n    if (this.serialTimer > 0) {                                     //Serial Timing\n        //IRQ Counter:\n        this.serialTimer -= this.CPUTicks;\n        if (this.serialTimer <= 0) {\n            this.interruptsRequested |= 0x8;\n            this.checkIRQMatching();\n        }\n        //Bit Shit Counter:\n        this.serialShiftTimer -= this.CPUTicks;\n        if (this.serialShiftTimer <= 0) {\n            this.serialShiftTimer = this.serialShiftTimerAllocated;\n            this.memory[0xFF01] = ((this.memory[0xFF01] << 1) & 0xFE) | 0x01;   //We could shift in actual link data here if we were to implement such!!!\n        }\n    }\n};\nGameBoyCore.prototype.updateCoreFull = function () {\n    //Update the state machine:\n    this.updateCore();\n    //End of iteration routine:\n    if (this.emulatorTicks >= this.CPUCyclesTotal) {\n        this.iterationEndRoutine();\n    }\n};\nGameBoyCore.prototype.initializeLCDController = function () {\n    //Display on hanlding:\n    var line = 0;\n    while (line < 154) {\n        if (line < 143) {\n            //We're on a normal scan line:\n            this.LINECONTROL[line] = function (parentObj) {\n                if (parentObj.LCDTicks < 80) {\n                    parentObj.scanLineMode2();\n                }\n                else if (parentObj.LCDTicks < 252) {\n                    parentObj.scanLineMode3();\n                }\n                else if (parentObj.LCDTicks < 456) {\n                    parentObj.scanLineMode0();\n                }\n                else {\n                    //We're on a new scan line:\n                    parentObj.LCDTicks -= 456;\n                    if (parentObj.STATTracker != 3) {\n                        //Make sure the mode 0 handler was run at least once per scan line:\n                        if (parentObj.STATTracker != 2) {\n                            if (parentObj.STATTracker == 0 && parentObj.mode2TriggerSTAT) {\n                                parentObj.interruptsRequested |= 0x2;\n                            }\n                            parentObj.incrementScanLineQueue();\n                        }\n                        if (parentObj.hdmaRunning) {\n                            parentObj.executeHDMA();\n                        }\n                        if (parentObj.mode0TriggerSTAT) {\n                            parentObj.interruptsRequested |= 0x2;\n                        }\n                    }\n                    //Update the scanline registers and assert the LYC counter:\n                    parentObj.actualScanLine = ++parentObj.memory[0xFF44];\n                    //Perform a LYC counter assert:\n                    if (parentObj.actualScanLine == parentObj.memory[0xFF45]) {\n                        parentObj.memory[0xFF41] |= 0x04;\n                        if (parentObj.LYCMatchTriggerSTAT) {\n                            parentObj.interruptsRequested |= 0x2;\n                        }\n                    }\n                    else {\n                        parentObj.memory[0xFF41] &= 0x7B;\n                    }\n                    parentObj.checkIRQMatching();\n                    //Reset our mode contingency variables:\n                    parentObj.STATTracker = 0;\n                    parentObj.modeSTAT = 2;\n                    parentObj.LINECONTROL[parentObj.actualScanLine](parentObj); //Scan Line and STAT Mode Control.\n                }\n            }\n        }\n        else if (line == 143) {\n            //We're on the last visible scan line of the LCD screen:\n            this.LINECONTROL[143] = function (parentObj) {\n                if (parentObj.LCDTicks < 80) {\n                    parentObj.scanLineMode2();\n                }\n                else if (parentObj.LCDTicks < 252) {\n                    parentObj.scanLineMode3();\n                }\n                else if (parentObj.LCDTicks < 456) {\n                    parentObj.scanLineMode0();\n                }\n                else {\n                    //Starting V-Blank:\n                    //Just finished the last visible scan line:\n                    parentObj.LCDTicks -= 456;\n                    if (parentObj.STATTracker != 3) {\n                        //Make sure the mode 0 handler was run at least once per scan line:\n                        if (parentObj.STATTracker != 2) {\n                            if (parentObj.STATTracker == 0 && parentObj.mode2TriggerSTAT) {\n                                parentObj.interruptsRequested |= 0x2;\n                            }\n                            parentObj.incrementScanLineQueue();\n                        }\n                        if (parentObj.hdmaRunning) {\n                            parentObj.executeHDMA();\n                        }\n                        if (parentObj.mode0TriggerSTAT) {\n                            parentObj.interruptsRequested |= 0x2;\n                        }\n                    }\n                    //Update the scanline registers and assert the LYC counter:\n                    parentObj.actualScanLine = parentObj.memory[0xFF44] = 144;\n                    //Perform a LYC counter assert:\n                    if (parentObj.memory[0xFF45] == 144) {\n                        parentObj.memory[0xFF41] |= 0x04;\n                        if (parentObj.LYCMatchTriggerSTAT) {\n                            parentObj.interruptsRequested |= 0x2;\n                        }\n                    }\n                    else {\n                        parentObj.memory[0xFF41] &= 0x7B;\n                    }\n                    //Reset our mode contingency variables:\n                    parentObj.STATTracker = 0;\n                    //Update our state for v-blank:\n                    parentObj.modeSTAT = 1;\n                    parentObj.interruptsRequested |= (parentObj.mode1TriggerSTAT) ? 0x3 : 0x1;\n                    parentObj.checkIRQMatching();\n                    //Attempt to blit out to our canvas:\n                    if (parentObj.drewBlank == 0) {\n                        //Ensure JIT framing alignment:\n                        if (parentObj.totalLinesPassed < 144 || (parentObj.totalLinesPassed == 144 && parentObj.midScanlineOffset > -1)) {\n                            //Make sure our gfx are up-to-date:\n                            parentObj.graphicsJITVBlank();\n                            //Draw the frame:\n                            parentObj.prepareFrame();\n                        }\n                    }\n                    else {\n                        //LCD off takes at least 2 frames:\n                        --parentObj.drewBlank;\n                    }\n                    parentObj.LINECONTROL[144](parentObj);  //Scan Line and STAT Mode Control.\n                }\n            }\n        }\n        else if (line < 153) {\n            //In VBlank\n            this.LINECONTROL[line] = function (parentObj) {\n                if (parentObj.LCDTicks >= 456) {\n                    //We're on a new scan line:\n                    parentObj.LCDTicks -= 456;\n                    parentObj.actualScanLine = ++parentObj.memory[0xFF44];\n                    //Perform a LYC counter assert:\n                    if (parentObj.actualScanLine == parentObj.memory[0xFF45]) {\n                        parentObj.memory[0xFF41] |= 0x04;\n                        if (parentObj.LYCMatchTriggerSTAT) {\n                            parentObj.interruptsRequested |= 0x2;\n                            parentObj.checkIRQMatching();\n                        }\n                    }\n                    else {\n                        parentObj.memory[0xFF41] &= 0x7B;\n                    }\n                    parentObj.LINECONTROL[parentObj.actualScanLine](parentObj); //Scan Line and STAT Mode Control.\n                }\n            }\n        }\n        else {\n            //VBlank Ending (We're on the last actual scan line)\n            this.LINECONTROL[153] = function (parentObj) {\n                if (parentObj.LCDTicks >= 8) {\n                    if (parentObj.STATTracker != 4 && parentObj.memory[0xFF44] == 153) {\n                        parentObj.memory[0xFF44] = 0;   //LY register resets to 0 early.\n                        //Perform a LYC counter assert:\n                        if (parentObj.memory[0xFF45] == 0) {\n                            parentObj.memory[0xFF41] |= 0x04;\n                            if (parentObj.LYCMatchTriggerSTAT) {\n                                parentObj.interruptsRequested |= 0x2;\n                                parentObj.checkIRQMatching();\n                            }\n                        }\n                        else {\n                            parentObj.memory[0xFF41] &= 0x7B;\n                        }\n                        parentObj.STATTracker = 4;\n                    }\n                    if (parentObj.LCDTicks >= 456) {\n                        //We reset back to the beginning:\n                        parentObj.LCDTicks -= 456;\n                        parentObj.STATTracker = parentObj.actualScanLine = 0;\n                        parentObj.LINECONTROL[0](parentObj);    //Scan Line and STAT Mode Control.\n                    }\n                }\n            }\n        }\n        ++line;\n    }\n};\nGameBoyCore.prototype.DisplayShowOff = function () {\n    if (this.drewBlank == 0) {\n        //Output a blank screen to the output framebuffer:\n        this.clearFrameBuffer();\n        this.drewFrame = true;\n    }\n    this.drewBlank = 2;\n};\nGameBoyCore.prototype.executeHDMA = function () {\n    this.DMAWrite(1);\n    if (this.halt) {\n        if ((this.LCDTicks - this.spriteCount) < ((4 >> this.doubleSpeedShifter) | 0x20)) {\n            //HALT clocking correction:\n            this.CPUTicks = 4 + ((0x20 + this.spriteCount) << this.doubleSpeedShifter);\n            this.LCDTicks = this.spriteCount + ((4 >> this.doubleSpeedShifter) | 0x20);\n        }\n    }\n    else {\n        this.LCDTicks += (4 >> this.doubleSpeedShifter) | 0x20;         //LCD Timing Update For HDMA.\n    }\n    if (this.memory[0xFF55] == 0) {\n        this.hdmaRunning = false;\n        this.memory[0xFF55] = 0xFF; //Transfer completed (\"Hidden last step,\" since some ROMs don't imply this, but most do).\n    }\n    else {\n        --this.memory[0xFF55];\n    }\n};\nGameBoyCore.prototype.clockUpdate = function () {\n    if (this.cTIMER) {\n        var dateObj = new Date();\n        var newTime = dateObj.getTime();\n        var timeElapsed = newTime - this.lastIteration; //Get the numnber of milliseconds since this last executed.\n        this.lastIteration = newTime;\n        if (this.cTIMER && !this.RTCHALT) {\n            //Update the MBC3 RTC:\n            this.RTCSeconds += timeElapsed / 1000;\n            while (this.RTCSeconds >= 60) { //System can stutter, so the seconds difference can get large, thus the \"while\".\n                this.RTCSeconds -= 60;\n                ++this.RTCMinutes;\n                if (this.RTCMinutes >= 60) {\n                    this.RTCMinutes -= 60;\n                    ++this.RTCHours;\n                    if (this.RTCHours >= 24) {\n                        this.RTCHours -= 24;\n                        ++this.RTCDays;\n                        if (this.RTCDays >= 512) {\n                            this.RTCDays -= 512;\n                            this.RTCDayOverFlow = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nGameBoyCore.prototype.prepareFrame = function () {\n    //Copy the internal frame buffer to the output buffer:\n    this.swizzleFrameBuffer();\n    this.drewFrame = true;\n}\nGameBoyCore.prototype.requestDraw = function () {\n    if (this.drewFrame) {\n        this.dispatchDraw();\n    }\n}\nGameBoyCore.prototype.dispatchDraw = function () {\n    if (this.offscreenRGBCount > 0) {\n        //We actually updated the graphics internally, so copy out:\n        if (this.offscreenRGBCount == 92160) {\n            this.processDraw(this.swizzledFrame);\n        }\n        else {\n            this.resizeFrameBuffer();\n        }\n    }\n}\n\n//ToDo: Remove this method, I don't think it's necessary.\n//Converts rgb canvas into rgba.\nGameBoyCore.prototype.processDraw = function (frameBuffer) {\n    var canvasRGBALength = this.offscreenRGBCount;\n    var canvasData = this.canvasBuffer.data;\n    var bufferIndex = 0;\n    for (var canvasIndex = 0; canvasIndex < canvasRGBALength; ++canvasIndex) {\n        canvasData[canvasIndex++] = frameBuffer[bufferIndex++];\n        canvasData[canvasIndex++] = frameBuffer[bufferIndex++];\n        canvasData[canvasIndex++] = frameBuffer[bufferIndex++];\n    }\n    this.graphicsBlit();\n    this.drewFrame = false;\n};\n\n//Which means I want to grab the swizzledFrame, not the normal frameBuffer(?)\n//ToDo: I believe (but am not sure) that I can remove this too.\nGameBoyCore.prototype.swizzleFrameBuffer = function () {\n    //Convert our dirty 24-bit (24-bit, with internal render flags above it) framebuffer to an 8-bit buffer with separate indices for the RGB channels:\n    var frameBuffer = this.frameBuffer;\n    var swizzledFrame = this.swizzledFrame;\n    var bufferIndex = 0;\n    for (var canvasIndex = 0; canvasIndex < 69120;) {\n        swizzledFrame[canvasIndex++] = (frameBuffer[bufferIndex] >> 16) & 0xFF;     //Red\n        swizzledFrame[canvasIndex++] = (frameBuffer[bufferIndex] >> 8) & 0xFF;      //Green\n        swizzledFrame[canvasIndex++] = frameBuffer[bufferIndex++] & 0xFF;           //Blue\n    }\n};\nGameBoyCore.prototype.clearFrameBuffer = function () {\n    var bufferIndex = 0;\n    var frameBuffer = this.swizzledFrame;\n    if (this.cGBC || this.colorizedGBPalettes) {\n        while (bufferIndex < 69120) {\n            frameBuffer[bufferIndex++] = 248;\n        }\n    }\n    else {\n        while (bufferIndex < 69120) {\n            frameBuffer[bufferIndex++] = 239;\n            frameBuffer[bufferIndex++] = 255;\n            frameBuffer[bufferIndex++] = 222;\n        }\n    }\n};\nGameBoyCore.prototype.resizeFrameBuffer = function () {\n    //Resize in javascript with resize.js:\n    if (this.resizePathClear) {\n        this.resizePathClear = false;\n        this.resizer.resize(this.swizzledFrame);\n    }\n};\nGameBoyCore.prototype.compileResizeFrameBufferFunction = function () {\n    if (this.offscreenRGBCount > 0) {\n        var parentObj = this;\n        this.resizer = new Resize(160, 144, this.offscreenWidth, this.offscreenHeight, false, settings[13], false, function (buffer) {\n            if ((buffer.length / 3 * 4) == parentObj.offscreenRGBCount) {\n                parentObj.processDraw(buffer);\n            }\n            parentObj.resizePathClear = true;\n        });\n    }\n};\nGameBoyCore.prototype.renderScanLine = function (scanlineToRender) {\n    this.pixelStart = scanlineToRender * 160;\n    if (this.bgEnabled) {\n        this.pixelEnd = 160;\n        this.BGLayerRender(scanlineToRender);\n        this.WindowLayerRender(scanlineToRender);\n    }\n    else {\n        var pixelLine = (scanlineToRender + 1) * 160;\n        var defaultColor = (this.cGBC || this.colorizedGBPalettes) ? 0xF8F8F8 : 0xEFFFDE;\n        for (var pixelPosition = (scanlineToRender * 160) + this.currentX; pixelPosition < pixelLine; pixelPosition++) {\n            this.frameBuffer[pixelPosition] = defaultColor;\n        }\n    }\n    this.SpriteLayerRender(scanlineToRender);\n    this.currentX = 0;\n    this.midScanlineOffset = -1;\n};\nGameBoyCore.prototype.renderMidScanLine = function () {\n    if (this.actualScanLine < 144 && this.modeSTAT == 3) {\n        //TODO: Get this accurate:\n        if (this.midScanlineOffset == -1) {\n            this.midScanlineOffset = this.backgroundX & 0x7;\n        }\n        if (this.LCDTicks >= 82) {\n            this.pixelEnd = this.LCDTicks - 74;\n            this.pixelEnd = Math.min(this.pixelEnd - this.midScanlineOffset - (this.pixelEnd % 0x8), 160);\n            if (this.bgEnabled) {\n                this.pixelStart = this.lastUnrenderedLine * 160;\n                this.BGLayerRender(this.lastUnrenderedLine);\n                this.WindowLayerRender(this.lastUnrenderedLine);\n                //TODO: Do midscanline JIT for sprites...\n            }\n            else {\n                var pixelLine = (this.lastUnrenderedLine * 160) + this.pixelEnd;\n                var defaultColor = (this.cGBC || this.colorizedGBPalettes) ? 0xF8F8F8 : 0xEFFFDE;\n                for (var pixelPosition = (this.lastUnrenderedLine * 160) + this.currentX; pixelPosition < pixelLine; pixelPosition++) {\n                    this.frameBuffer[pixelPosition] = defaultColor;\n                }\n            }\n            this.currentX = this.pixelEnd;\n        }\n    }\n};\nGameBoyCore.prototype.initializeModeSpecificArrays = function () {\n    this.LCDCONTROL = (this.LCDisOn) ? this.LINECONTROL : this.DISPLAYOFFCONTROL;\n    if (this.cGBC) {\n        this.gbcOBJRawPalette = this.getTypedArray(0x40, 0, \"uint8\");\n        this.gbcBGRawPalette = this.getTypedArray(0x40, 0, \"uint8\");\n        this.gbcOBJPalette = this.getTypedArray(0x20, 0x1000000, \"int32\");\n        this.gbcBGPalette = this.getTypedArray(0x40, 0, \"int32\");\n        this.BGCHRBank2 = this.getTypedArray(0x800, 0, \"uint8\");\n        this.BGCHRCurrentBank = (this.currVRAMBank > 0) ? this.BGCHRBank2 : this.BGCHRBank1;\n        this.tileCache = this.generateCacheArray(0xF80);\n    }\n    else {\n        this.gbOBJPalette = this.getTypedArray(8, 0, \"int32\");\n        this.gbBGPalette = this.getTypedArray(4, 0, \"int32\");\n        this.BGPalette = this.gbBGPalette;\n        this.OBJPalette = this.gbOBJPalette;\n        this.tileCache = this.generateCacheArray(0x700);\n        this.sortBuffer = this.getTypedArray(0x100, 0, \"uint8\");\n        this.OAMAddressCache = this.getTypedArray(10, 0, \"int32\");\n    }\n    this.renderPathBuild();\n};\nGameBoyCore.prototype.GBCtoGBModeAdjust = function () {\n    cout(\"Stepping down from GBC mode.\", 0);\n    this.VRAM = this.GBCMemory = this.BGCHRCurrentBank = this.BGCHRBank2 = null;\n    this.tileCache.length = 0x700;\n    if (settings[4]) {\n        this.gbBGColorizedPalette = this.getTypedArray(4, 0, \"int32\");\n        this.gbOBJColorizedPalette = this.getTypedArray(8, 0, \"int32\");\n        this.cachedBGPaletteConversion = this.getTypedArray(4, 0, \"int32\");\n        this.cachedOBJPaletteConversion = this.getTypedArray(8, 0, \"int32\");\n        this.BGPalette = this.gbBGColorizedPalette;\n        this.OBJPalette = this.gbOBJColorizedPalette;\n        this.gbOBJPalette = this.gbBGPalette = null;\n        this.getGBCColor();\n    }\n    else {\n        this.gbOBJPalette = this.getTypedArray(8, 0, \"int32\");\n        this.gbBGPalette = this.getTypedArray(4, 0, \"int32\");\n        this.BGPalette = this.gbBGPalette;\n        this.OBJPalette = this.gbOBJPalette;\n    }\n    this.sortBuffer = this.getTypedArray(0x100, 0, \"uint8\");\n    this.OAMAddressCache = this.getTypedArray(10, 0, \"int32\");\n    this.renderPathBuild();\n    this.memoryReadJumpCompile();\n    this.memoryWriteJumpCompile();\n};\nGameBoyCore.prototype.renderPathBuild = function () {\n    if (!this.cGBC) {\n        this.BGLayerRender = this.BGGBLayerRender;\n        this.WindowLayerRender = this.WindowGBLayerRender;\n        this.SpriteLayerRender = this.SpriteGBLayerRender;\n    }\n    else {\n        this.priorityFlaggingPathRebuild();\n        this.SpriteLayerRender = this.SpriteGBCLayerRender;\n    }\n};\nGameBoyCore.prototype.priorityFlaggingPathRebuild = function () {\n    if (this.BGPriorityEnabled) {\n        this.BGLayerRender = this.BGGBCLayerRender;\n        this.WindowLayerRender = this.WindowGBCLayerRender;\n    }\n    else {\n        this.BGLayerRender = this.BGGBCLayerRenderNoPriorityFlagging;\n        this.WindowLayerRender = this.WindowGBCLayerRenderNoPriorityFlagging;\n    }\n};\nGameBoyCore.prototype.initializeReferencesFromSaveState = function () {\n    this.LCDCONTROL = (this.LCDisOn) ? this.LINECONTROL : this.DISPLAYOFFCONTROL;\n    var tileIndex = 0;\n    if (!this.cGBC) {\n        if (this.colorizedGBPalettes) {\n            this.BGPalette = this.gbBGColorizedPalette;\n            this.OBJPalette = this.gbOBJColorizedPalette;\n            this.updateGBBGPalette = this.updateGBColorizedBGPalette;\n            this.updateGBOBJPalette = this.updateGBColorizedOBJPalette;\n\n        }\n        else {\n            this.BGPalette = this.gbBGPalette;\n            this.OBJPalette = this.gbOBJPalette;\n        }\n        this.tileCache = this.generateCacheArray(0x700);\n        for (tileIndex = 0x8000; tileIndex < 0x9000; tileIndex += 2) {\n            this.generateGBOAMTileLine(tileIndex);\n        }\n        for (tileIndex = 0x9000; tileIndex < 0x9800; tileIndex += 2) {\n            this.generateGBTileLine(tileIndex);\n        }\n        this.sortBuffer = this.getTypedArray(0x100, 0, \"uint8\");\n        this.OAMAddressCache = this.getTypedArray(10, 0, \"int32\");\n    }\n    else {\n        this.BGCHRCurrentBank = (this.currVRAMBank > 0) ? this.BGCHRBank2 : this.BGCHRBank1;\n        this.tileCache = this.generateCacheArray(0xF80);\n        for (; tileIndex < 0x1800; tileIndex += 0x10) {\n            this.generateGBCTileBank1(tileIndex);\n            this.generateGBCTileBank2(tileIndex);\n        }\n    }\n    this.renderPathBuild();\n}\nGameBoyCore.prototype.RGBTint = function (value) {\n    //Adjustment for the GBC's tinting (According to Gambatte):\n    var r = value & 0x1F;\n    var g = (value >> 5) & 0x1F;\n    var b = (value >> 10) & 0x1F;\n    return ((r * 13 + g * 2 + b) >> 1) << 16 | (g * 3 + b) << 9 | (r * 3 + g * 2 + b * 11) >> 1;\n}\nGameBoyCore.prototype.getGBCColor = function () {\n    //GBC Colorization of DMG ROMs:\n    //BG\n    for (var counter = 0; counter < 4; counter++) {\n        var adjustedIndex = counter << 1;\n        //BG\n        this.cachedBGPaletteConversion[counter] = this.RGBTint((this.gbcBGRawPalette[adjustedIndex | 1] << 8) | this.gbcBGRawPalette[adjustedIndex]);\n        //OBJ 1\n        this.cachedOBJPaletteConversion[counter] = this.RGBTint((this.gbcOBJRawPalette[adjustedIndex | 1] << 8) | this.gbcOBJRawPalette[adjustedIndex]);\n    }\n    //OBJ 2\n    for (counter = 4; counter < 8; counter++) {\n        adjustedIndex = counter << 1;\n        this.cachedOBJPaletteConversion[counter] = this.RGBTint((this.gbcOBJRawPalette[adjustedIndex | 1] << 8) | this.gbcOBJRawPalette[adjustedIndex]);\n    }\n    //Update the palette entries:\n    this.updateGBBGPalette = this.updateGBColorizedBGPalette;\n    this.updateGBOBJPalette = this.updateGBColorizedOBJPalette;\n    this.updateGBBGPalette(this.memory[0xFF47]);\n    this.updateGBOBJPalette(0, this.memory[0xFF48]);\n    this.updateGBOBJPalette(1, this.memory[0xFF49]);\n    this.colorizedGBPalettes = true;\n}\nGameBoyCore.prototype.updateGBRegularBGPalette = function (data) {\n    this.gbBGPalette[0] = this.colors[data & 0x03] | 0x2000000;\n    this.gbBGPalette[1] = this.colors[(data >> 2) & 0x03];\n    this.gbBGPalette[2] = this.colors[(data >> 4) & 0x03];\n    this.gbBGPalette[3] = this.colors[data >> 6];\n}\nGameBoyCore.prototype.updateGBColorizedBGPalette = function (data) {\n    //GB colorization:\n    this.gbBGColorizedPalette[0] = this.cachedBGPaletteConversion[data & 0x03] | 0x2000000;\n    this.gbBGColorizedPalette[1] = this.cachedBGPaletteConversion[(data >> 2) & 0x03];\n    this.gbBGColorizedPalette[2] = this.cachedBGPaletteConversion[(data >> 4) & 0x03];\n    this.gbBGColorizedPalette[3] = this.cachedBGPaletteConversion[data >> 6];\n}\nGameBoyCore.prototype.updateGBRegularOBJPalette = function (index, data) {\n    this.gbOBJPalette[index | 1] = this.colors[(data >> 2) & 0x03];\n    this.gbOBJPalette[index | 2] = this.colors[(data >> 4) & 0x03];\n    this.gbOBJPalette[index | 3] = this.colors[data >> 6];\n}\nGameBoyCore.prototype.updateGBColorizedOBJPalette = function (index, data) {\n    //GB colorization:\n    this.gbOBJColorizedPalette[index | 1] = this.cachedOBJPaletteConversion[index | ((data >> 2) & 0x03)];\n    this.gbOBJColorizedPalette[index | 2] = this.cachedOBJPaletteConversion[index | ((data >> 4) & 0x03)];\n    this.gbOBJColorizedPalette[index | 3] = this.cachedOBJPaletteConversion[index | (data >> 6)];\n}\nGameBoyCore.prototype.updateGBCBGPalette = function (index, data) {\n    if (this.gbcBGRawPalette[index] != data) {\n        this.midScanLineJIT();\n        //Update the color palette for BG tiles since it changed:\n        this.gbcBGRawPalette[index] = data;\n        if ((index & 0x06) == 0) {\n            //Palette 0 (Special tile Priority stuff)\n            data = 0x2000000 | this.RGBTint((this.gbcBGRawPalette[index | 1] << 8) | this.gbcBGRawPalette[index & 0x3E]);\n            index >>= 1;\n            this.gbcBGPalette[index] = data;\n            this.gbcBGPalette[0x20 | index] = 0x1000000 | data;\n        }\n        else {\n            //Regular Palettes (No special crap)\n            data = this.RGBTint((this.gbcBGRawPalette[index | 1] << 8) | this.gbcBGRawPalette[index & 0x3E]);\n            index >>= 1;\n            this.gbcBGPalette[index] = data;\n            this.gbcBGPalette[0x20 | index] = 0x1000000 | data;\n        }\n    }\n}\nGameBoyCore.prototype.updateGBCOBJPalette = function (index, data) {\n    if (this.gbcOBJRawPalette[index] != data) {\n        //Update the color palette for OBJ tiles since it changed:\n        this.gbcOBJRawPalette[index] = data;\n        if ((index & 0x06) > 0) {\n            //Regular Palettes (No special crap)\n            this.midScanLineJIT();\n            this.gbcOBJPalette[index >> 1] = 0x1000000 | this.RGBTint((this.gbcOBJRawPalette[index | 1] << 8) | this.gbcOBJRawPalette[index & 0x3E]);\n        }\n    }\n}\nGameBoyCore.prototype.BGGBLayerRender = function (scanlineToRender) {\n    var scrollYAdjusted = (this.backgroundY + scanlineToRender) & 0xFF;                     //The line of the BG we're at.\n    var tileYLine = (scrollYAdjusted & 7) << 3;\n    var tileYDown = this.gfxBackgroundCHRBankPosition | ((scrollYAdjusted & 0xF8) << 2);    //The row of cached tiles we're fetching from.\n    var scrollXAdjusted = (this.backgroundX + this.currentX) & 0xFF;                        //The scroll amount of the BG.\n    var pixelPosition = this.pixelStart + this.currentX;                                    //Current pixel we're working on.\n    var pixelPositionEnd = this.pixelStart + ((this.gfxWindowDisplay && (scanlineToRender - this.windowY) >= 0) ? Math.min(Math.max(this.windowX, 0) + this.currentX, this.pixelEnd) : this.pixelEnd);  //Make sure we do at most 160 pixels a scanline.\n    var tileNumber = tileYDown + (scrollXAdjusted >> 3);\n    var chrCode = this.BGCHRBank1[tileNumber];\n    if (chrCode < this.gfxBackgroundBankOffset) {\n        chrCode |= 0x100;\n    }\n    var tile = this.tileCache[chrCode];\n    for (var texel = (scrollXAdjusted & 0x7); texel < 8 && pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted) {\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[tileYLine | texel++]];\n    }\n    var scrollXAdjustedAligned = Math.min(pixelPositionEnd - pixelPosition, 0x100 - scrollXAdjusted) >> 3;\n    scrollXAdjusted += scrollXAdjustedAligned << 3;\n    scrollXAdjustedAligned += tileNumber;\n    while (tileNumber < scrollXAdjustedAligned) {\n        chrCode = this.BGCHRBank1[++tileNumber];\n        if (chrCode < this.gfxBackgroundBankOffset) {\n            chrCode |= 0x100;\n        }\n        tile = this.tileCache[chrCode];\n        texel = tileYLine;\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel]];\n    }\n    if (pixelPosition < pixelPositionEnd) {\n        if (scrollXAdjusted < 0x100) {\n            chrCode = this.BGCHRBank1[++tileNumber];\n            if (chrCode < this.gfxBackgroundBankOffset) {\n                chrCode |= 0x100;\n            }\n            tile = this.tileCache[chrCode];\n            for (texel = tileYLine - 1; pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted) {\n                this.frameBuffer[pixelPosition++] = this.BGPalette[tile[++texel]];\n            }\n        }\n        scrollXAdjustedAligned = ((pixelPositionEnd - pixelPosition) >> 3) + tileYDown;\n        while (tileYDown < scrollXAdjustedAligned) {\n            chrCode = this.BGCHRBank1[tileYDown++];\n            if (chrCode < this.gfxBackgroundBankOffset) {\n                chrCode |= 0x100;\n            }\n            tile = this.tileCache[chrCode];\n            texel = tileYLine;\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel]];\n        }\n        if (pixelPosition < pixelPositionEnd) {\n            chrCode = this.BGCHRBank1[tileYDown];\n            if (chrCode < this.gfxBackgroundBankOffset) {\n                chrCode |= 0x100;\n            }\n            tile = this.tileCache[chrCode];\n            switch (pixelPositionEnd - pixelPosition) {\n                case 7:\n                    this.frameBuffer[pixelPosition + 6] = this.BGPalette[tile[tileYLine | 6]];\n                case 6:\n                    this.frameBuffer[pixelPosition + 5] = this.BGPalette[tile[tileYLine | 5]];\n                case 5:\n                    this.frameBuffer[pixelPosition + 4] = this.BGPalette[tile[tileYLine | 4]];\n                case 4:\n                    this.frameBuffer[pixelPosition + 3] = this.BGPalette[tile[tileYLine | 3]];\n                case 3:\n                    this.frameBuffer[pixelPosition + 2] = this.BGPalette[tile[tileYLine | 2]];\n                case 2:\n                    this.frameBuffer[pixelPosition + 1] = this.BGPalette[tile[tileYLine | 1]];\n                case 1:\n                    this.frameBuffer[pixelPosition] = this.BGPalette[tile[tileYLine]];\n            }\n        }\n    }\n}\nGameBoyCore.prototype.BGGBCLayerRender = function (scanlineToRender) {\n    var scrollYAdjusted = (this.backgroundY + scanlineToRender) & 0xFF;                     //The line of the BG we're at.\n    var tileYLine = (scrollYAdjusted & 7) << 3;\n    var tileYDown = this.gfxBackgroundCHRBankPosition | ((scrollYAdjusted & 0xF8) << 2);    //The row of cached tiles we're fetching from.\n    var scrollXAdjusted = (this.backgroundX + this.currentX) & 0xFF;                        //The scroll amount of the BG.\n    var pixelPosition = this.pixelStart + this.currentX;                                    //Current pixel we're working on.\n    var pixelPositionEnd = this.pixelStart + ((this.gfxWindowDisplay && (scanlineToRender - this.windowY) >= 0) ? Math.min(Math.max(this.windowX, 0) + this.currentX, this.pixelEnd) : this.pixelEnd);  //Make sure we do at most 160 pixels a scanline.\n    var tileNumber = tileYDown + (scrollXAdjusted >> 3);\n    var chrCode = this.BGCHRBank1[tileNumber];\n    if (chrCode < this.gfxBackgroundBankOffset) {\n        chrCode |= 0x100;\n    }\n    var attrCode = this.BGCHRBank2[tileNumber];\n    var tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n    var palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);\n    for (var texel = (scrollXAdjusted & 0x7); texel < 8 && pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted) {\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[tileYLine | texel++]];\n    }\n    var scrollXAdjustedAligned = Math.min(pixelPositionEnd - pixelPosition, 0x100 - scrollXAdjusted) >> 3;\n    scrollXAdjusted += scrollXAdjustedAligned << 3;\n    scrollXAdjustedAligned += tileNumber;\n    while (tileNumber < scrollXAdjustedAligned) {\n        chrCode = this.BGCHRBank1[++tileNumber];\n        if (chrCode < this.gfxBackgroundBankOffset) {\n            chrCode |= 0x100;\n        }\n        attrCode = this.BGCHRBank2[tileNumber];\n        tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n        palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);\n        texel = tileYLine;\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];\n    }\n    if (pixelPosition < pixelPositionEnd) {\n        if (scrollXAdjusted < 0x100) {\n            chrCode = this.BGCHRBank1[++tileNumber];\n            if (chrCode < this.gfxBackgroundBankOffset) {\n                chrCode |= 0x100;\n            }\n            attrCode = this.BGCHRBank2[tileNumber];\n            tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n            palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);\n            for (texel = tileYLine - 1; pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted) {\n                this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[++texel]];\n            }\n        }\n        scrollXAdjustedAligned = ((pixelPositionEnd - pixelPosition) >> 3) + tileYDown;\n        while (tileYDown < scrollXAdjustedAligned) {\n            chrCode = this.BGCHRBank1[tileYDown];\n            if (chrCode < this.gfxBackgroundBankOffset) {\n                chrCode |= 0x100;\n            }\n            attrCode = this.BGCHRBank2[tileYDown++];\n            tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n            palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);\n            texel = tileYLine;\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];\n        }\n        if (pixelPosition < pixelPositionEnd) {\n            chrCode = this.BGCHRBank1[tileYDown];\n            if (chrCode < this.gfxBackgroundBankOffset) {\n                chrCode |= 0x100;\n            }\n            attrCode = this.BGCHRBank2[tileYDown];\n            tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n            palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);\n            switch (pixelPositionEnd - pixelPosition) {\n                case 7:\n                    this.frameBuffer[pixelPosition + 6] = this.gbcBGPalette[palette | tile[tileYLine | 6]];\n                case 6:\n                    this.frameBuffer[pixelPosition + 5] = this.gbcBGPalette[palette | tile[tileYLine | 5]];\n                case 5:\n                    this.frameBuffer[pixelPosition + 4] = this.gbcBGPalette[palette | tile[tileYLine | 4]];\n                case 4:\n                    this.frameBuffer[pixelPosition + 3] = this.gbcBGPalette[palette | tile[tileYLine | 3]];\n                case 3:\n                    this.frameBuffer[pixelPosition + 2] = this.gbcBGPalette[palette | tile[tileYLine | 2]];\n                case 2:\n                    this.frameBuffer[pixelPosition + 1] = this.gbcBGPalette[palette | tile[tileYLine | 1]];\n                case 1:\n                    this.frameBuffer[pixelPosition] = this.gbcBGPalette[palette | tile[tileYLine]];\n            }\n        }\n    }\n}\nGameBoyCore.prototype.BGGBCLayerRenderNoPriorityFlagging = function (scanlineToRender) {\n    var scrollYAdjusted = (this.backgroundY + scanlineToRender) & 0xFF;                     //The line of the BG we're at.\n    var tileYLine = (scrollYAdjusted & 7) << 3;\n    var tileYDown = this.gfxBackgroundCHRBankPosition | ((scrollYAdjusted & 0xF8) << 2);    //The row of cached tiles we're fetching from.\n    var scrollXAdjusted = (this.backgroundX + this.currentX) & 0xFF;                        //The scroll amount of the BG.\n    var pixelPosition = this.pixelStart + this.currentX;                                    //Current pixel we're working on.\n    var pixelPositionEnd = this.pixelStart + ((this.gfxWindowDisplay && (scanlineToRender - this.windowY) >= 0) ? Math.min(Math.max(this.windowX, 0) + this.currentX, this.pixelEnd) : this.pixelEnd);  //Make sure we do at most 160 pixels a scanline.\n    var tileNumber = tileYDown + (scrollXAdjusted >> 3);\n    var chrCode = this.BGCHRBank1[tileNumber];\n    if (chrCode < this.gfxBackgroundBankOffset) {\n        chrCode |= 0x100;\n    }\n    var attrCode = this.BGCHRBank2[tileNumber];\n    var tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n    var palette = (attrCode & 0x7) << 2;\n    for (var texel = (scrollXAdjusted & 0x7); texel < 8 && pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted) {\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[tileYLine | texel++]];\n    }\n    var scrollXAdjustedAligned = Math.min(pixelPositionEnd - pixelPosition, 0x100 - scrollXAdjusted) >> 3;\n    scrollXAdjusted += scrollXAdjustedAligned << 3;\n    scrollXAdjustedAligned += tileNumber;\n    while (tileNumber < scrollXAdjustedAligned) {\n        chrCode = this.BGCHRBank1[++tileNumber];\n        if (chrCode < this.gfxBackgroundBankOffset) {\n            chrCode |= 0x100;\n        }\n        attrCode = this.BGCHRBank2[tileNumber];\n        tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n        palette = (attrCode & 0x7) << 2;\n        texel = tileYLine;\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n        this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];\n    }\n    if (pixelPosition < pixelPositionEnd) {\n        if (scrollXAdjusted < 0x100) {\n            chrCode = this.BGCHRBank1[++tileNumber];\n            if (chrCode < this.gfxBackgroundBankOffset) {\n                chrCode |= 0x100;\n            }\n            attrCode = this.BGCHRBank2[tileNumber];\n            tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n            palette = (attrCode & 0x7) << 2;\n            for (texel = tileYLine - 1; pixelPosition < pixelPositionEnd && scrollXAdjusted < 0x100; ++scrollXAdjusted) {\n                this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[++texel]];\n            }\n        }\n        scrollXAdjustedAligned = ((pixelPositionEnd - pixelPosition) >> 3) + tileYDown;\n        while (tileYDown < scrollXAdjustedAligned) {\n            chrCode = this.BGCHRBank1[tileYDown];\n            if (chrCode < this.gfxBackgroundBankOffset) {\n                chrCode |= 0x100;\n            }\n            attrCode = this.BGCHRBank2[tileYDown++];\n            tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n            palette = (attrCode & 0x7) << 2;\n            texel = tileYLine;\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n            this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];\n        }\n        if (pixelPosition < pixelPositionEnd) {\n            chrCode = this.BGCHRBank1[tileYDown];\n            if (chrCode < this.gfxBackgroundBankOffset) {\n                chrCode |= 0x100;\n            }\n            attrCode = this.BGCHRBank2[tileYDown];\n            tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n            palette = (attrCode & 0x7) << 2;\n            switch (pixelPositionEnd - pixelPosition) {\n                case 7:\n                    this.frameBuffer[pixelPosition + 6] = this.gbcBGPalette[palette | tile[tileYLine | 6]];\n                case 6:\n                    this.frameBuffer[pixelPosition + 5] = this.gbcBGPalette[palette | tile[tileYLine | 5]];\n                case 5:\n                    this.frameBuffer[pixelPosition + 4] = this.gbcBGPalette[palette | tile[tileYLine | 4]];\n                case 4:\n                    this.frameBuffer[pixelPosition + 3] = this.gbcBGPalette[palette | tile[tileYLine | 3]];\n                case 3:\n                    this.frameBuffer[pixelPosition + 2] = this.gbcBGPalette[palette | tile[tileYLine | 2]];\n                case 2:\n                    this.frameBuffer[pixelPosition + 1] = this.gbcBGPalette[palette | tile[tileYLine | 1]];\n                case 1:\n                    this.frameBuffer[pixelPosition] = this.gbcBGPalette[palette | tile[tileYLine]];\n            }\n        }\n    }\n}\nGameBoyCore.prototype.WindowGBLayerRender = function (scanlineToRender) {\n    if (this.gfxWindowDisplay) {                                    //Is the window enabled?\n        var scrollYAdjusted = scanlineToRender - this.windowY;      //The line of the BG we're at.\n        if (scrollYAdjusted >= 0) {\n            var scrollXRangeAdjusted = (this.windowX > 0) ? (this.windowX + this.currentX) : this.currentX;\n            var pixelPosition = this.pixelStart + scrollXRangeAdjusted;\n            var pixelPositionEnd = this.pixelStart + this.pixelEnd;\n            if (pixelPosition < pixelPositionEnd) {\n                var tileYLine = (scrollYAdjusted & 0x7) << 3;\n                var tileNumber = (this.gfxWindowCHRBankPosition | ((scrollYAdjusted & 0xF8) << 2)) + (this.currentX >> 3);\n                var chrCode = this.BGCHRBank1[tileNumber];\n                if (chrCode < this.gfxBackgroundBankOffset) {\n                    chrCode |= 0x100;\n                }\n                var tile = this.tileCache[chrCode];\n                var texel = (scrollXRangeAdjusted - this.windowX) & 0x7;\n                scrollXRangeAdjusted = Math.min(8, texel + pixelPositionEnd - pixelPosition);\n                while (texel < scrollXRangeAdjusted) {\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[tileYLine | texel++]];\n                }\n                scrollXRangeAdjusted = tileNumber + ((pixelPositionEnd - pixelPosition) >> 3);\n                while (tileNumber < scrollXRangeAdjusted) {\n                    chrCode = this.BGCHRBank1[++tileNumber];\n                    if (chrCode < this.gfxBackgroundBankOffset) {\n                        chrCode |= 0x100;\n                    }\n                    tile = this.tileCache[chrCode];\n                    texel = tileYLine;\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.BGPalette[tile[texel]];\n                }\n                if (pixelPosition < pixelPositionEnd) {\n                    chrCode = this.BGCHRBank1[++tileNumber];\n                    if (chrCode < this.gfxBackgroundBankOffset) {\n                        chrCode |= 0x100;\n                    }\n                    tile = this.tileCache[chrCode];\n                    switch (pixelPositionEnd - pixelPosition) {\n                        case 7:\n                            this.frameBuffer[pixelPosition + 6] = this.BGPalette[tile[tileYLine | 6]];\n                        case 6:\n                            this.frameBuffer[pixelPosition + 5] = this.BGPalette[tile[tileYLine | 5]];\n                        case 5:\n                            this.frameBuffer[pixelPosition + 4] = this.BGPalette[tile[tileYLine | 4]];\n                        case 4:\n                            this.frameBuffer[pixelPosition + 3] = this.BGPalette[tile[tileYLine | 3]];\n                        case 3:\n                            this.frameBuffer[pixelPosition + 2] = this.BGPalette[tile[tileYLine | 2]];\n                        case 2:\n                            this.frameBuffer[pixelPosition + 1] = this.BGPalette[tile[tileYLine | 1]];\n                        case 1:\n                            this.frameBuffer[pixelPosition] = this.BGPalette[tile[tileYLine]];\n                    }\n                }\n            }\n        }\n    }\n}\nGameBoyCore.prototype.WindowGBCLayerRender = function (scanlineToRender) {\n    if (this.gfxWindowDisplay) {                                    //Is the window enabled?\n        var scrollYAdjusted = scanlineToRender - this.windowY;      //The line of the BG we're at.\n        if (scrollYAdjusted >= 0) {\n            var scrollXRangeAdjusted = (this.windowX > 0) ? (this.windowX + this.currentX) : this.currentX;\n            var pixelPosition = this.pixelStart + scrollXRangeAdjusted;\n            var pixelPositionEnd = this.pixelStart + this.pixelEnd;\n            if (pixelPosition < pixelPositionEnd) {\n                var tileYLine = (scrollYAdjusted & 0x7) << 3;\n                var tileNumber = (this.gfxWindowCHRBankPosition | ((scrollYAdjusted & 0xF8) << 2)) + (this.currentX >> 3);\n                var chrCode = this.BGCHRBank1[tileNumber];\n                if (chrCode < this.gfxBackgroundBankOffset) {\n                    chrCode |= 0x100;\n                }\n                var attrCode = this.BGCHRBank2[tileNumber];\n                var tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n                var palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);\n                var texel = (scrollXRangeAdjusted - this.windowX) & 0x7;\n                scrollXRangeAdjusted = Math.min(8, texel + pixelPositionEnd - pixelPosition);\n                while (texel < scrollXRangeAdjusted) {\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[tileYLine | texel++]];\n                }\n                scrollXRangeAdjusted = tileNumber + ((pixelPositionEnd - pixelPosition) >> 3);\n                while (tileNumber < scrollXRangeAdjusted) {\n                    chrCode = this.BGCHRBank1[++tileNumber];\n                    if (chrCode < this.gfxBackgroundBankOffset) {\n                        chrCode |= 0x100;\n                    }\n                    attrCode = this.BGCHRBank2[tileNumber];\n                    tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n                    palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);\n                    texel = tileYLine;\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];\n                }\n                if (pixelPosition < pixelPositionEnd) {\n                    chrCode = this.BGCHRBank1[++tileNumber];\n                    if (chrCode < this.gfxBackgroundBankOffset) {\n                        chrCode |= 0x100;\n                    }\n                    attrCode = this.BGCHRBank2[tileNumber];\n                    tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n                    palette = ((attrCode & 0x7) << 2) | ((attrCode & 0x80) >> 2);\n                    switch (pixelPositionEnd - pixelPosition) {\n                        case 7:\n                            this.frameBuffer[pixelPosition + 6] = this.gbcBGPalette[palette | tile[tileYLine | 6]];\n                        case 6:\n                            this.frameBuffer[pixelPosition + 5] = this.gbcBGPalette[palette | tile[tileYLine | 5]];\n                        case 5:\n                            this.frameBuffer[pixelPosition + 4] = this.gbcBGPalette[palette | tile[tileYLine | 4]];\n                        case 4:\n                            this.frameBuffer[pixelPosition + 3] = this.gbcBGPalette[palette | tile[tileYLine | 3]];\n                        case 3:\n                            this.frameBuffer[pixelPosition + 2] = this.gbcBGPalette[palette | tile[tileYLine | 2]];\n                        case 2:\n                            this.frameBuffer[pixelPosition + 1] = this.gbcBGPalette[palette | tile[tileYLine | 1]];\n                        case 1:\n                            this.frameBuffer[pixelPosition] = this.gbcBGPalette[palette | tile[tileYLine]];\n                    }\n                }\n            }\n        }\n    }\n}\nGameBoyCore.prototype.WindowGBCLayerRenderNoPriorityFlagging = function (scanlineToRender) {\n    if (this.gfxWindowDisplay) {                                    //Is the window enabled?\n        var scrollYAdjusted = scanlineToRender - this.windowY;      //The line of the BG we're at.\n        if (scrollYAdjusted >= 0) {\n            var scrollXRangeAdjusted = (this.windowX > 0) ? (this.windowX + this.currentX) : this.currentX;\n            var pixelPosition = this.pixelStart + scrollXRangeAdjusted;\n            var pixelPositionEnd = this.pixelStart + this.pixelEnd;\n            if (pixelPosition < pixelPositionEnd) {\n                var tileYLine = (scrollYAdjusted & 0x7) << 3;\n                var tileNumber = (this.gfxWindowCHRBankPosition | ((scrollYAdjusted & 0xF8) << 2)) + (this.currentX >> 3);\n                var chrCode = this.BGCHRBank1[tileNumber];\n                if (chrCode < this.gfxBackgroundBankOffset) {\n                    chrCode |= 0x100;\n                }\n                var attrCode = this.BGCHRBank2[tileNumber];\n                var tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n                var palette = (attrCode & 0x7) << 2;\n                var texel = (scrollXRangeAdjusted - this.windowX) & 0x7;\n                scrollXRangeAdjusted = Math.min(8, texel + pixelPositionEnd - pixelPosition);\n                while (texel < scrollXRangeAdjusted) {\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[tileYLine | texel++]];\n                }\n                scrollXRangeAdjusted = tileNumber + ((pixelPositionEnd - pixelPosition) >> 3);\n                while (tileNumber < scrollXRangeAdjusted) {\n                    chrCode = this.BGCHRBank1[++tileNumber];\n                    if (chrCode < this.gfxBackgroundBankOffset) {\n                        chrCode |= 0x100;\n                    }\n                    attrCode = this.BGCHRBank2[tileNumber];\n                    tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n                    palette = (attrCode & 0x7) << 2;\n                    texel = tileYLine;\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel++]];\n                    this.frameBuffer[pixelPosition++] = this.gbcBGPalette[palette | tile[texel]];\n                }\n                if (pixelPosition < pixelPositionEnd) {\n                    chrCode = this.BGCHRBank1[++tileNumber];\n                    if (chrCode < this.gfxBackgroundBankOffset) {\n                        chrCode |= 0x100;\n                    }\n                    attrCode = this.BGCHRBank2[tileNumber];\n                    tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | chrCode];\n                    palette = (attrCode & 0x7) << 2;\n                    switch (pixelPositionEnd - pixelPosition) {\n                        case 7:\n                            this.frameBuffer[pixelPosition + 6] = this.gbcBGPalette[palette | tile[tileYLine | 6]];\n                        case 6:\n                            this.frameBuffer[pixelPosition + 5] = this.gbcBGPalette[palette | tile[tileYLine | 5]];\n                        case 5:\n                            this.frameBuffer[pixelPosition + 4] = this.gbcBGPalette[palette | tile[tileYLine | 4]];\n                        case 4:\n                            this.frameBuffer[pixelPosition + 3] = this.gbcBGPalette[palette | tile[tileYLine | 3]];\n                        case 3:\n                            this.frameBuffer[pixelPosition + 2] = this.gbcBGPalette[palette | tile[tileYLine | 2]];\n                        case 2:\n                            this.frameBuffer[pixelPosition + 1] = this.gbcBGPalette[palette | tile[tileYLine | 1]];\n                        case 1:\n                            this.frameBuffer[pixelPosition] = this.gbcBGPalette[palette | tile[tileYLine]];\n                    }\n                }\n            }\n        }\n    }\n}\nGameBoyCore.prototype.SpriteGBLayerRender = function (scanlineToRender) {\n    if (this.gfxSpriteShow) {                                       //Are sprites enabled?\n        var lineAdjusted = scanlineToRender + 0x10;\n        var OAMAddress = 0xFE00;\n        var yoffset = 0;\n        var xcoord = 1;\n        var xCoordStart = 0;\n        var xCoordEnd = 0;\n        var attrCode = 0;\n        var palette = 0;\n        var tile = null;\n        var data = 0;\n        var spriteCount = 0;\n        var length = 0;\n        var currentPixel = 0;\n        var linePixel = 0;\n        //Clear our x-coord sort buffer:\n        while (xcoord < 168) {\n            this.sortBuffer[xcoord++] = 0xFF;\n        }\n        if (this.gfxSpriteNormalHeight) {\n            //Draw the visible sprites:\n            for (var length = this.findLowestSpriteDrawable(lineAdjusted, 0x7); spriteCount < length; ++spriteCount) {\n                OAMAddress = this.OAMAddressCache[spriteCount];\n                yoffset = (lineAdjusted - this.memory[OAMAddress]) << 3;\n                attrCode = this.memory[OAMAddress | 3];\n                palette = (attrCode & 0x10) >> 2;\n                tile = this.tileCache[((attrCode & 0x60) << 4) | this.memory[OAMAddress | 0x2]];\n                linePixel = xCoordStart = this.memory[OAMAddress | 1];\n                xCoordEnd = Math.min(168 - linePixel, 8);\n                xcoord = (linePixel > 7) ? 0 : (8 - linePixel);\n                for (currentPixel = this.pixelStart + ((linePixel > 8) ? (linePixel - 8) : 0); xcoord < xCoordEnd; ++xcoord, ++currentPixel, ++linePixel) {\n                    if (this.sortBuffer[linePixel] > xCoordStart) {\n                        if (this.frameBuffer[currentPixel] >= 0x2000000) {\n                            data = tile[yoffset | xcoord];\n                            if (data > 0) {\n                                this.frameBuffer[currentPixel] = this.OBJPalette[palette | data];\n                                this.sortBuffer[linePixel] = xCoordStart;\n                            }\n                        }\n                        else if (this.frameBuffer[currentPixel] < 0x1000000) {\n                            data = tile[yoffset | xcoord];\n                            if (data > 0 && attrCode < 0x80) {\n                                this.frameBuffer[currentPixel] = this.OBJPalette[palette | data];\n                                this.sortBuffer[linePixel] = xCoordStart;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            //Draw the visible sprites:\n            for (var length = this.findLowestSpriteDrawable(lineAdjusted, 0xF); spriteCount < length; ++spriteCount) {\n                OAMAddress = this.OAMAddressCache[spriteCount];\n                yoffset = (lineAdjusted - this.memory[OAMAddress]) << 3;\n                attrCode = this.memory[OAMAddress | 3];\n                palette = (attrCode & 0x10) >> 2;\n                if ((attrCode & 0x40) == (0x40 & yoffset)) {\n                    tile = this.tileCache[((attrCode & 0x60) << 4) | (this.memory[OAMAddress | 0x2] & 0xFE)];\n                }\n                else {\n                    tile = this.tileCache[((attrCode & 0x60) << 4) | this.memory[OAMAddress | 0x2] | 1];\n                }\n                yoffset &= 0x3F;\n                linePixel = xCoordStart = this.memory[OAMAddress | 1];\n                xCoordEnd = Math.min(168 - linePixel, 8);\n                xcoord = (linePixel > 7) ? 0 : (8 - linePixel);\n                for (currentPixel = this.pixelStart + ((linePixel > 8) ? (linePixel - 8) : 0); xcoord < xCoordEnd; ++xcoord, ++currentPixel, ++linePixel) {\n                    if (this.sortBuffer[linePixel] > xCoordStart) {\n                        if (this.frameBuffer[currentPixel] >= 0x2000000) {\n                            data = tile[yoffset | xcoord];\n                            if (data > 0) {\n                                this.frameBuffer[currentPixel] = this.OBJPalette[palette | data];\n                                this.sortBuffer[linePixel] = xCoordStart;\n                            }\n                        }\n                        else if (this.frameBuffer[currentPixel] < 0x1000000) {\n                            data = tile[yoffset | xcoord];\n                            if (data > 0 && attrCode < 0x80) {\n                                this.frameBuffer[currentPixel] = this.OBJPalette[palette | data];\n                                this.sortBuffer[linePixel] = xCoordStart;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nGameBoyCore.prototype.findLowestSpriteDrawable = function (scanlineToRender, drawableRange) {\n    var address = 0xFE00;\n    var spriteCount = 0;\n    var diff = 0;\n    while (address < 0xFEA0 && spriteCount < 10) {\n        diff = scanlineToRender - this.memory[address];\n        if ((diff & drawableRange) == diff) {\n            this.OAMAddressCache[spriteCount++] = address;\n        }\n        address += 4;\n    }\n    return spriteCount;\n}\nGameBoyCore.prototype.SpriteGBCLayerRender = function (scanlineToRender) {\n    if (this.gfxSpriteShow) {                                       //Are sprites enabled?\n        var OAMAddress = 0xFE00;\n        var lineAdjusted = scanlineToRender + 0x10;\n        var yoffset = 0;\n        var xcoord = 0;\n        var endX = 0;\n        var xCounter = 0;\n        var attrCode = 0;\n        var palette = 0;\n        var tile = null;\n        var data = 0;\n        var currentPixel = 0;\n        var spriteCount = 0;\n        if (this.gfxSpriteNormalHeight) {\n            for (; OAMAddress < 0xFEA0 && spriteCount < 10; OAMAddress += 4) {\n                yoffset = lineAdjusted - this.memory[OAMAddress];\n                if ((yoffset & 0x7) == yoffset) {\n                    xcoord = this.memory[OAMAddress | 1] - 8;\n                    endX = Math.min(160, xcoord + 8);\n                    attrCode = this.memory[OAMAddress | 3];\n                    palette = (attrCode & 7) << 2;\n                    tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | this.memory[OAMAddress | 2]];\n                    xCounter = (xcoord > 0) ? xcoord : 0;\n                    xcoord -= yoffset << 3;\n                    for (currentPixel = this.pixelStart + xCounter; xCounter < endX; ++xCounter, ++currentPixel) {\n                        if (this.frameBuffer[currentPixel] >= 0x2000000) {\n                            data = tile[xCounter - xcoord];\n                            if (data > 0) {\n                                this.frameBuffer[currentPixel] = this.gbcOBJPalette[palette | data];\n                            }\n                        }\n                        else if (this.frameBuffer[currentPixel] < 0x1000000) {\n                            data = tile[xCounter - xcoord];\n                            if (data > 0 && attrCode < 0x80) {      //Don't optimize for attrCode, as LICM-capable JITs should optimize its checks.\n                                this.frameBuffer[currentPixel] = this.gbcOBJPalette[palette | data];\n                            }\n                        }\n                    }\n                    ++spriteCount;\n                }\n            }\n        }\n        else {\n            for (; OAMAddress < 0xFEA0 && spriteCount < 10; OAMAddress += 4) {\n                yoffset = lineAdjusted - this.memory[OAMAddress];\n                if ((yoffset & 0xF) == yoffset) {\n                    xcoord = this.memory[OAMAddress | 1] - 8;\n                    endX = Math.min(160, xcoord + 8);\n                    attrCode = this.memory[OAMAddress | 3];\n                    palette = (attrCode & 7) << 2;\n                    if ((attrCode & 0x40) == (0x40 & (yoffset << 3))) {\n                        tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | (this.memory[OAMAddress | 0x2] & 0xFE)];\n                    }\n                    else {\n                        tile = this.tileCache[((attrCode & 0x08) << 8) | ((attrCode & 0x60) << 4) | this.memory[OAMAddress | 0x2] | 1];\n                    }\n                    xCounter = (xcoord > 0) ? xcoord : 0;\n                    xcoord -= (yoffset & 0x7) << 3;\n                    for (currentPixel = this.pixelStart + xCounter; xCounter < endX; ++xCounter, ++currentPixel) {\n                        if (this.frameBuffer[currentPixel] >= 0x2000000) {\n                            data = tile[xCounter - xcoord];\n                            if (data > 0) {\n                                this.frameBuffer[currentPixel] = this.gbcOBJPalette[palette | data];\n                            }\n                        }\n                        else if (this.frameBuffer[currentPixel] < 0x1000000) {\n                            data = tile[xCounter - xcoord];\n                            if (data > 0 && attrCode < 0x80) {      //Don't optimize for attrCode, as LICM-capable JITs should optimize its checks.\n                                this.frameBuffer[currentPixel] = this.gbcOBJPalette[palette | data];\n                            }\n                        }\n                    }\n                    ++spriteCount;\n                }\n            }\n        }\n    }\n}\n//Generate only a single tile line for the GB tile cache mode:\nGameBoyCore.prototype.generateGBTileLine = function (address) {\n    var lineCopy = (this.memory[0x1 | address] << 8) | this.memory[0x9FFE & address];\n    var tileBlock = this.tileCache[(address & 0x1FF0) >> 4];\n    address = (address & 0xE) << 2;\n    tileBlock[address | 7] = ((lineCopy & 0x100) >> 7) | (lineCopy & 0x1);\n    tileBlock[address | 6] = ((lineCopy & 0x200) >> 8) | ((lineCopy & 0x2) >> 1);\n    tileBlock[address | 5] = ((lineCopy & 0x400) >> 9) | ((lineCopy & 0x4) >> 2);\n    tileBlock[address | 4] = ((lineCopy & 0x800) >> 10) | ((lineCopy & 0x8) >> 3);\n    tileBlock[address | 3] = ((lineCopy & 0x1000) >> 11) | ((lineCopy & 0x10) >> 4);\n    tileBlock[address | 2] = ((lineCopy & 0x2000) >> 12) | ((lineCopy & 0x20) >> 5);\n    tileBlock[address | 1] = ((lineCopy & 0x4000) >> 13) | ((lineCopy & 0x40) >> 6);\n    tileBlock[address] = ((lineCopy & 0x8000) >> 14) | ((lineCopy & 0x80) >> 7);\n}\n//Generate only a single tile line for the GBC tile cache mode (Bank 1):\nGameBoyCore.prototype.generateGBCTileLineBank1 = function (address) {\n    var lineCopy = (this.memory[0x1 | address] << 8) | this.memory[0x9FFE & address];\n    address &= 0x1FFE;\n    var tileBlock1 = this.tileCache[address >> 4];\n    var tileBlock2 = this.tileCache[0x200 | (address >> 4)];\n    var tileBlock3 = this.tileCache[0x400 | (address >> 4)];\n    var tileBlock4 = this.tileCache[0x600 | (address >> 4)];\n    address = (address & 0xE) << 2;\n    var addressFlipped = 0x38 - address;\n    tileBlock4[addressFlipped] = tileBlock2[address] = tileBlock3[addressFlipped | 7] = tileBlock1[address | 7] = ((lineCopy & 0x100) >> 7) | (lineCopy & 0x1);\n    tileBlock4[addressFlipped | 1] = tileBlock2[address | 1] = tileBlock3[addressFlipped | 6] = tileBlock1[address | 6] = ((lineCopy & 0x200) >> 8) | ((lineCopy & 0x2) >> 1);\n    tileBlock4[addressFlipped | 2] = tileBlock2[address | 2] = tileBlock3[addressFlipped | 5] = tileBlock1[address | 5] = ((lineCopy & 0x400) >> 9) | ((lineCopy & 0x4) >> 2);\n    tileBlock4[addressFlipped | 3] = tileBlock2[address | 3] = tileBlock3[addressFlipped | 4] = tileBlock1[address | 4] = ((lineCopy & 0x800) >> 10) | ((lineCopy & 0x8) >> 3);\n    tileBlock4[addressFlipped | 4] = tileBlock2[address | 4] = tileBlock3[addressFlipped | 3] = tileBlock1[address | 3] = ((lineCopy & 0x1000) >> 11) | ((lineCopy & 0x10) >> 4);\n    tileBlock4[addressFlipped | 5] = tileBlock2[address | 5] = tileBlock3[addressFlipped | 2] = tileBlock1[address | 2] = ((lineCopy & 0x2000) >> 12) | ((lineCopy & 0x20) >> 5);\n    tileBlock4[addressFlipped | 6] = tileBlock2[address | 6] = tileBlock3[addressFlipped | 1] = tileBlock1[address | 1] = ((lineCopy & 0x4000) >> 13) | ((lineCopy & 0x40) >> 6);\n    tileBlock4[addressFlipped | 7] = tileBlock2[address | 7] = tileBlock3[addressFlipped] = tileBlock1[address] = ((lineCopy & 0x8000) >> 14) | ((lineCopy & 0x80) >> 7);\n}\n//Generate all the flip combinations for a full GBC VRAM bank 1 tile:\nGameBoyCore.prototype.generateGBCTileBank1 = function (vramAddress) {\n    var address = vramAddress >> 4;\n    var tileBlock1 = this.tileCache[address];\n    var tileBlock2 = this.tileCache[0x200 | address];\n    var tileBlock3 = this.tileCache[0x400 | address];\n    var tileBlock4 = this.tileCache[0x600 | address];\n    var lineCopy = 0;\n    vramAddress |= 0x8000;\n    address = 0;\n    var addressFlipped = 56;\n    do {\n        lineCopy = (this.memory[0x1 | vramAddress] << 8) | this.memory[vramAddress];\n        tileBlock4[addressFlipped] = tileBlock2[address] = tileBlock3[addressFlipped | 7] = tileBlock1[address | 7] = ((lineCopy & 0x100) >> 7) | (lineCopy & 0x1);\n        tileBlock4[addressFlipped | 1] = tileBlock2[address | 1] = tileBlock3[addressFlipped | 6] = tileBlock1[address | 6] = ((lineCopy & 0x200) >> 8) | ((lineCopy & 0x2) >> 1);\n        tileBlock4[addressFlipped | 2] = tileBlock2[address | 2] = tileBlock3[addressFlipped | 5] = tileBlock1[address | 5] = ((lineCopy & 0x400) >> 9) | ((lineCopy & 0x4) >> 2);\n        tileBlock4[addressFlipped | 3] = tileBlock2[address | 3] = tileBlock3[addressFlipped | 4] = tileBlock1[address | 4] = ((lineCopy & 0x800) >> 10) | ((lineCopy & 0x8) >> 3);\n        tileBlock4[addressFlipped | 4] = tileBlock2[address | 4] = tileBlock3[addressFlipped | 3] = tileBlock1[address | 3] = ((lineCopy & 0x1000) >> 11) | ((lineCopy & 0x10) >> 4);\n        tileBlock4[addressFlipped | 5] = tileBlock2[address | 5] = tileBlock3[addressFlipped | 2] = tileBlock1[address | 2] = ((lineCopy & 0x2000) >> 12) | ((lineCopy & 0x20) >> 5);\n        tileBlock4[addressFlipped | 6] = tileBlock2[address | 6] = tileBlock3[addressFlipped | 1] = tileBlock1[address | 1] = ((lineCopy & 0x4000) >> 13) | ((lineCopy & 0x40) >> 6);\n        tileBlock4[addressFlipped | 7] = tileBlock2[address | 7] = tileBlock3[addressFlipped] = tileBlock1[address] = ((lineCopy & 0x8000) >> 14) | ((lineCopy & 0x80) >> 7);\n        address += 8;\n        addressFlipped -= 8;\n        vramAddress += 2;\n    } while (addressFlipped > -1);\n}\n//Generate only a single tile line for the GBC tile cache mode (Bank 2):\nGameBoyCore.prototype.generateGBCTileLineBank2 = function (address) {\n    var lineCopy = (this.VRAM[0x1 | address] << 8) | this.VRAM[0x1FFE & address];\n    var tileBlock1 = this.tileCache[0x800 | (address >> 4)];\n    var tileBlock2 = this.tileCache[0xA00 | (address >> 4)];\n    var tileBlock3 = this.tileCache[0xC00 | (address >> 4)];\n    var tileBlock4 = this.tileCache[0xE00 | (address >> 4)];\n    address = (address & 0xE) << 2;\n    var addressFlipped = 0x38 - address;\n    tileBlock4[addressFlipped] = tileBlock2[address] = tileBlock3[addressFlipped | 7] = tileBlock1[address | 7] = ((lineCopy & 0x100) >> 7) | (lineCopy & 0x1);\n    tileBlock4[addressFlipped | 1] = tileBlock2[address | 1] = tileBlock3[addressFlipped | 6] = tileBlock1[address | 6] = ((lineCopy & 0x200) >> 8) | ((lineCopy & 0x2) >> 1);\n    tileBlock4[addressFlipped | 2] = tileBlock2[address | 2] = tileBlock3[addressFlipped | 5] = tileBlock1[address | 5] = ((lineCopy & 0x400) >> 9) | ((lineCopy & 0x4) >> 2);\n    tileBlock4[addressFlipped | 3] = tileBlock2[address | 3] = tileBlock3[addressFlipped | 4] = tileBlock1[address | 4] = ((lineCopy & 0x800) >> 10) | ((lineCopy & 0x8) >> 3);\n    tileBlock4[addressFlipped | 4] = tileBlock2[address | 4] = tileBlock3[addressFlipped | 3] = tileBlock1[address | 3] = ((lineCopy & 0x1000) >> 11) | ((lineCopy & 0x10) >> 4);\n    tileBlock4[addressFlipped | 5] = tileBlock2[address | 5] = tileBlock3[addressFlipped | 2] = tileBlock1[address | 2] = ((lineCopy & 0x2000) >> 12) | ((lineCopy & 0x20) >> 5);\n    tileBlock4[addressFlipped | 6] = tileBlock2[address | 6] = tileBlock3[addressFlipped | 1] = tileBlock1[address | 1] = ((lineCopy & 0x4000) >> 13) | ((lineCopy & 0x40) >> 6);\n    tileBlock4[addressFlipped | 7] = tileBlock2[address | 7] = tileBlock3[addressFlipped] = tileBlock1[address] = ((lineCopy & 0x8000) >> 14) | ((lineCopy & 0x80) >> 7);\n}\n//Generate all the flip combinations for a full GBC VRAM bank 2 tile:\nGameBoyCore.prototype.generateGBCTileBank2 = function (vramAddress) {\n    var address = vramAddress >> 4;\n    var tileBlock1 = this.tileCache[0x800 | address];\n    var tileBlock2 = this.tileCache[0xA00 | address];\n    var tileBlock3 = this.tileCache[0xC00 | address];\n    var tileBlock4 = this.tileCache[0xE00 | address];\n    var lineCopy = 0;\n    address = 0;\n    var addressFlipped = 56;\n    do {\n        lineCopy = (this.VRAM[0x1 | vramAddress] << 8) | this.VRAM[vramAddress];\n        tileBlock4[addressFlipped] = tileBlock2[address] = tileBlock3[addressFlipped | 7] = tileBlock1[address | 7] = ((lineCopy & 0x100) >> 7) | (lineCopy & 0x1);\n        tileBlock4[addressFlipped | 1] = tileBlock2[address | 1] = tileBlock3[addressFlipped | 6] = tileBlock1[address | 6] = ((lineCopy & 0x200) >> 8) | ((lineCopy & 0x2) >> 1);\n        tileBlock4[addressFlipped | 2] = tileBlock2[address | 2] = tileBlock3[addressFlipped | 5] = tileBlock1[address | 5] = ((lineCopy & 0x400) >> 9) | ((lineCopy & 0x4) >> 2);\n        tileBlock4[addressFlipped | 3] = tileBlock2[address | 3] = tileBlock3[addressFlipped | 4] = tileBlock1[address | 4] = ((lineCopy & 0x800) >> 10) | ((lineCopy & 0x8) >> 3);\n        tileBlock4[addressFlipped | 4] = tileBlock2[address | 4] = tileBlock3[addressFlipped | 3] = tileBlock1[address | 3] = ((lineCopy & 0x1000) >> 11) | ((lineCopy & 0x10) >> 4);\n        tileBlock4[addressFlipped | 5] = tileBlock2[address | 5] = tileBlock3[addressFlipped | 2] = tileBlock1[address | 2] = ((lineCopy & 0x2000) >> 12) | ((lineCopy & 0x20) >> 5);\n        tileBlock4[addressFlipped | 6] = tileBlock2[address | 6] = tileBlock3[addressFlipped | 1] = tileBlock1[address | 1] = ((lineCopy & 0x4000) >> 13) | ((lineCopy & 0x40) >> 6);\n        tileBlock4[addressFlipped | 7] = tileBlock2[address | 7] = tileBlock3[addressFlipped] = tileBlock1[address] = ((lineCopy & 0x8000) >> 14) | ((lineCopy & 0x80) >> 7);\n        address += 8;\n        addressFlipped -= 8;\n        vramAddress += 2;\n    } while (addressFlipped > -1);\n}\n//Generate only a single tile line for the GB tile cache mode (OAM accessible range):\nGameBoyCore.prototype.generateGBOAMTileLine = function (address) {\n    var lineCopy = (this.memory[0x1 | address] << 8) | this.memory[0x9FFE & address];\n    address &= 0x1FFE;\n    var tileBlock1 = this.tileCache[address >> 4];\n    var tileBlock2 = this.tileCache[0x200 | (address >> 4)];\n    var tileBlock3 = this.tileCache[0x400 | (address >> 4)];\n    var tileBlock4 = this.tileCache[0x600 | (address >> 4)];\n    address = (address & 0xE) << 2;\n    var addressFlipped = 0x38 - address;\n    tileBlock4[addressFlipped] = tileBlock2[address] = tileBlock3[addressFlipped | 7] = tileBlock1[address | 7] = ((lineCopy & 0x100) >> 7) | (lineCopy & 0x1);\n    tileBlock4[addressFlipped | 1] = tileBlock2[address | 1] = tileBlock3[addressFlipped | 6] = tileBlock1[address | 6] = ((lineCopy & 0x200) >> 8) | ((lineCopy & 0x2) >> 1);\n    tileBlock4[addressFlipped | 2] = tileBlock2[address | 2] = tileBlock3[addressFlipped | 5] = tileBlock1[address | 5] = ((lineCopy & 0x400) >> 9) | ((lineCopy & 0x4) >> 2);\n    tileBlock4[addressFlipped | 3] = tileBlock2[address | 3] = tileBlock3[addressFlipped | 4] = tileBlock1[address | 4] = ((lineCopy & 0x800) >> 10) | ((lineCopy & 0x8) >> 3);\n    tileBlock4[addressFlipped | 4] = tileBlock2[address | 4] = tileBlock3[addressFlipped | 3] = tileBlock1[address | 3] = ((lineCopy & 0x1000) >> 11) | ((lineCopy & 0x10) >> 4);\n    tileBlock4[addressFlipped | 5] = tileBlock2[address | 5] = tileBlock3[addressFlipped | 2] = tileBlock1[address | 2] = ((lineCopy & 0x2000) >> 12) | ((lineCopy & 0x20) >> 5);\n    tileBlock4[addressFlipped | 6] = tileBlock2[address | 6] = tileBlock3[addressFlipped | 1] = tileBlock1[address | 1] = ((lineCopy & 0x4000) >> 13) | ((lineCopy & 0x40) >> 6);\n    tileBlock4[addressFlipped | 7] = tileBlock2[address | 7] = tileBlock3[addressFlipped] = tileBlock1[address] = ((lineCopy & 0x8000) >> 14) | ((lineCopy & 0x80) >> 7);\n}\nGameBoyCore.prototype.graphicsJIT = function () {\n    if (this.LCDisOn) {\n        this.totalLinesPassed = 0;          //Mark frame for ensuring a JIT pass for the next framebuffer output.\n        this.graphicsJITScanlineGroup();\n    }\n}\nGameBoyCore.prototype.graphicsJITVBlank = function () {\n    //JIT the graphics to v-blank framing:\n    this.totalLinesPassed += this.queuedScanLines;\n    this.graphicsJITScanlineGroup();\n}\nGameBoyCore.prototype.graphicsJITScanlineGroup = function () {\n    //Normal rendering JIT, where we try to do groups of scanlines at once:\n    while (this.queuedScanLines > 0) {\n        this.renderScanLine(this.lastUnrenderedLine);\n        if (this.lastUnrenderedLine < 143) {\n            ++this.lastUnrenderedLine;\n        }\n        else {\n            this.lastUnrenderedLine = 0;\n        }\n        --this.queuedScanLines;\n    }\n}\nGameBoyCore.prototype.incrementScanLineQueue = function () {\n    if (this.queuedScanLines < 144) {\n        ++this.queuedScanLines;\n    }\n    else {\n        this.currentX = 0;\n        this.midScanlineOffset = -1;\n        if (this.lastUnrenderedLine < 143) {\n            ++this.lastUnrenderedLine;\n        }\n        else {\n            this.lastUnrenderedLine = 0;\n        }\n    }\n}\nGameBoyCore.prototype.midScanLineJIT = function () {\n    this.graphicsJIT();\n    this.renderMidScanLine();\n}\n//Check for the highest priority IRQ to fire:\nGameBoyCore.prototype.launchIRQ = function () {\n    var bitShift = 0;\n    var testbit = 1;\n    do {\n        //Check to see if an interrupt is enabled AND requested.\n        if ((testbit & this.IRQLineMatched) == testbit) {\n            this.IME = false;                       //Reset the interrupt enabling.\n            this.interruptsRequested -= testbit;    //Reset the interrupt request.\n            this.IRQLineMatched = 0;                //Reset the IRQ assertion.\n            //Interrupts have a certain clock cycle length:\n            this.CPUTicks = 20;\n            //Set the stack pointer to the current program counter value:\n            this.stackPointer = (this.stackPointer - 1) & 0xFFFF;\n            this.memoryWriter[this.stackPointer](this, this.stackPointer, this.programCounter >> 8);\n            this.stackPointer = (this.stackPointer - 1) & 0xFFFF;\n            this.memoryWriter[this.stackPointer](this, this.stackPointer, this.programCounter & 0xFF);\n            //Set the program counter to the interrupt's address:\n            this.programCounter = 0x40 | (bitShift << 3);\n            //Clock the core for mid-instruction updates:\n            this.updateCore();\n            return;                                 //We only want the highest priority interrupt.\n        }\n        testbit = 1 << ++bitShift;\n    } while (bitShift < 5);\n}\n/*\n    Check for IRQs to be fired while not in HALT:\n*/\nGameBoyCore.prototype.checkIRQMatching = function () {\n    if (this.IME) {\n        this.IRQLineMatched = this.interruptsEnabled & this.interruptsRequested & 0x1F;\n    }\n}\n/*\n    Handle the HALT opcode by predicting all IRQ cases correctly,\n    then selecting the next closest IRQ firing from the prediction to\n    clock up to. This prevents hacky looping that doesn't predict, but\n    instead just clocks through the core update procedure by one which\n    is very slow. Not many emulators do this because they have to cover\n    all the IRQ prediction cases and they usually get them wrong.\n*/\nGameBoyCore.prototype.calculateHALTPeriod = function () {\n    //Initialize our variables and start our prediction:\n    if (!this.halt) {\n        this.halt = true;\n        var currentClocks = -1;\n        var temp_var = 0;\n        if (this.LCDisOn) {\n            //If the LCD is enabled, then predict the LCD IRQs enabled:\n            if ((this.interruptsEnabled & 0x1) == 0x1) {\n                currentClocks = ((456 * (((this.modeSTAT == 1) ? 298 : 144) - this.actualScanLine)) - this.LCDTicks) << this.doubleSpeedShifter;\n            }\n            if ((this.interruptsEnabled & 0x2) == 0x2) {\n                if (this.mode0TriggerSTAT) {\n                    temp_var = (this.clocksUntilMode0() - this.LCDTicks) << this.doubleSpeedShifter;\n                    if (temp_var <= currentClocks || currentClocks == -1) {\n                        currentClocks = temp_var;\n                    }\n                }\n                if (this.mode1TriggerSTAT && (this.interruptsEnabled & 0x1) == 0) {\n                    temp_var = ((456 * (((this.modeSTAT == 1) ? 298 : 144) - this.actualScanLine)) - this.LCDTicks) << this.doubleSpeedShifter;\n                    if (temp_var <= currentClocks || currentClocks == -1) {\n                        currentClocks = temp_var;\n                    }\n                }\n                if (this.mode2TriggerSTAT) {\n                    temp_var = (((this.actualScanLine >= 143) ? (456 * (154 - this.actualScanLine)) : 456) - this.LCDTicks) << this.doubleSpeedShifter;\n                    if (temp_var <= currentClocks || currentClocks == -1) {\n                        currentClocks = temp_var;\n                    }\n                }\n                if (this.LYCMatchTriggerSTAT && this.memory[0xFF45] <= 153) {\n                    temp_var = (this.clocksUntilLYCMatch() - this.LCDTicks) << this.doubleSpeedShifter;\n                    if (temp_var <= currentClocks || currentClocks == -1) {\n                        currentClocks = temp_var;\n                    }\n                }\n            }\n        }\n        if (this.TIMAEnabled && (this.interruptsEnabled & 0x4) == 0x4) {\n            //CPU timer IRQ prediction:\n            temp_var = ((0x100 - this.memory[0xFF05]) * this.TACClocker) - this.timerTicks;\n            if (temp_var <= currentClocks || currentClocks == -1) {\n                currentClocks = temp_var;\n            }\n        }\n        if (this.serialTimer > 0 && (this.interruptsEnabled & 0x8) == 0x8) {\n            //Serial IRQ prediction:\n            if (this.serialTimer <= currentClocks || currentClocks == -1) {\n                currentClocks = this.serialTimer;\n            }\n        }\n    }\n    else {\n        var currentClocks = this.remainingClocks;\n    }\n    var maxClocks = (this.CPUCyclesTotal - this.emulatorTicks) << this.doubleSpeedShifter;\n    if (currentClocks >= 0) {\n        if (currentClocks <= maxClocks) {\n            //Exit out of HALT normally:\n            this.CPUTicks = Math.max(currentClocks, this.CPUTicks);\n            this.updateCoreFull();\n            this.halt = false;\n            this.CPUTicks = 0;\n        }\n        else {\n            //Still in HALT, clock only up to the clocks specified per iteration:\n            this.CPUTicks = Math.max(maxClocks, this.CPUTicks);\n            this.remainingClocks = currentClocks - this.CPUTicks;\n        }\n    }\n    else {\n        //Still in HALT, clock only up to the clocks specified per iteration:\n        //Will stay in HALT forever (Stuck in HALT forever), but the APU and LCD are still clocked, so don't pause:\n        this.CPUTicks += maxClocks;\n    }\n}\n//Memory Reading:\nGameBoyCore.prototype.memoryRead = function (address) {\n    //Act as a wrapper for reading the returns from the compiled jumps to memory.\n    return this.memoryReader[address](this, address);   //This seems to be faster than the usual if/else.\n}\nGameBoyCore.prototype.memoryHighRead = function (address) {\n    //Act as a wrapper for reading the returns from the compiled jumps to memory.\n    return this.memoryHighReader[address](this, address);   //This seems to be faster than the usual if/else.\n}\nGameBoyCore.prototype.memoryReadJumpCompile = function () {\n    //Faster in some browsers, since we are doing less conditionals overall by implementing them in advance.\n    for (var index = 0x0000; index <= 0xFFFF; index++) {\n        if (index < 0x4000) {\n            this.memoryReader[index] = this.memoryReadNormal;\n        }\n        else if (index < 0x8000) {\n            this.memoryReader[index] = this.memoryReadROM;\n        }\n        else if (index < 0x9800) {\n            this.memoryReader[index] = (this.cGBC) ? this.VRAMDATAReadCGBCPU : this.VRAMDATAReadDMGCPU;\n        }\n        else if (index < 0xA000) {\n            this.memoryReader[index] = (this.cGBC) ? this.VRAMCHRReadCGBCPU : this.VRAMCHRReadDMGCPU;\n        }\n        else if (index >= 0xA000 && index < 0xC000) {\n            if ((this.numRAMBanks == 1 / 16 && index < 0xA200) || this.numRAMBanks >= 1) {\n                if (this.cMBC7) {\n                    this.memoryReader[index] = this.memoryReadMBC7;\n                }\n                else if (!this.cMBC3) {\n                    this.memoryReader[index] = this.memoryReadMBC;\n                }\n                else {\n                    //MBC3 RTC + RAM:\n                    this.memoryReader[index] = this.memoryReadMBC3;\n                }\n            }\n            else {\n                this.memoryReader[index] = this.memoryReadBAD;\n            }\n        }\n        else if (index >= 0xC000 && index < 0xE000) {\n            if (!this.cGBC || index < 0xD000) {\n                this.memoryReader[index] = this.memoryReadNormal;\n            }\n            else {\n                this.memoryReader[index] = this.memoryReadGBCMemory;\n            }\n        }\n        else if (index >= 0xE000 && index < 0xFE00) {\n            if (!this.cGBC || index < 0xF000) {\n                this.memoryReader[index] = this.memoryReadECHONormal;\n            }\n            else {\n                this.memoryReader[index] = this.memoryReadECHOGBCMemory;\n            }\n        }\n        else if (index < 0xFEA0) {\n            this.memoryReader[index] = this.memoryReadOAM;\n        }\n        else if (this.cGBC && index >= 0xFEA0 && index < 0xFF00) {\n            this.memoryReader[index] = this.memoryReadNormal;\n        }\n        else if (index >= 0xFF00) {\n            switch (index) {\n                case 0xFF00:\n                    //JOYPAD:\n                    this.memoryHighReader[0] = this.memoryReader[0xFF00] = function (parentObj, address) {\n                        return 0xC0 | parentObj.memory[0xFF00]; //Top nibble returns as set.\n                    }\n                    break;\n                case 0xFF01:\n                    //SB\n                    this.memoryHighReader[0x01] = this.memoryReader[0xFF01] = function (parentObj, address) {\n                        return (parentObj.memory[0xFF02] < 0x80) ? parentObj.memory[0xFF01] : 0xFF;\n                    }\n                    break;\n                case 0xFF02:\n                    //SC\n                    if (this.cGBC) {\n                        this.memoryHighReader[0x02] = this.memoryReader[0xFF02] = function (parentObj, address) {\n                            return ((parentObj.serialTimer <= 0) ? 0x7C : 0xFC) | parentObj.memory[0xFF02];\n                        }\n                    }\n                    else {\n                        this.memoryHighReader[0x02] = this.memoryReader[0xFF02] = function (parentObj, address) {\n                            return ((parentObj.serialTimer <= 0) ? 0x7E : 0xFE) | parentObj.memory[0xFF02];\n                        }\n                    }\n                    break;\n                case 0xFF03:\n                    this.memoryHighReader[0x03] = this.memoryReader[0xFF03] = this.memoryReadBAD;\n                    break;\n                case 0xFF04:\n                    //DIV\n                    this.memoryHighReader[0x04] = this.memoryReader[0xFF04] = function (parentObj, address) {\n                        parentObj.memory[0xFF04] = (parentObj.memory[0xFF04] + (parentObj.DIVTicks >> 8)) & 0xFF;\n                        parentObj.DIVTicks &= 0xFF;\n                        return parentObj.memory[0xFF04];\n\n                    }\n                    break;\n                case 0xFF05:\n                case 0xFF06:\n                    this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;\n                    this.memoryReader[index] = this.memoryReadNormal;\n                    break;\n                case 0xFF07:\n                    this.memoryHighReader[0x07] = this.memoryReader[0xFF07] = function (parentObj, address) {\n                        return 0xF8 | parentObj.memory[0xFF07];\n                    }\n                    break;\n                case 0xFF08:\n                case 0xFF09:\n                case 0xFF0A:\n                case 0xFF0B:\n                case 0xFF0C:\n                case 0xFF0D:\n                case 0xFF0E:\n                    this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;\n                    break;\n                case 0xFF0F:\n                    //IF\n                    this.memoryHighReader[0x0F] = this.memoryReader[0xFF0F] = function (parentObj, address) {\n                        return 0xE0 | parentObj.interruptsRequested;\n                    }\n                    break;\n                case 0xFF10:\n                    this.memoryHighReader[0x10] = this.memoryReader[0xFF10] = function (parentObj, address) {\n                        return 0x80 | parentObj.memory[0xFF10];\n                    }\n                    break;\n                case 0xFF11:\n                    this.memoryHighReader[0x11] = this.memoryReader[0xFF11] = function (parentObj, address) {\n                        return 0x3F | parentObj.memory[0xFF11];\n                    }\n                    break;\n                case 0xFF12:\n                    this.memoryHighReader[0x12] = this.memoryHighReadNormal;\n                    this.memoryReader[0xFF12] = this.memoryReadNormal;\n                    break;\n                case 0xFF13:\n                    this.memoryHighReader[0x13] = this.memoryReader[0xFF13] = this.memoryReadBAD;\n                    break;\n                case 0xFF14:\n                    this.memoryHighReader[0x14] = this.memoryReader[0xFF14] = function (parentObj, address) {\n                        return 0xBF | parentObj.memory[0xFF14];\n                    }\n                    break;\n                case 0xFF15:\n                    this.memoryHighReader[0x15] = this.memoryReadBAD;\n                    this.memoryReader[0xFF15] = this.memoryReadBAD;\n                    break;\n                case 0xFF16:\n                    this.memoryHighReader[0x16] = this.memoryReader[0xFF16] = function (parentObj, address) {\n                        return 0x3F | parentObj.memory[0xFF16];\n                    }\n                    break;\n                case 0xFF17:\n                    this.memoryHighReader[0x17] = this.memoryHighReadNormal;\n                    this.memoryReader[0xFF17] = this.memoryReadNormal;\n                    break;\n                case 0xFF18:\n                    this.memoryHighReader[0x18] = this.memoryReader[0xFF18] = this.memoryReadBAD;\n                    break;\n                case 0xFF19:\n                    this.memoryHighReader[0x19] = this.memoryReader[0xFF19] = function (parentObj, address) {\n                        return 0xBF | parentObj.memory[0xFF19];\n                    }\n                    break;\n                case 0xFF1A:\n                    this.memoryHighReader[0x1A] = this.memoryReader[0xFF1A] = function (parentObj, address) {\n                        return 0x7F | parentObj.memory[0xFF1A];\n                    }\n                    break;\n                case 0xFF1B:\n                    this.memoryHighReader[0x1B] = this.memoryReader[0xFF1B] = this.memoryReadBAD;\n                    break;\n                case 0xFF1C:\n                    this.memoryHighReader[0x1C] = this.memoryReader[0xFF1C] = function (parentObj, address) {\n                        return 0x9F | parentObj.memory[0xFF1C];\n                    }\n                    break;\n                case 0xFF1D:\n                    this.memoryHighReader[0x1D] = this.memoryReader[0xFF1D] = this.memoryReadBAD;\n                    break;\n                case 0xFF1E:\n                    this.memoryHighReader[0x1E] = this.memoryReader[0xFF1E] = function (parentObj, address) {\n                        return 0xBF | parentObj.memory[0xFF1E];\n                    }\n                    break;\n                case 0xFF1F:\n                case 0xFF20:\n                    this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;\n                    break;\n                case 0xFF21:\n                case 0xFF22:\n                    this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;\n                    this.memoryReader[index] = this.memoryReadNormal;\n                    break;\n                case 0xFF23:\n                    this.memoryHighReader[0x23] = this.memoryReader[0xFF23] = function (parentObj, address) {\n                        return 0xBF | parentObj.memory[0xFF23];\n                    }\n                    break;\n                case 0xFF24:\n                case 0xFF25:\n                    this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;\n                    this.memoryReader[index] = this.memoryReadNormal;\n                    break;\n                case 0xFF26:\n                    this.memoryHighReader[0x26] = this.memoryReader[0xFF26] = function (parentObj, address) {\n                        parentObj.audioJIT();\n                        return 0x70 | parentObj.memory[0xFF26];\n                    }\n                    break;\n                case 0xFF27:\n                case 0xFF28:\n                case 0xFF29:\n                case 0xFF2A:\n                case 0xFF2B:\n                case 0xFF2C:\n                case 0xFF2D:\n                case 0xFF2E:\n                case 0xFF2F:\n                    this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;\n                    break;\n                case 0xFF30:\n                case 0xFF31:\n                case 0xFF32:\n                case 0xFF33:\n                case 0xFF34:\n                case 0xFF35:\n                case 0xFF36:\n                case 0xFF37:\n                case 0xFF38:\n                case 0xFF39:\n                case 0xFF3A:\n                case 0xFF3B:\n                case 0xFF3C:\n                case 0xFF3D:\n                case 0xFF3E:\n                case 0xFF3F:\n                    this.memoryReader[index] = function (parentObj, address) {\n                        return (parentObj.channel3canPlay) ? parentObj.memory[0xFF00 | (parentObj.channel3lastSampleLookup >> 1)] : parentObj.memory[address];\n                    }\n                    this.memoryHighReader[index & 0xFF] = function (parentObj, address) {\n                        return (parentObj.channel3canPlay) ? parentObj.memory[0xFF00 | (parentObj.channel3lastSampleLookup >> 1)] : parentObj.memory[0xFF00 | address];\n                    }\n                    break;\n                case 0xFF40:\n                    this.memoryHighReader[0x40] = this.memoryHighReadNormal;\n                    this.memoryReader[0xFF40] = this.memoryReadNormal;\n                    break;\n                case 0xFF41:\n                    this.memoryHighReader[0x41] = this.memoryReader[0xFF41] = function (parentObj, address) {\n                        return 0x80 | parentObj.memory[0xFF41] | parentObj.modeSTAT;\n                    }\n                    break;\n                case 0xFF42:\n                    this.memoryHighReader[0x42] = this.memoryReader[0xFF42] = function (parentObj, address) {\n                        return parentObj.backgroundY;\n                    }\n                    break;\n                case 0xFF43:\n                    this.memoryHighReader[0x43] = this.memoryReader[0xFF43] = function (parentObj, address) {\n                        return parentObj.backgroundX;\n                    }\n                    break;\n                case 0xFF44:\n                    this.memoryHighReader[0x44] = this.memoryReader[0xFF44] = function (parentObj, address) {\n                        return ((parentObj.LCDisOn) ? parentObj.memory[0xFF44] : 0);\n                    }\n                    break;\n                case 0xFF45:\n                case 0xFF46:\n                case 0xFF47:\n                case 0xFF48:\n                case 0xFF49:\n                    this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;\n                    this.memoryReader[index] = this.memoryReadNormal;\n                    break;\n                case 0xFF4A:\n                    //WY\n                    this.memoryHighReader[0x4A] = this.memoryReader[0xFF4A] = function (parentObj, address) {\n                        return parentObj.windowY;\n                    }\n                    break;\n                case 0xFF4B:\n                    this.memoryHighReader[0x4B] = this.memoryHighReadNormal;\n                    this.memoryReader[0xFF4B] = this.memoryReadNormal;\n                    break;\n                case 0xFF4C:\n                    this.memoryHighReader[0x4C] = this.memoryReader[0xFF4C] = this.memoryReadBAD;\n                    break;\n                case 0xFF4D:\n                    this.memoryHighReader[0x4D] = this.memoryHighReadNormal;\n                    this.memoryReader[0xFF4D] = this.memoryReadNormal;\n                    break;\n                case 0xFF4E:\n                    this.memoryHighReader[0x4E] = this.memoryReader[0xFF4E] = this.memoryReadBAD;\n                    break;\n                case 0xFF4F:\n                    this.memoryHighReader[0x4F] = this.memoryReader[0xFF4F] = function (parentObj, address) {\n                        return parentObj.currVRAMBank;\n                    }\n                    break;\n                case 0xFF50:\n                case 0xFF51:\n                case 0xFF52:\n                case 0xFF53:\n                case 0xFF54:\n                    this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;\n                    this.memoryReader[index] = this.memoryReadNormal;\n                    break;\n                case 0xFF55:\n                    if (this.cGBC) {\n                        this.memoryHighReader[0x55] = this.memoryReader[0xFF55] = function (parentObj, address) {\n                            if (!parentObj.LCDisOn && parentObj.hdmaRunning) {  //Undocumented behavior alert: HDMA becomes GDMA when LCD is off (Worms Armageddon Fix).\n                                //DMA\n                                parentObj.DMAWrite((parentObj.memory[0xFF55] & 0x7F) + 1);\n                                parentObj.memory[0xFF55] = 0xFF;    //Transfer completed.\n                                parentObj.hdmaRunning = false;\n                            }\n                            return parentObj.memory[0xFF55];\n                        }\n                    }\n                    else {\n                        this.memoryReader[0xFF55] = this.memoryReadNormal;\n                        this.memoryHighReader[0x55] = this.memoryHighReadNormal;\n                    }\n                    break;\n                case 0xFF56:\n                    if (this.cGBC) {\n                        this.memoryHighReader[0x56] = this.memoryReader[0xFF56] = function (parentObj, address) {\n                            //Return IR \"not connected\" status:\n                            return 0x3C | ((parentObj.memory[0xFF56] >= 0xC0) ? (0x2 | (parentObj.memory[0xFF56] & 0xC1)) : (parentObj.memory[0xFF56] & 0xC3));\n                        }\n                    }\n                    else {\n                        this.memoryReader[0xFF56] = this.memoryReadNormal;\n                        this.memoryHighReader[0x56] = this.memoryHighReadNormal;\n                    }\n                    break;\n                case 0xFF57:\n                case 0xFF58:\n                case 0xFF59:\n                case 0xFF5A:\n                case 0xFF5B:\n                case 0xFF5C:\n                case 0xFF5D:\n                case 0xFF5E:\n                case 0xFF5F:\n                case 0xFF60:\n                case 0xFF61:\n                case 0xFF62:\n                case 0xFF63:\n                case 0xFF64:\n                case 0xFF65:\n                case 0xFF66:\n                case 0xFF67:\n                    this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;\n                    break;\n                case 0xFF68:\n                case 0xFF69:\n                case 0xFF6A:\n                case 0xFF6B:\n                    this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;\n                    this.memoryReader[index] = this.memoryReadNormal;\n                    break;\n                case 0xFF6C:\n                    if (this.cGBC) {\n                        this.memoryHighReader[0x6C] = this.memoryReader[0xFF6C] = function (parentObj, address) {\n                            return 0xFE | parentObj.memory[0xFF6C];\n                        }\n                    }\n                    else {\n                        this.memoryHighReader[0x6C] = this.memoryReader[0xFF6C] = this.memoryReadBAD;\n                    }\n                    break;\n                case 0xFF6D:\n                case 0xFF6E:\n                case 0xFF6F:\n                    this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;\n                    break;\n                case 0xFF70:\n                    if (this.cGBC) {\n                        //SVBK\n                        this.memoryHighReader[0x70] = this.memoryReader[0xFF70] = function (parentObj, address) {\n                            return 0x40 | parentObj.memory[0xFF70];\n                        }\n                    }\n                    else {\n                        this.memoryHighReader[0x70] = this.memoryReader[0xFF70] = this.memoryReadBAD;\n                    }\n                    break;\n                case 0xFF71:\n                    this.memoryHighReader[0x71] = this.memoryReader[0xFF71] = this.memoryReadBAD;\n                    break;\n                case 0xFF72:\n                case 0xFF73:\n                    this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadNormal;\n                    break;\n                case 0xFF74:\n                    if (this.cGBC) {\n                        this.memoryHighReader[0x74] = this.memoryReader[0xFF74] = this.memoryReadNormal;\n                    }\n                    else {\n                        this.memoryHighReader[0x74] = this.memoryReader[0xFF74] = this.memoryReadBAD;\n                    }\n                    break;\n                case 0xFF75:\n                    this.memoryHighReader[0x75] = this.memoryReader[0xFF75] = function (parentObj, address) {\n                        return 0x8F | parentObj.memory[0xFF75];\n                    }\n                    break;\n                case 0xFF76:\n                case 0xFF77:\n                    this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = function (parentObj, address) {\n                        return 0;\n                    }\n                    break;\n                case 0xFF78:\n                case 0xFF79:\n                case 0xFF7A:\n                case 0xFF7B:\n                case 0xFF7C:\n                case 0xFF7D:\n                case 0xFF7E:\n                case 0xFF7F:\n                    this.memoryHighReader[index & 0xFF] = this.memoryReader[index] = this.memoryReadBAD;\n                    break;\n                case 0xFFFF:\n                    //IE\n                    this.memoryHighReader[0xFF] = this.memoryReader[0xFFFF] = function (parentObj, address) {\n                        return parentObj.interruptsEnabled;\n                    }\n                    break;\n                default:\n                    this.memoryReader[index] = this.memoryReadNormal;\n                    this.memoryHighReader[index & 0xFF] = this.memoryHighReadNormal;\n            }\n        }\n        else {\n            this.memoryReader[index] = this.memoryReadBAD;\n        }\n    }\n}\nGameBoyCore.prototype.memoryReadNormal = function (parentObj, address) {\n    return parentObj.memory[address];\n}\nGameBoyCore.prototype.memoryHighReadNormal = function (parentObj, address) {\n    return parentObj.memory[0xFF00 | address];\n}\nGameBoyCore.prototype.memoryReadROM = function (parentObj, address) {\n    return parentObj.ROM[parentObj.currentROMBank + address];\n}\nGameBoyCore.prototype.memoryReadMBC = function (parentObj, address) {\n    //Switchable RAM\n    if (parentObj.MBCRAMBanksEnabled || settings[10]) {\n        return parentObj.MBCRam[address + parentObj.currMBCRAMBankPosition];\n    }\n    //cout(\"Reading from disabled RAM.\", 1);\n    return 0xFF;\n}\nGameBoyCore.prototype.memoryReadMBC7 = function (parentObj, address) {\n    //Switchable RAM\n    if (parentObj.MBCRAMBanksEnabled || settings[10]) {\n        switch (address) {\n            case 0xA000:\n            case 0xA060:\n            case 0xA070:\n                return 0;\n            case 0xA080:\n                //TODO: Gyro Control Register\n                return 0;\n            case 0xA050:\n                //Y High Byte\n                return parentObj.highY;\n            case 0xA040:\n                //Y Low Byte\n                return parentObj.lowY;\n            case 0xA030:\n                //X High Byte\n                return parentObj.highX;\n            case 0xA020:\n                //X Low Byte:\n                return parentObj.lowX;\n            default:\n                return parentObj.MBCRam[address + parentObj.currMBCRAMBankPosition];\n        }\n    }\n    //cout(\"Reading from disabled RAM.\", 1);\n    return 0xFF;\n}\nGameBoyCore.prototype.memoryReadMBC3 = function (parentObj, address) {\n    //Switchable RAM\n    if (parentObj.MBCRAMBanksEnabled || settings[10]) {\n        switch (parentObj.currMBCRAMBank) {\n            case 0x00:\n            case 0x01:\n            case 0x02:\n            case 0x03:\n                return parentObj.MBCRam[address + parentObj.currMBCRAMBankPosition];\n                break;\n            case 0x08:\n                return parentObj.latchedSeconds;\n                break;\n            case 0x09:\n                return parentObj.latchedMinutes;\n                break;\n            case 0x0A:\n                return parentObj.latchedHours;\n                break;\n            case 0x0B:\n                return parentObj.latchedLDays;\n                break;\n            case 0x0C:\n                return (((parentObj.RTCDayOverFlow) ? 0x80 : 0) + ((parentObj.RTCHALT) ? 0x40 : 0)) + parentObj.latchedHDays;\n        }\n    }\n    //cout(\"Reading from invalid or disabled RAM.\", 1);\n    return 0xFF;\n}\nGameBoyCore.prototype.memoryReadGBCMemory = function (parentObj, address) {\n    return parentObj.GBCMemory[address + parentObj.gbcRamBankPosition];\n}\nGameBoyCore.prototype.memoryReadOAM = function (parentObj, address) {\n    return (parentObj.modeSTAT > 1) ?  0xFF : parentObj.memory[address];\n}\nGameBoyCore.prototype.memoryReadECHOGBCMemory = function (parentObj, address) {\n    return parentObj.GBCMemory[address + parentObj.gbcRamBankPositionECHO];\n}\nGameBoyCore.prototype.memoryReadECHONormal = function (parentObj, address) {\n    return parentObj.memory[address - 0x2000];\n}\nGameBoyCore.prototype.memoryReadBAD = function (parentObj, address) {\n    return 0xFF;\n}\nGameBoyCore.prototype.VRAMDATAReadCGBCPU = function (parentObj, address) {\n    //CPU Side Reading The VRAM (Optimized for GameBoy Color)\n    return (parentObj.modeSTAT > 2) ? 0xFF : ((parentObj.currVRAMBank == 0) ? parentObj.memory[address] : parentObj.VRAM[address & 0x1FFF]);\n}\nGameBoyCore.prototype.VRAMDATAReadDMGCPU = function (parentObj, address) {\n    //CPU Side Reading The VRAM (Optimized for classic GameBoy)\n    return (parentObj.modeSTAT > 2) ? 0xFF : parentObj.memory[address];\n}\nGameBoyCore.prototype.VRAMCHRReadCGBCPU = function (parentObj, address) {\n    //CPU Side Reading the Character Data Map:\n    return (parentObj.modeSTAT > 2) ? 0xFF : parentObj.BGCHRCurrentBank[address & 0x7FF];\n}\nGameBoyCore.prototype.VRAMCHRReadDMGCPU = function (parentObj, address) {\n    //CPU Side Reading the Character Data Map:\n    return (parentObj.modeSTAT > 2) ? 0xFF : parentObj.BGCHRBank1[address & 0x7FF];\n}\nGameBoyCore.prototype.setCurrentMBC1ROMBank = function () {\n    //Read the cartridge ROM data from RAM memory:\n    switch (this.ROMBank1offs) {\n        case 0x00:\n        case 0x20:\n        case 0x40:\n        case 0x60:\n            //Bank calls for 0x00, 0x20, 0x40, and 0x60 are really for 0x01, 0x21, 0x41, and 0x61.\n            this.currentROMBank = (this.ROMBank1offs % this.ROMBankEdge) << 14;\n            break;\n        default:\n            this.currentROMBank = ((this.ROMBank1offs % this.ROMBankEdge) - 1) << 14;\n    }\n}\nGameBoyCore.prototype.setCurrentMBC2AND3ROMBank = function () {\n    //Read the cartridge ROM data from RAM memory:\n    //Only map bank 0 to bank 1 here (MBC2 is like MBC1, but can only do 16 banks, so only the bank 0 quirk appears for MBC2):\n    this.currentROMBank = Math.max((this.ROMBank1offs % this.ROMBankEdge) - 1, 0) << 14;\n}\nGameBoyCore.prototype.setCurrentMBC5ROMBank = function () {\n    //Read the cartridge ROM data from RAM memory:\n    this.currentROMBank = ((this.ROMBank1offs % this.ROMBankEdge) - 1) << 14;\n}\n//Memory Writing:\nGameBoyCore.prototype.memoryWrite = function (address, data) {\n    //Act as a wrapper for writing by compiled jumps to specific memory writing functions.\n    this.memoryWriter[address](this, address, data);\n}\n//0xFFXX fast path:\nGameBoyCore.prototype.memoryHighWrite = function (address, data) {\n    //Act as a wrapper for writing by compiled jumps to specific memory writing functions.\n    this.memoryHighWriter[address](this, address, data);\n}\nGameBoyCore.prototype.memoryWriteJumpCompile = function () {\n    //Faster in some browsers, since we are doing less conditionals overall by implementing them in advance.\n    for (var index = 0x0000; index <= 0xFFFF; index++) {\n        if (index < 0x8000) {\n            if (this.cMBC1) {\n                if (index < 0x2000) {\n                    this.memoryWriter[index] = this.MBCWriteEnable;\n                }\n                else if (index < 0x4000) {\n                    this.memoryWriter[index] = this.MBC1WriteROMBank;\n                }\n                else if (index < 0x6000) {\n                    this.memoryWriter[index] = this.MBC1WriteRAMBank;\n                }\n                else {\n                    this.memoryWriter[index] = this.MBC1WriteType;\n                }\n            }\n            else if (this.cMBC2) {\n                if (index < 0x1000) {\n                    this.memoryWriter[index] = this.MBCWriteEnable;\n                }\n                else if (index >= 0x2100 && index < 0x2200) {\n                    this.memoryWriter[index] = this.MBC2WriteROMBank;\n                }\n                else {\n                    this.memoryWriter[index] = this.cartIgnoreWrite;\n                }\n            }\n            else if (this.cMBC3) {\n                if (index < 0x2000) {\n                    this.memoryWriter[index] = this.MBCWriteEnable;\n                }\n                else if (index < 0x4000) {\n                    this.memoryWriter[index] = this.MBC3WriteROMBank;\n                }\n                else if (index < 0x6000) {\n                    this.memoryWriter[index] = this.MBC3WriteRAMBank;\n                }\n                else {\n                    this.memoryWriter[index] = this.MBC3WriteRTCLatch;\n                }\n            }\n            else if (this.cMBC5 || this.cRUMBLE || this.cMBC7) {\n                if (index < 0x2000) {\n                    this.memoryWriter[index] = this.MBCWriteEnable;\n                }\n                else if (index < 0x3000) {\n                    this.memoryWriter[index] = this.MBC5WriteROMBankLow;\n                }\n                else if (index < 0x4000) {\n                    this.memoryWriter[index] = this.MBC5WriteROMBankHigh;\n                }\n                else if (index < 0x6000) {\n                    this.memoryWriter[index] = (this.cRUMBLE) ? this.RUMBLEWriteRAMBank : this.MBC5WriteRAMBank;\n                }\n                else {\n                    this.memoryWriter[index] = this.cartIgnoreWrite;\n                }\n            }\n            else if (this.cHuC3) {\n                if (index < 0x2000) {\n                    this.memoryWriter[index] = this.MBCWriteEnable;\n                }\n                else if (index < 0x4000) {\n                    this.memoryWriter[index] = this.MBC3WriteROMBank;\n                }\n                else if (index < 0x6000) {\n                    this.memoryWriter[index] = this.HuC3WriteRAMBank;\n                }\n                else {\n                    this.memoryWriter[index] = this.cartIgnoreWrite;\n                }\n            }\n            else {\n                this.memoryWriter[index] = this.cartIgnoreWrite;\n            }\n        }\n        else if (index < 0x9000) {\n            this.memoryWriter[index] = (this.cGBC) ? this.VRAMGBCDATAWrite : this.VRAMGBDATAWrite;\n        }\n        else if (index < 0x9800) {\n            this.memoryWriter[index] = (this.cGBC) ? this.VRAMGBCDATAWrite : this.VRAMGBDATAUpperWrite;\n        }\n        else if (index < 0xA000) {\n            this.memoryWriter[index] = (this.cGBC) ? this.VRAMGBCCHRMAPWrite : this.VRAMGBCHRMAPWrite;\n        }\n        else if (index < 0xC000) {\n            if ((this.numRAMBanks == 1 / 16 && index < 0xA200) || this.numRAMBanks >= 1) {\n                if (!this.cMBC3) {\n                    this.memoryWriter[index] = this.memoryWriteMBCRAM;\n                }\n                else {\n                    //MBC3 RTC + RAM:\n                    this.memoryWriter[index] = this.memoryWriteMBC3RAM;\n                }\n            }\n            else {\n                this.memoryWriter[index] = this.cartIgnoreWrite;\n            }\n        }\n        else if (index < 0xE000) {\n            if (this.cGBC && index >= 0xD000) {\n                this.memoryWriter[index] = this.memoryWriteGBCRAM;\n            }\n            else {\n                this.memoryWriter[index] = this.memoryWriteNormal;\n            }\n        }\n        else if (index < 0xFE00) {\n            if (this.cGBC && index >= 0xF000) {\n                this.memoryWriter[index] = this.memoryWriteECHOGBCRAM;\n            }\n            else {\n                this.memoryWriter[index] = this.memoryWriteECHONormal;\n            }\n        }\n        else if (index <= 0xFEA0) {\n            this.memoryWriter[index] = this.memoryWriteOAMRAM;\n        }\n        else if (index < 0xFF00) {\n            if (this.cGBC) {                                            //Only GBC has access to this RAM.\n                this.memoryWriter[index] = this.memoryWriteNormal;\n            }\n            else {\n                this.memoryWriter[index] = this.cartIgnoreWrite;\n            }\n        }\n        else {\n            //Start the I/O initialization by filling in the slots as normal memory:\n            this.memoryWriter[index] = this.memoryWriteNormal;\n            this.memoryHighWriter[index & 0xFF] = this.memoryHighWriteNormal;\n        }\n    }\n    this.registerWriteJumpCompile();                //Compile the I/O write functions separately...\n}\nGameBoyCore.prototype.MBCWriteEnable = function (parentObj, address, data) {\n    //MBC RAM Bank Enable/Disable:\n    parentObj.MBCRAMBanksEnabled = ((data & 0x0F) == 0x0A); //If lower nibble is 0x0A, then enable, otherwise disable.\n}\nGameBoyCore.prototype.MBC1WriteROMBank = function (parentObj, address, data) {\n    //MBC1 ROM bank switching:\n    parentObj.ROMBank1offs = (parentObj.ROMBank1offs & 0x60) | (data & 0x1F);\n    parentObj.setCurrentMBC1ROMBank();\n}\nGameBoyCore.prototype.MBC1WriteRAMBank = function (parentObj, address, data) {\n    //MBC1 RAM bank switching\n    if (parentObj.MBC1Mode) {\n        //4/32 Mode\n        parentObj.currMBCRAMBank = data & 0x03;\n        parentObj.currMBCRAMBankPosition = (parentObj.currMBCRAMBank << 13) - 0xA000;\n    }\n    else {\n        //16/8 Mode\n        parentObj.ROMBank1offs = ((data & 0x03) << 5) | (parentObj.ROMBank1offs & 0x1F);\n        parentObj.setCurrentMBC1ROMBank();\n    }\n}\nGameBoyCore.prototype.MBC1WriteType = function (parentObj, address, data) {\n    //MBC1 mode setting:\n    parentObj.MBC1Mode = ((data & 0x1) == 0x1);\n    if (parentObj.MBC1Mode) {\n        parentObj.ROMBank1offs &= 0x1F;\n        parentObj.setCurrentMBC1ROMBank();\n    }\n    else {\n        parentObj.currMBCRAMBank = 0;\n        parentObj.currMBCRAMBankPosition = -0xA000;\n    }\n}\nGameBoyCore.prototype.MBC2WriteROMBank = function (parentObj, address, data) {\n    //MBC2 ROM bank switching:\n    parentObj.ROMBank1offs = data & 0x0F;\n    parentObj.setCurrentMBC2AND3ROMBank();\n}\nGameBoyCore.prototype.MBC3WriteROMBank = function (parentObj, address, data) {\n    //MBC3 ROM bank switching:\n    parentObj.ROMBank1offs = data & 0x7F;\n    parentObj.setCurrentMBC2AND3ROMBank();\n}\nGameBoyCore.prototype.MBC3WriteRAMBank = function (parentObj, address, data) {\n    parentObj.currMBCRAMBank = data;\n    if (data < 4) {\n        //MBC3 RAM bank switching\n        parentObj.currMBCRAMBankPosition = (parentObj.currMBCRAMBank << 13) - 0xA000;\n    }\n}\nGameBoyCore.prototype.MBC3WriteRTCLatch = function (parentObj, address, data) {\n    if (data == 0) {\n        parentObj.RTCisLatched = false;\n    }\n    else if (!parentObj.RTCisLatched) {\n        //Copy over the current RTC time for reading.\n        parentObj.RTCisLatched = true;\n        parentObj.latchedSeconds = parentObj.RTCSeconds | 0;\n        parentObj.latchedMinutes = parentObj.RTCMinutes;\n        parentObj.latchedHours = parentObj.RTCHours;\n        parentObj.latchedLDays = (parentObj.RTCDays & 0xFF);\n        parentObj.latchedHDays = parentObj.RTCDays >> 8;\n    }\n}\nGameBoyCore.prototype.MBC5WriteROMBankLow = function (parentObj, address, data) {\n    //MBC5 ROM bank switching:\n    parentObj.ROMBank1offs = (parentObj.ROMBank1offs & 0x100) | data;\n    parentObj.setCurrentMBC5ROMBank();\n}\nGameBoyCore.prototype.MBC5WriteROMBankHigh = function (parentObj, address, data) {\n    //MBC5 ROM bank switching (by least significant bit):\n    parentObj.ROMBank1offs  = ((data & 0x01) << 8) | (parentObj.ROMBank1offs & 0xFF);\n    parentObj.setCurrentMBC5ROMBank();\n}\nGameBoyCore.prototype.MBC5WriteRAMBank = function (parentObj, address, data) {\n    //MBC5 RAM bank switching\n    parentObj.currMBCRAMBank = data & 0xF;\n    parentObj.currMBCRAMBankPosition = (parentObj.currMBCRAMBank << 13) - 0xA000;\n}\nGameBoyCore.prototype.RUMBLEWriteRAMBank = function (parentObj, address, data) {\n    //MBC5 RAM bank switching\n    //Like MBC5, but bit 3 of the lower nibble is used for rumbling and bit 2 is ignored.\n    parentObj.currMBCRAMBank = data & 0x03;\n    parentObj.currMBCRAMBankPosition = (parentObj.currMBCRAMBank << 13) - 0xA000;\n}\nGameBoyCore.prototype.HuC3WriteRAMBank = function (parentObj, address, data) {\n    //HuC3 RAM bank switching\n    parentObj.currMBCRAMBank = data & 0x03;\n    parentObj.currMBCRAMBankPosition = (parentObj.currMBCRAMBank << 13) - 0xA000;\n}\nGameBoyCore.prototype.cartIgnoreWrite = function (parentObj, address, data) {\n    //We might have encountered illegal RAM writing or such, so just do nothing...\n}\nGameBoyCore.prototype.memoryWriteNormal = function (parentObj, address, data) {\n    parentObj.memory[address] = data;\n}\nGameBoyCore.prototype.memoryHighWriteNormal = function (parentObj, address, data) {\n    parentObj.memory[0xFF00 | address] = data;\n}\nGameBoyCore.prototype.memoryWriteMBCRAM = function (parentObj, address, data) {\n    if (parentObj.MBCRAMBanksEnabled || settings[10]) {\n        parentObj.MBCRam[address + parentObj.currMBCRAMBankPosition] = data;\n    }\n}\nGameBoyCore.prototype.memoryWriteMBC3RAM = function (parentObj, address, data) {\n    if (parentObj.MBCRAMBanksEnabled || settings[10]) {\n        switch (parentObj.currMBCRAMBank) {\n            case 0x00:\n            case 0x01:\n            case 0x02:\n            case 0x03:\n                parentObj.MBCRam[address + parentObj.currMBCRAMBankPosition] = data;\n                break;\n            case 0x08:\n                if (data < 60) {\n                    parentObj.RTCSeconds = data;\n                }\n                else {\n                    cout(\"(Bank #\" + parentObj.currMBCRAMBank + \") RTC write out of range: \" + data, 1);\n                }\n                break;\n            case 0x09:\n                if (data < 60) {\n                    parentObj.RTCMinutes = data;\n                }\n                else {\n                    cout(\"(Bank #\" + parentObj.currMBCRAMBank + \") RTC write out of range: \" + data, 1);\n                }\n                break;\n            case 0x0A:\n                if (data < 24) {\n                    parentObj.RTCHours = data;\n                }\n                else {\n                    cout(\"(Bank #\" + parentObj.currMBCRAMBank + \") RTC write out of range: \" + data, 1);\n                }\n                break;\n            case 0x0B:\n                parentObj.RTCDays = (data & 0xFF) | (parentObj.RTCDays & 0x100);\n                break;\n            case 0x0C:\n                parentObj.RTCDayOverFlow = (data > 0x7F);\n                parentObj.RTCHalt = (data & 0x40) == 0x40;\n                parentObj.RTCDays = ((data & 0x1) << 8) | (parentObj.RTCDays & 0xFF);\n                break;\n            default:\n                cout(\"Invalid MBC3 bank address selected: \" + parentObj.currMBCRAMBank, 0);\n        }\n    }\n}\nGameBoyCore.prototype.memoryWriteGBCRAM = function (parentObj, address, data) {\n    parentObj.GBCMemory[address + parentObj.gbcRamBankPosition] = data;\n}\nGameBoyCore.prototype.memoryWriteOAMRAM = function (parentObj, address, data) {\n    if (parentObj.modeSTAT < 2) {       //OAM RAM cannot be written to in mode 2 & 3\n        if (parentObj.memory[address] != data) {\n            parentObj.graphicsJIT();\n            parentObj.memory[address] = data;\n        }\n    }\n}\nGameBoyCore.prototype.memoryWriteECHOGBCRAM = function (parentObj, address, data) {\n    parentObj.GBCMemory[address + parentObj.gbcRamBankPositionECHO] = data;\n}\nGameBoyCore.prototype.memoryWriteECHONormal = function (parentObj, address, data) {\n    parentObj.memory[address - 0x2000] = data;\n}\nGameBoyCore.prototype.VRAMGBDATAWrite = function (parentObj, address, data) {\n    if (parentObj.modeSTAT < 3) {   //VRAM cannot be written to during mode 3\n        if (parentObj.memory[address] != data) {\n            //JIT the graphics render queue:\n            parentObj.graphicsJIT();\n            parentObj.memory[address] = data;\n            parentObj.generateGBOAMTileLine(address);\n        }\n    }\n}\nGameBoyCore.prototype.VRAMGBDATAUpperWrite = function (parentObj, address, data) {\n    if (parentObj.modeSTAT < 3) {   //VRAM cannot be written to during mode 3\n        if (parentObj.memory[address] != data) {\n            //JIT the graphics render queue:\n            parentObj.graphicsJIT();\n            parentObj.memory[address] = data;\n            parentObj.generateGBTileLine(address);\n        }\n    }\n}\nGameBoyCore.prototype.VRAMGBCDATAWrite = function (parentObj, address, data) {\n    if (parentObj.modeSTAT < 3) {   //VRAM cannot be written to during mode 3\n        if (parentObj.currVRAMBank == 0) {\n            if (parentObj.memory[address] != data) {\n                //JIT the graphics render queue:\n                parentObj.graphicsJIT();\n                parentObj.memory[address] = data;\n                parentObj.generateGBCTileLineBank1(address);\n            }\n        }\n        else {\n            address &= 0x1FFF;\n            if (parentObj.VRAM[address] != data) {\n                //JIT the graphics render queue:\n                parentObj.graphicsJIT();\n                parentObj.VRAM[address] = data;\n                parentObj.generateGBCTileLineBank2(address);\n            }\n        }\n    }\n}\nGameBoyCore.prototype.VRAMGBCHRMAPWrite = function (parentObj, address, data) {\n    if (parentObj.modeSTAT < 3) {   //VRAM cannot be written to during mode 3\n        address &= 0x7FF;\n        if (parentObj.BGCHRBank1[address] != data) {\n            //JIT the graphics render queue:\n            parentObj.graphicsJIT();\n            parentObj.BGCHRBank1[address] = data;\n        }\n    }\n}\nGameBoyCore.prototype.VRAMGBCCHRMAPWrite = function (parentObj, address, data) {\n    if (parentObj.modeSTAT < 3) {   //VRAM cannot be written to during mode 3\n        address &= 0x7FF;\n        if (parentObj.BGCHRCurrentBank[address] != data) {\n            //JIT the graphics render queue:\n            parentObj.graphicsJIT();\n            parentObj.BGCHRCurrentBank[address] = data;\n        }\n    }\n}\nGameBoyCore.prototype.DMAWrite = function (tilesToTransfer) {\n    if (!this.halt) {\n        //Clock the CPU for the DMA transfer (CPU is halted during the transfer):\n        this.CPUTicks += 4 | ((tilesToTransfer << 5) << this.doubleSpeedShifter);\n    }\n    //Source address of the transfer:\n    var source = (this.memory[0xFF51] << 8) | this.memory[0xFF52];\n    //Destination address in the VRAM memory range:\n    var destination = (this.memory[0xFF53] << 8) | this.memory[0xFF54];\n    //Creating some references:\n    var memoryReader = this.memoryReader;\n    //JIT the graphics render queue:\n    this.graphicsJIT();\n    var memory = this.memory;\n    //Determining which bank we're working on so we can optimize:\n    if (this.currVRAMBank == 0) {\n        //DMA transfer for VRAM bank 0:\n        do {\n            if (destination < 0x1800) {\n                memory[0x8000 | destination] = memoryReader[source](this, source++);\n                memory[0x8001 | destination] = memoryReader[source](this, source++);\n                memory[0x8002 | destination] = memoryReader[source](this, source++);\n                memory[0x8003 | destination] = memoryReader[source](this, source++);\n                memory[0x8004 | destination] = memoryReader[source](this, source++);\n                memory[0x8005 | destination] = memoryReader[source](this, source++);\n                memory[0x8006 | destination] = memoryReader[source](this, source++);\n                memory[0x8007 | destination] = memoryReader[source](this, source++);\n                memory[0x8008 | destination] = memoryReader[source](this, source++);\n                memory[0x8009 | destination] = memoryReader[source](this, source++);\n                memory[0x800A | destination] = memoryReader[source](this, source++);\n                memory[0x800B | destination] = memoryReader[source](this, source++);\n                memory[0x800C | destination] = memoryReader[source](this, source++);\n                memory[0x800D | destination] = memoryReader[source](this, source++);\n                memory[0x800E | destination] = memoryReader[source](this, source++);\n                memory[0x800F | destination] = memoryReader[source](this, source++);\n                this.generateGBCTileBank1(destination);\n                destination += 0x10;\n            }\n            else {\n                destination &= 0x7F0;\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank1[destination++] = memoryReader[source](this, source++);\n                destination = (destination + 0x1800) & 0x1FF0;\n            }\n            source &= 0xFFF0;\n            --tilesToTransfer;\n        } while (tilesToTransfer > 0);\n    }\n    else {\n        var VRAM = this.VRAM;\n        //DMA transfer for VRAM bank 1:\n        do {\n            if (destination < 0x1800) {\n                VRAM[destination] = memoryReader[source](this, source++);\n                VRAM[destination | 0x1] = memoryReader[source](this, source++);\n                VRAM[destination | 0x2] = memoryReader[source](this, source++);\n                VRAM[destination | 0x3] = memoryReader[source](this, source++);\n                VRAM[destination | 0x4] = memoryReader[source](this, source++);\n                VRAM[destination | 0x5] = memoryReader[source](this, source++);\n                VRAM[destination | 0x6] = memoryReader[source](this, source++);\n                VRAM[destination | 0x7] = memoryReader[source](this, source++);\n                VRAM[destination | 0x8] = memoryReader[source](this, source++);\n                VRAM[destination | 0x9] = memoryReader[source](this, source++);\n                VRAM[destination | 0xA] = memoryReader[source](this, source++);\n                VRAM[destination | 0xB] = memoryReader[source](this, source++);\n                VRAM[destination | 0xC] = memoryReader[source](this, source++);\n                VRAM[destination | 0xD] = memoryReader[source](this, source++);\n                VRAM[destination | 0xE] = memoryReader[source](this, source++);\n                VRAM[destination | 0xF] = memoryReader[source](this, source++);\n                this.generateGBCTileBank2(destination);\n                destination += 0x10;\n            }\n            else {\n                destination &= 0x7F0;\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                this.BGCHRBank2[destination++] = memoryReader[source](this, source++);\n                destination = (destination + 0x1800) & 0x1FF0;\n            }\n            source &= 0xFFF0;\n            --tilesToTransfer;\n        } while (tilesToTransfer > 0);\n    }\n    //Update the HDMA registers to their next addresses:\n    memory[0xFF51] = source >> 8;\n    memory[0xFF52] = source & 0xF0;\n    memory[0xFF53] = destination >> 8;\n    memory[0xFF54] = destination & 0xF0;\n}\nGameBoyCore.prototype.registerWriteJumpCompile = function () {\n    //I/O Registers (GB + GBC):\n    //JoyPad\n    this.memoryHighWriter[0] = this.memoryWriter[0xFF00] = function (parentObj, address, data) {\n        parentObj.memory[0xFF00] = (data & 0x30) | ((((data & 0x20) == 0) ? (parentObj.JoyPad >> 4) : 0xF) & (((data & 0x10) == 0) ? (parentObj.JoyPad & 0xF) : 0xF));\n    }\n    //SB (Serial Transfer Data)\n    this.memoryHighWriter[0x1] = this.memoryWriter[0xFF01] = function (parentObj, address, data) {\n        if (parentObj.memory[0xFF02] < 0x80) {  //Cannot write while a serial transfer is active.\n            parentObj.memory[0xFF01] = data;\n        }\n    }\n    //SC (Serial Transfer Control):\n    this.memoryHighWriter[0x2] = this.memoryHighWriteNormal;\n    this.memoryWriter[0xFF02] = this.memoryWriteNormal;\n    //Unmapped I/O:\n    this.memoryHighWriter[0x3] = this.memoryWriter[0xFF03] = this.cartIgnoreWrite;\n    //DIV\n    this.memoryHighWriter[0x4] = this.memoryWriter[0xFF04] = function (parentObj, address, data) {\n        parentObj.DIVTicks &= 0xFF; //Update DIV for realignment.\n        parentObj.memory[0xFF04] = 0;\n    }\n    //TIMA\n    this.memoryHighWriter[0x5] = this.memoryWriter[0xFF05] = function (parentObj, address, data) {\n        parentObj.memory[0xFF05] = data;\n    }\n    //TMA\n    this.memoryHighWriter[0x6] = this.memoryWriter[0xFF06] = function (parentObj, address, data) {\n        parentObj.memory[0xFF06] = data;\n    }\n    //TAC\n    this.memoryHighWriter[0x7] = this.memoryWriter[0xFF07] = function (parentObj, address, data) {\n        parentObj.memory[0xFF07] = data & 0x07;\n        parentObj.TIMAEnabled = (data & 0x04) == 0x04;\n        parentObj.TACClocker = Math.pow(4, ((data & 0x3) != 0) ? (data & 0x3) : 4) << 2;    //TODO: Find a way to not make a conditional in here...\n    }\n    //Unmapped I/O:\n    this.memoryHighWriter[0x8] = this.memoryWriter[0xFF08] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x9] = this.memoryWriter[0xFF09] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0xA] = this.memoryWriter[0xFF0A] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0xB] = this.memoryWriter[0xFF0B] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0xC] = this.memoryWriter[0xFF0C] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0xD] = this.memoryWriter[0xFF0D] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0xE] = this.memoryWriter[0xFF0E] = this.cartIgnoreWrite;\n    //IF (Interrupt Request)\n    this.memoryHighWriter[0xF] = this.memoryWriter[0xFF0F] = function (parentObj, address, data) {\n        parentObj.interruptsRequested = data;\n        parentObj.checkIRQMatching();\n    }\n    //NR10:\n    this.memoryHighWriter[0x10] = this.memoryWriter[0xFF10] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            if (parentObj.channel1decreaseSweep && (data & 0x08) == 0) {\n                if (parentObj.channel1Swept) {\n                    parentObj.channel1SweepFault = true;\n                }\n            }\n            parentObj.channel1lastTimeSweep = (data & 0x70) >> 4;\n            parentObj.channel1frequencySweepDivider = data & 0x07;\n            parentObj.channel1decreaseSweep = ((data & 0x08) == 0x08);\n            parentObj.memory[0xFF10] = data;\n            parentObj.channel1EnableCheck();\n        }\n    }\n    //NR11:\n    this.memoryHighWriter[0x11] = this.memoryWriter[0xFF11] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled || !parentObj.cGBC) {\n            if (parentObj.soundMasterEnabled) {\n                parentObj.audioJIT();\n            }\n            else {\n                data &= 0x3F;\n            }\n            parentObj.channel1CachedDuty = parentObj.dutyLookup[data >> 6];\n            parentObj.channel1totalLength = 0x40 - (data & 0x3F);\n            parentObj.memory[0xFF11] = data;\n            parentObj.channel1EnableCheck();\n        }\n    }\n    //NR12:\n    this.memoryHighWriter[0x12] = this.memoryWriter[0xFF12] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            if (parentObj.channel1Enabled && parentObj.channel1envelopeSweeps == 0) {\n                //Zombie Volume PAPU Bug:\n                if (((parentObj.memory[0xFF12] ^ data) & 0x8) == 0x8) {\n                    if ((parentObj.memory[0xFF12] & 0x8) == 0) {\n                        if ((parentObj.memory[0xFF12] & 0x7) == 0x7) {\n                            parentObj.channel1envelopeVolume += 2;\n                        }\n                        else {\n                            ++parentObj.channel1envelopeVolume;\n                        }\n                    }\n                    parentObj.channel1envelopeVolume = (16 - parentObj.channel1envelopeVolume) & 0xF;\n                }\n                else if ((parentObj.memory[0xFF12] & 0xF) == 0x8) {\n                    parentObj.channel1envelopeVolume = (1 + parentObj.channel1envelopeVolume) & 0xF;\n                }\n                parentObj.channel1OutputLevelCache();\n            }\n            parentObj.channel1envelopeType = ((data & 0x08) == 0x08);\n            parentObj.memory[0xFF12] = data;\n            parentObj.channel1VolumeEnableCheck();\n        }\n    }\n    //NR13:\n    this.memoryHighWriter[0x13] = this.memoryWriter[0xFF13] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            parentObj.channel1frequency = (parentObj.channel1frequency & 0x700) | data;\n            parentObj.channel1FrequencyTracker = (0x800 - parentObj.channel1frequency) << 2;\n        }\n    }\n    //NR14:\n    this.memoryHighWriter[0x14] = this.memoryWriter[0xFF14] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            parentObj.channel1consecutive = ((data & 0x40) == 0x0);\n            parentObj.channel1frequency = ((data & 0x7) << 8) | (parentObj.channel1frequency & 0xFF);\n            parentObj.channel1FrequencyTracker = (0x800 - parentObj.channel1frequency) << 2;\n            if (data > 0x7F) {\n                //Reload 0xFF10:\n                parentObj.channel1timeSweep = parentObj.channel1lastTimeSweep;\n                parentObj.channel1Swept = false;\n                //Reload 0xFF12:\n                var nr12 = parentObj.memory[0xFF12];\n                parentObj.channel1envelopeVolume = nr12 >> 4;\n                parentObj.channel1OutputLevelCache();\n                parentObj.channel1envelopeSweepsLast = (nr12 & 0x7) - 1;\n                if (parentObj.channel1totalLength == 0) {\n                    parentObj.channel1totalLength = 0x40;\n                }\n                if (parentObj.channel1lastTimeSweep > 0 || parentObj.channel1frequencySweepDivider > 0) {\n                    parentObj.memory[0xFF26] |= 0x1;\n                }\n                else {\n                    parentObj.memory[0xFF26] &= 0xFE;\n                }\n                if ((data & 0x40) == 0x40) {\n                    parentObj.memory[0xFF26] |= 0x1;\n                }\n                parentObj.channel1ShadowFrequency = parentObj.channel1frequency;\n                //Reset frequency overflow check + frequency sweep type check:\n                parentObj.channel1SweepFault = false;\n                //Supposed to run immediately:\n                parentObj.channel1AudioSweepPerformDummy();\n            }\n            parentObj.channel1EnableCheck();\n            parentObj.memory[0xFF14] = data;\n        }\n    }\n    //NR20 (Unused I/O):\n    this.memoryHighWriter[0x15] = this.memoryWriter[0xFF15] = this.cartIgnoreWrite;\n    //NR21:\n    this.memoryHighWriter[0x16] = this.memoryWriter[0xFF16] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled || !parentObj.cGBC) {\n            if (parentObj.soundMasterEnabled) {\n                parentObj.audioJIT();\n            }\n            else {\n                data &= 0x3F;\n            }\n            parentObj.channel2CachedDuty = parentObj.dutyLookup[data >> 6];\n            parentObj.channel2totalLength = 0x40 - (data & 0x3F);\n            parentObj.memory[0xFF16] = data;\n            parentObj.channel2EnableCheck();\n        }\n    }\n    //NR22:\n    this.memoryHighWriter[0x17] = this.memoryWriter[0xFF17] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            if (parentObj.channel2Enabled && parentObj.channel2envelopeSweeps == 0) {\n                //Zombie Volume PAPU Bug:\n                if (((parentObj.memory[0xFF17] ^ data) & 0x8) == 0x8) {\n                    if ((parentObj.memory[0xFF17] & 0x8) == 0) {\n                        if ((parentObj.memory[0xFF17] & 0x7) == 0x7) {\n                            parentObj.channel2envelopeVolume += 2;\n                        }\n                        else {\n                            ++parentObj.channel2envelopeVolume;\n                        }\n                    }\n                    parentObj.channel2envelopeVolume = (16 - parentObj.channel2envelopeVolume) & 0xF;\n                }\n                else if ((parentObj.memory[0xFF17] & 0xF) == 0x8) {\n                    parentObj.channel2envelopeVolume = (1 + parentObj.channel2envelopeVolume) & 0xF;\n                }\n                parentObj.channel2OutputLevelCache();\n            }\n            parentObj.channel2envelopeType = ((data & 0x08) == 0x08);\n            parentObj.memory[0xFF17] = data;\n            parentObj.channel2VolumeEnableCheck();\n        }\n    }\n    //NR23:\n    this.memoryHighWriter[0x18] = this.memoryWriter[0xFF18] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            parentObj.channel2frequency = (parentObj.channel2frequency & 0x700) | data;\n            parentObj.channel2FrequencyTracker = (0x800 - parentObj.channel2frequency) << 2;\n        }\n    }\n    //NR24:\n    this.memoryHighWriter[0x19] = this.memoryWriter[0xFF19] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            if (data > 0x7F) {\n                //Reload 0xFF17:\n                var nr22 = parentObj.memory[0xFF17];\n                parentObj.channel2envelopeVolume = nr22 >> 4;\n                parentObj.channel2OutputLevelCache();\n                parentObj.channel2envelopeSweepsLast = (nr22 & 0x7) - 1;\n                if (parentObj.channel2totalLength == 0) {\n                    parentObj.channel2totalLength = 0x40;\n                }\n                if ((data & 0x40) == 0x40) {\n                    parentObj.memory[0xFF26] |= 0x2;\n                }\n            }\n            parentObj.channel2consecutive = ((data & 0x40) == 0x0);\n            parentObj.channel2frequency = ((data & 0x7) << 8) | (parentObj.channel2frequency & 0xFF);\n            parentObj.channel2FrequencyTracker = (0x800 - parentObj.channel2frequency) << 2;\n            parentObj.memory[0xFF19] = data;\n            parentObj.channel2EnableCheck();\n        }\n    }\n    //NR30:\n    this.memoryHighWriter[0x1A] = this.memoryWriter[0xFF1A] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            if (!parentObj.channel3canPlay && data >= 0x80) {\n                parentObj.channel3lastSampleLookup = 0;\n                parentObj.channel3UpdateCache();\n            }\n            parentObj.channel3canPlay = (data > 0x7F);\n            if (parentObj.channel3canPlay && parentObj.memory[0xFF1A] > 0x7F && !parentObj.channel3consecutive) {\n                parentObj.memory[0xFF26] |= 0x4;\n            }\n            parentObj.memory[0xFF1A] = data;\n            //parentObj.channel3EnableCheck();\n        }\n    }\n    //NR31:\n    this.memoryHighWriter[0x1B] = this.memoryWriter[0xFF1B] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled || !parentObj.cGBC) {\n            if (parentObj.soundMasterEnabled) {\n                parentObj.audioJIT();\n            }\n            parentObj.channel3totalLength = 0x100 - data;\n            parentObj.channel3EnableCheck();\n        }\n    }\n    //NR32:\n    this.memoryHighWriter[0x1C] = this.memoryWriter[0xFF1C] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            data &= 0x60;\n            parentObj.memory[0xFF1C] = data;\n            parentObj.channel3patternType = (data == 0) ? 4 : ((data >> 5) - 1);\n        }\n    }\n    //NR33:\n    this.memoryHighWriter[0x1D] = this.memoryWriter[0xFF1D] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            parentObj.channel3frequency = (parentObj.channel3frequency & 0x700) | data;\n            parentObj.channel3FrequencyPeriod = (0x800 - parentObj.channel3frequency) << 1;\n        }\n    }\n    //NR34:\n    this.memoryHighWriter[0x1E] = this.memoryWriter[0xFF1E] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            if (data > 0x7F) {\n                if (parentObj.channel3totalLength == 0) {\n                    parentObj.channel3totalLength = 0x100;\n                }\n                parentObj.channel3lastSampleLookup = 0;\n                if ((data & 0x40) == 0x40) {\n                    parentObj.memory[0xFF26] |= 0x4;\n                }\n            }\n            parentObj.channel3consecutive = ((data & 0x40) == 0x0);\n            parentObj.channel3frequency = ((data & 0x7) << 8) | (parentObj.channel3frequency & 0xFF);\n            parentObj.channel3FrequencyPeriod = (0x800 - parentObj.channel3frequency) << 1;\n            parentObj.memory[0xFF1E] = data;\n            parentObj.channel3EnableCheck();\n        }\n    }\n    //NR40 (Unused I/O):\n    this.memoryHighWriter[0x1F] = this.memoryWriter[0xFF1F] = this.cartIgnoreWrite;\n    //NR41:\n    this.memoryHighWriter[0x20] = this.memoryWriter[0xFF20] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled || !parentObj.cGBC) {\n            if (parentObj.soundMasterEnabled) {\n                parentObj.audioJIT();\n            }\n            parentObj.channel4totalLength = 0x40 - (data & 0x3F);\n            parentObj.channel4EnableCheck();\n        }\n    }\n    //NR42:\n    this.memoryHighWriter[0x21] = this.memoryWriter[0xFF21] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            if (parentObj.channel4Enabled && parentObj.channel4envelopeSweeps == 0) {\n                //Zombie Volume PAPU Bug:\n                if (((parentObj.memory[0xFF21] ^ data) & 0x8) == 0x8) {\n                    if ((parentObj.memory[0xFF21] & 0x8) == 0) {\n                        if ((parentObj.memory[0xFF21] & 0x7) == 0x7) {\n                            parentObj.channel4envelopeVolume += 2;\n                        }\n                        else {\n                            ++parentObj.channel4envelopeVolume;\n                        }\n                    }\n                    parentObj.channel4envelopeVolume = (16 - parentObj.channel4envelopeVolume) & 0xF;\n                }\n                else if ((parentObj.memory[0xFF21] & 0xF) == 0x8) {\n                    parentObj.channel4envelopeVolume = (1 + parentObj.channel4envelopeVolume) & 0xF;\n                }\n                parentObj.channel4currentVolume = parentObj.channel4envelopeVolume << parentObj.channel4VolumeShifter;\n            }\n            parentObj.channel4envelopeType = ((data & 0x08) == 0x08);\n            parentObj.memory[0xFF21] = data;\n            parentObj.channel4UpdateCache();\n            parentObj.channel4VolumeEnableCheck();\n        }\n    }\n    //NR43:\n    this.memoryHighWriter[0x22] = this.memoryWriter[0xFF22] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            parentObj.channel4FrequencyPeriod = Math.max((data & 0x7) << 4, 8) << (data >> 4);\n            var bitWidth = (data & 0x8);\n            if ((bitWidth == 0x8 && parentObj.channel4BitRange == 0x7FFF) || (bitWidth == 0 && parentObj.channel4BitRange == 0x7F)) {\n                parentObj.channel4lastSampleLookup = 0;\n                parentObj.channel4BitRange = (bitWidth == 0x8) ? 0x7F : 0x7FFF;\n                parentObj.channel4VolumeShifter = (bitWidth == 0x8) ? 7 : 15;\n                parentObj.channel4currentVolume = parentObj.channel4envelopeVolume << parentObj.channel4VolumeShifter;\n                parentObj.noiseSampleTable = (bitWidth == 0x8) ? parentObj.LSFR7Table : parentObj.LSFR15Table;\n            }\n            parentObj.memory[0xFF22] = data;\n            parentObj.channel4UpdateCache();\n        }\n    }\n    //NR44:\n    this.memoryHighWriter[0x23] = this.memoryWriter[0xFF23] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled) {\n            parentObj.audioJIT();\n            parentObj.memory[0xFF23] = data;\n            parentObj.channel4consecutive = ((data & 0x40) == 0x0);\n            if (data > 0x7F) {\n                var nr42 = parentObj.memory[0xFF21];\n                parentObj.channel4envelopeVolume = nr42 >> 4;\n                parentObj.channel4currentVolume = parentObj.channel4envelopeVolume << parentObj.channel4VolumeShifter;\n                parentObj.channel4envelopeSweepsLast = (nr42 & 0x7) - 1;\n                if (parentObj.channel4totalLength == 0) {\n                    parentObj.channel4totalLength = 0x40;\n                }\n                if ((data & 0x40) == 0x40) {\n                    parentObj.memory[0xFF26] |= 0x8;\n                }\n            }\n            parentObj.channel4EnableCheck();\n        }\n    }\n    //NR50:\n    this.memoryHighWriter[0x24] = this.memoryWriter[0xFF24] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled && parentObj.memory[0xFF24] != data) {\n            parentObj.audioJIT();\n            parentObj.memory[0xFF24] = data;\n            parentObj.VinLeftChannelMasterVolume = ((data >> 4) & 0x07) + 1;\n            parentObj.VinRightChannelMasterVolume = (data & 0x07) + 1;\n            parentObj.mixerOutputLevelCache();\n        }\n    }\n    //NR51:\n    this.memoryHighWriter[0x25] = this.memoryWriter[0xFF25] = function (parentObj, address, data) {\n        if (parentObj.soundMasterEnabled && parentObj.memory[0xFF25] != data) {\n            parentObj.audioJIT();\n            parentObj.memory[0xFF25] = data;\n            parentObj.rightChannel1 = ((data & 0x01) == 0x01);\n            parentObj.rightChannel2 = ((data & 0x02) == 0x02);\n            parentObj.rightChannel3 = ((data & 0x04) == 0x04);\n            parentObj.rightChannel4 = ((data & 0x08) == 0x08);\n            parentObj.leftChannel1 = ((data & 0x10) == 0x10);\n            parentObj.leftChannel2 = ((data & 0x20) == 0x20);\n            parentObj.leftChannel3 = ((data & 0x40) == 0x40);\n            parentObj.leftChannel4 = (data > 0x7F);\n            parentObj.channel1OutputLevelCache();\n            parentObj.channel2OutputLevelCache();\n            parentObj.channel3OutputLevelCache();\n            parentObj.channel4OutputLevelCache();\n        }\n    }\n    //NR52:\n    this.memoryHighWriter[0x26] = this.memoryWriter[0xFF26] = function (parentObj, address, data) {\n        parentObj.audioJIT();\n        if (!parentObj.soundMasterEnabled && data > 0x7F) {\n            parentObj.memory[0xFF26] = 0x80;\n            parentObj.soundMasterEnabled = true;\n            parentObj.initializeAudioStartState();\n        }\n        else if (parentObj.soundMasterEnabled && data < 0x80) {\n            parentObj.memory[0xFF26] = 0;\n            parentObj.soundMasterEnabled = false;\n            //GBDev wiki says the registers are written with zeros on power off:\n            for (var index = 0xFF10; index < 0xFF26; index++) {\n                parentObj.memoryWriter[index](parentObj, index, 0);\n            }\n        }\n    }\n    //0xFF27 to 0xFF2F don't do anything...\n    this.memoryHighWriter[0x27] = this.memoryWriter[0xFF27] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x28] = this.memoryWriter[0xFF28] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x29] = this.memoryWriter[0xFF29] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x2A] = this.memoryWriter[0xFF2A] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x2B] = this.memoryWriter[0xFF2B] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x2C] = this.memoryWriter[0xFF2C] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x2D] = this.memoryWriter[0xFF2D] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x2E] = this.memoryWriter[0xFF2E] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x2F] = this.memoryWriter[0xFF2F] = this.cartIgnoreWrite;\n    //WAVE PCM RAM:\n    this.memoryHighWriter[0x30] = this.memoryWriter[0xFF30] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0, data);\n    }\n    this.memoryHighWriter[0x31] = this.memoryWriter[0xFF31] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x1, data);\n    }\n    this.memoryHighWriter[0x32] = this.memoryWriter[0xFF32] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x2, data);\n    }\n    this.memoryHighWriter[0x33] = this.memoryWriter[0xFF33] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x3, data);\n    }\n    this.memoryHighWriter[0x34] = this.memoryWriter[0xFF34] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x4, data);\n    }\n    this.memoryHighWriter[0x35] = this.memoryWriter[0xFF35] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x5, data);\n    }\n    this.memoryHighWriter[0x36] = this.memoryWriter[0xFF36] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x6, data);\n    }\n    this.memoryHighWriter[0x37] = this.memoryWriter[0xFF37] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x7, data);\n    }\n    this.memoryHighWriter[0x38] = this.memoryWriter[0xFF38] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x8, data);\n    }\n    this.memoryHighWriter[0x39] = this.memoryWriter[0xFF39] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0x9, data);\n    }\n    this.memoryHighWriter[0x3A] = this.memoryWriter[0xFF3A] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0xA, data);\n    }\n    this.memoryHighWriter[0x3B] = this.memoryWriter[0xFF3B] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0xB, data);\n    }\n    this.memoryHighWriter[0x3C] = this.memoryWriter[0xFF3C] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0xC, data);\n    }\n    this.memoryHighWriter[0x3D] = this.memoryWriter[0xFF3D] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0xD, data);\n    }\n    this.memoryHighWriter[0x3E] = this.memoryWriter[0xFF3E] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0xE, data);\n    }\n    this.memoryHighWriter[0x3F] = this.memoryWriter[0xFF3F] = function (parentObj, address, data) {\n        parentObj.channel3WriteRAM(0xF, data);\n    }\n    //SCY\n    this.memoryHighWriter[0x42] = this.memoryWriter[0xFF42] = function (parentObj, address, data) {\n        if (parentObj.backgroundY != data) {\n            parentObj.midScanLineJIT();\n            parentObj.backgroundY = data;\n        }\n    }\n    //SCX\n    this.memoryHighWriter[0x43] = this.memoryWriter[0xFF43] = function (parentObj, address, data) {\n        if (parentObj.backgroundX != data) {\n            parentObj.midScanLineJIT();\n            parentObj.backgroundX = data;\n        }\n    }\n    //LY\n    this.memoryHighWriter[0x44] = this.memoryWriter[0xFF44] = function (parentObj, address, data) {\n        //Read Only:\n        if (parentObj.LCDisOn) {\n            //Gambatte says to do this:\n            parentObj.modeSTAT = 2;\n            parentObj.midScanlineOffset = -1;\n            parentObj.totalLinesPassed = parentObj.currentX = parentObj.queuedScanLines = parentObj.lastUnrenderedLine = parentObj.LCDTicks = parentObj.STATTracker = parentObj.actualScanLine = parentObj.memory[0xFF44] = 0;\n        }\n    }\n    //LYC\n    this.memoryHighWriter[0x45] = this.memoryWriter[0xFF45] = function (parentObj, address, data) {\n        if (parentObj.memory[0xFF45] != data) {\n            parentObj.memory[0xFF45] = data;\n            if (parentObj.LCDisOn) {\n                parentObj.matchLYC();   //Get the compare of the first scan line.\n            }\n        }\n    }\n    //WY\n    this.memoryHighWriter[0x4A] = this.memoryWriter[0xFF4A] = function (parentObj, address, data) {\n        if (parentObj.windowY != data) {\n            parentObj.midScanLineJIT();\n            parentObj.windowY = data;\n        }\n    }\n    //WX\n    this.memoryHighWriter[0x4B] = this.memoryWriter[0xFF4B] = function (parentObj, address, data) {\n        if (parentObj.memory[0xFF4B] != data) {\n            parentObj.midScanLineJIT();\n            parentObj.memory[0xFF4B] = data;\n            parentObj.windowX = data - 7;\n        }\n    }\n    this.memoryHighWriter[0x72] = this.memoryWriter[0xFF72] = function (parentObj, address, data) {\n        parentObj.memory[0xFF72] = data;\n    }\n    this.memoryHighWriter[0x73] = this.memoryWriter[0xFF73] = function (parentObj, address, data) {\n        parentObj.memory[0xFF73] = data;\n    }\n    this.memoryHighWriter[0x75] = this.memoryWriter[0xFF75] = function (parentObj, address, data) {\n        parentObj.memory[0xFF75] = data;\n    }\n    this.memoryHighWriter[0x76] = this.memoryWriter[0xFF76] = this.cartIgnoreWrite;\n    this.memoryHighWriter[0x77] = this.memoryWriter[0xFF77] = this.cartIgnoreWrite;\n    //IE (Interrupt Enable)\n    this.memoryHighWriter[0xFF] = this.memoryWriter[0xFFFF] = function (parentObj, address, data) {\n        parentObj.interruptsEnabled = data;\n        parentObj.checkIRQMatching();\n    }\n    this.recompileModelSpecificIOWriteHandling();\n    this.recompileBootIOWriteHandling();\n}\nGameBoyCore.prototype.recompileModelSpecificIOWriteHandling = function () {\n    if (this.cGBC) {\n        //GameBoy Color Specific I/O:\n        //SC (Serial Transfer Control Register)\n        this.memoryHighWriter[0x2] = this.memoryWriter[0xFF02] = function (parentObj, address, data) {\n            if (((data & 0x1) == 0x1)) {\n                //Internal clock:\n                parentObj.memory[0xFF02] = (data & 0x7F);\n                parentObj.serialTimer = ((data & 0x2) == 0) ? 4096 : 128;   //Set the Serial IRQ counter.\n                parentObj.serialShiftTimer = parentObj.serialShiftTimerAllocated = ((data & 0x2) == 0) ? 512 : 16;  //Set the transfer data shift counter.\n            }\n            else {\n                //External clock:\n                parentObj.memory[0xFF02] = data;\n                parentObj.serialShiftTimer = parentObj.serialShiftTimerAllocated = parentObj.serialTimer = 0;   //Zero the timers, since we're emulating as if nothing is connected.\n            }\n        }\n        this.memoryHighWriter[0x40] = this.memoryWriter[0xFF40] = function (parentObj, address, data) {\n            if (parentObj.memory[0xFF40] != data) {\n                parentObj.midScanLineJIT();\n                var temp_var = (data > 0x7F);\n                if (temp_var != parentObj.LCDisOn) {\n                    //When the display mode changes...\n                    parentObj.LCDisOn = temp_var;\n                    parentObj.memory[0xFF41] &= 0x78;\n                    parentObj.midScanlineOffset = -1;\n                    parentObj.totalLinesPassed = parentObj.currentX = parentObj.queuedScanLines = parentObj.lastUnrenderedLine = parentObj.STATTracker = parentObj.LCDTicks = parentObj.actualScanLine = parentObj.memory[0xFF44] = 0;\n                    if (parentObj.LCDisOn) {\n                        parentObj.modeSTAT = 2;\n                        parentObj.matchLYC();   //Get the compare of the first scan line.\n                        parentObj.LCDCONTROL = parentObj.LINECONTROL;\n                    }\n                    else {\n                        parentObj.modeSTAT = 0;\n                        parentObj.LCDCONTROL = parentObj.DISPLAYOFFCONTROL;\n                        parentObj.DisplayShowOff();\n                    }\n                    parentObj.interruptsRequested &= 0xFD;\n                }\n                parentObj.gfxWindowCHRBankPosition = ((data & 0x40) == 0x40) ? 0x400 : 0;\n                parentObj.gfxWindowDisplay = ((data & 0x20) == 0x20);\n                parentObj.gfxBackgroundBankOffset = ((data & 0x10) == 0x10) ? 0 : 0x80;\n                parentObj.gfxBackgroundCHRBankPosition = ((data & 0x08) == 0x08) ? 0x400 : 0;\n                parentObj.gfxSpriteNormalHeight = ((data & 0x04) == 0);\n                parentObj.gfxSpriteShow = ((data & 0x02) == 0x02);\n                parentObj.BGPriorityEnabled = ((data & 0x01) == 0x01);\n                parentObj.priorityFlaggingPathRebuild();    //Special case the priority flagging as an optimization.\n                parentObj.memory[0xFF40] = data;\n            }\n        }\n        this.memoryHighWriter[0x41] = this.memoryWriter[0xFF41] = function (parentObj, address, data) {\n            parentObj.LYCMatchTriggerSTAT = ((data & 0x40) == 0x40);\n            parentObj.mode2TriggerSTAT = ((data & 0x20) == 0x20);\n            parentObj.mode1TriggerSTAT = ((data & 0x10) == 0x10);\n            parentObj.mode0TriggerSTAT = ((data & 0x08) == 0x08);\n            parentObj.memory[0xFF41] = data & 0x78;\n        }\n        this.memoryHighWriter[0x46] = this.memoryWriter[0xFF46] = function (parentObj, address, data) {\n            parentObj.memory[0xFF46] = data;\n            if (data < 0xE0) {\n                data <<= 8;\n                address = 0xFE00;\n                var stat = parentObj.modeSTAT;\n                parentObj.modeSTAT = 0;\n                var newData = 0;\n                do {\n                    newData = parentObj.memoryReader[data](parentObj, data++);\n                    if (newData != parentObj.memory[address]) {\n                        //JIT the graphics render queue:\n                        parentObj.modeSTAT = stat;\n                        parentObj.graphicsJIT();\n                        parentObj.modeSTAT = 0;\n                        parentObj.memory[address++] = newData;\n                        break;\n                    }\n                } while (++address < 0xFEA0);\n                if (address < 0xFEA0) {\n                    do {\n                        parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                        parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                        parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                        parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                    } while (address < 0xFEA0);\n                }\n                parentObj.modeSTAT = stat;\n            }\n        }\n        //KEY1\n        this.memoryHighWriter[0x4D] = this.memoryWriter[0xFF4D] = function (parentObj, address, data) {\n            parentObj.memory[0xFF4D] = (data & 0x7F) | (parentObj.memory[0xFF4D] & 0x80);\n        }\n        this.memoryHighWriter[0x4F] = this.memoryWriter[0xFF4F] = function (parentObj, address, data) {\n            parentObj.currVRAMBank = data & 0x01;\n            if (parentObj.currVRAMBank > 0) {\n                parentObj.BGCHRCurrentBank = parentObj.BGCHRBank2;\n            }\n            else {\n                parentObj.BGCHRCurrentBank = parentObj.BGCHRBank1;\n            }\n            //Only writable by GBC.\n        }\n        this.memoryHighWriter[0x51] = this.memoryWriter[0xFF51] = function (parentObj, address, data) {\n            if (!parentObj.hdmaRunning) {\n                parentObj.memory[0xFF51] = data;\n            }\n        }\n        this.memoryHighWriter[0x52] = this.memoryWriter[0xFF52] = function (parentObj, address, data) {\n            if (!parentObj.hdmaRunning) {\n                parentObj.memory[0xFF52] = data & 0xF0;\n            }\n        }\n        this.memoryHighWriter[0x53] = this.memoryWriter[0xFF53] = function (parentObj, address, data) {\n            if (!parentObj.hdmaRunning) {\n                parentObj.memory[0xFF53] = data & 0x1F;\n            }\n        }\n        this.memoryHighWriter[0x54] = this.memoryWriter[0xFF54] = function (parentObj, address, data) {\n            if (!parentObj.hdmaRunning) {\n                parentObj.memory[0xFF54] = data & 0xF0;\n            }\n        }\n        this.memoryHighWriter[0x55] = this.memoryWriter[0xFF55] = function (parentObj, address, data) {\n            if (!parentObj.hdmaRunning) {\n                if ((data & 0x80) == 0) {\n                    //DMA\n                    parentObj.DMAWrite((data & 0x7F) + 1);\n                    parentObj.memory[0xFF55] = 0xFF;    //Transfer completed.\n                }\n                else {\n                    //H-Blank DMA\n                    parentObj.hdmaRunning = true;\n                    parentObj.memory[0xFF55] = data & 0x7F;\n                }\n            }\n            else if ((data & 0x80) == 0) {\n                //Stop H-Blank DMA\n                parentObj.hdmaRunning = false;\n                parentObj.memory[0xFF55] |= 0x80;\n            }\n            else {\n                parentObj.memory[0xFF55] = data & 0x7F;\n            }\n        }\n        this.memoryHighWriter[0x68] = this.memoryWriter[0xFF68] = function (parentObj, address, data) {\n            parentObj.memory[0xFF69] = parentObj.gbcBGRawPalette[data & 0x3F];\n            parentObj.memory[0xFF68] = data;\n        }\n        this.memoryHighWriter[0x69] = this.memoryWriter[0xFF69] = function (parentObj, address, data) {\n            parentObj.updateGBCBGPalette(parentObj.memory[0xFF68] & 0x3F, data);\n            if (parentObj.memory[0xFF68] > 0x7F) { // high bit = autoincrement\n                var next = ((parentObj.memory[0xFF68] + 1) & 0x3F);\n                parentObj.memory[0xFF68] = (next | 0x80);\n                parentObj.memory[0xFF69] = parentObj.gbcBGRawPalette[next];\n            }\n            else {\n                parentObj.memory[0xFF69] = data;\n            }\n        }\n        this.memoryHighWriter[0x6A] = this.memoryWriter[0xFF6A] = function (parentObj, address, data) {\n            parentObj.memory[0xFF6B] = parentObj.gbcOBJRawPalette[data & 0x3F];\n            parentObj.memory[0xFF6A] = data;\n        }\n        this.memoryHighWriter[0x6B] = this.memoryWriter[0xFF6B] = function (parentObj, address, data) {\n            parentObj.updateGBCOBJPalette(parentObj.memory[0xFF6A] & 0x3F, data);\n            if (parentObj.memory[0xFF6A] > 0x7F) { // high bit = autoincrement\n                var next = ((parentObj.memory[0xFF6A] + 1) & 0x3F);\n                parentObj.memory[0xFF6A] = (next | 0x80);\n                parentObj.memory[0xFF6B] = parentObj.gbcOBJRawPalette[next];\n            }\n            else {\n                parentObj.memory[0xFF6B] = data;\n            }\n        }\n        //SVBK\n        this.memoryHighWriter[0x70] = this.memoryWriter[0xFF70] = function (parentObj, address, data) {\n            var addressCheck = (parentObj.memory[0xFF51] << 8) | parentObj.memory[0xFF52];  //Cannot change the RAM bank while WRAM is the source of a running HDMA.\n            if (!parentObj.hdmaRunning || addressCheck < 0xD000 || addressCheck >= 0xE000) {\n                parentObj.gbcRamBank = Math.max(data & 0x07, 1);    //Bank range is from 1-7\n                parentObj.gbcRamBankPosition = ((parentObj.gbcRamBank - 1) << 12) - 0xD000;\n                parentObj.gbcRamBankPositionECHO = parentObj.gbcRamBankPosition - 0x2000;\n            }\n            parentObj.memory[0xFF70] = data;    //Bit 6 cannot be written to.\n        }\n        this.memoryHighWriter[0x74] = this.memoryWriter[0xFF74] = function (parentObj, address, data) {\n            parentObj.memory[0xFF74] = data;\n        }\n    }\n    else {\n        //Fill in the GameBoy Color I/O registers as normal RAM for GameBoy compatibility:\n        //SC (Serial Transfer Control Register)\n        this.memoryHighWriter[0x2] = this.memoryWriter[0xFF02] = function (parentObj, address, data) {\n            if (((data & 0x1) == 0x1)) {\n                //Internal clock:\n                parentObj.memory[0xFF02] = (data & 0x7F);\n                parentObj.serialTimer = 4096;   //Set the Serial IRQ counter.\n                parentObj.serialShiftTimer = parentObj.serialShiftTimerAllocated = 512; //Set the transfer data shift counter.\n            }\n            else {\n                //External clock:\n                parentObj.memory[0xFF02] = data;\n                parentObj.serialShiftTimer = parentObj.serialShiftTimerAllocated = parentObj.serialTimer = 0;   //Zero the timers, since we're emulating as if nothing is connected.\n            }\n        }\n        this.memoryHighWriter[0x40] = this.memoryWriter[0xFF40] = function (parentObj, address, data) {\n            if (parentObj.memory[0xFF40] != data) {\n                parentObj.midScanLineJIT();\n                var temp_var = (data > 0x7F);\n                if (temp_var != parentObj.LCDisOn) {\n                    //When the display mode changes...\n                    parentObj.LCDisOn = temp_var;\n                    parentObj.memory[0xFF41] &= 0x78;\n                    parentObj.midScanlineOffset = -1;\n                    parentObj.totalLinesPassed = parentObj.currentX = parentObj.queuedScanLines = parentObj.lastUnrenderedLine = parentObj.STATTracker = parentObj.LCDTicks = parentObj.actualScanLine = parentObj.memory[0xFF44] = 0;\n                    if (parentObj.LCDisOn) {\n                        parentObj.modeSTAT = 2;\n                        parentObj.matchLYC();   //Get the compare of the first scan line.\n                        parentObj.LCDCONTROL = parentObj.LINECONTROL;\n                    }\n                    else {\n                        parentObj.modeSTAT = 0;\n                        parentObj.LCDCONTROL = parentObj.DISPLAYOFFCONTROL;\n                        parentObj.DisplayShowOff();\n                    }\n                    parentObj.interruptsRequested &= 0xFD;\n                }\n                parentObj.gfxWindowCHRBankPosition = ((data & 0x40) == 0x40) ? 0x400 : 0;\n                parentObj.gfxWindowDisplay = (data & 0x20) == 0x20;\n                parentObj.gfxBackgroundBankOffset = ((data & 0x10) == 0x10) ? 0 : 0x80;\n                parentObj.gfxBackgroundCHRBankPosition = ((data & 0x08) == 0x08) ? 0x400 : 0;\n                parentObj.gfxSpriteNormalHeight = ((data & 0x04) == 0);\n                parentObj.gfxSpriteShow = (data & 0x02) == 0x02;\n                parentObj.bgEnabled = ((data & 0x01) == 0x01);\n                parentObj.memory[0xFF40] = data;\n            }\n        }\n        this.memoryHighWriter[0x41] = this.memoryWriter[0xFF41] = function (parentObj, address, data) {\n            parentObj.LYCMatchTriggerSTAT = ((data & 0x40) == 0x40);\n            parentObj.mode2TriggerSTAT = ((data & 0x20) == 0x20);\n            parentObj.mode1TriggerSTAT = ((data & 0x10) == 0x10);\n            parentObj.mode0TriggerSTAT = ((data & 0x08) == 0x08);\n            parentObj.memory[0xFF41] = data & 0x78;\n            if ((!parentObj.usedBootROM || !parentObj.usedGBCBootROM) && parentObj.LCDisOn && parentObj.modeSTAT < 2) {\n                parentObj.interruptsRequested |= 0x2;\n                parentObj.checkIRQMatching();\n            }\n        }\n        this.memoryHighWriter[0x46] = this.memoryWriter[0xFF46] = function (parentObj, address, data) {\n            parentObj.memory[0xFF46] = data;\n            if (data > 0x7F && data < 0xE0) {   //DMG cannot DMA from the ROM banks.\n                data <<= 8;\n                address = 0xFE00;\n                var stat = parentObj.modeSTAT;\n                parentObj.modeSTAT = 0;\n                var newData = 0;\n                do {\n                    newData = parentObj.memoryReader[data](parentObj, data++);\n                    if (newData != parentObj.memory[address]) {\n                        //JIT the graphics render queue:\n                        parentObj.modeSTAT = stat;\n                        parentObj.graphicsJIT();\n                        parentObj.modeSTAT = 0;\n                        parentObj.memory[address++] = newData;\n                        break;\n                    }\n                } while (++address < 0xFEA0);\n                if (address < 0xFEA0) {\n                    do {\n                        parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                        parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                        parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                        parentObj.memory[address++] = parentObj.memoryReader[data](parentObj, data++);\n                    } while (address < 0xFEA0);\n                }\n                parentObj.modeSTAT = stat;\n            }\n        }\n        this.memoryHighWriter[0x47] = this.memoryWriter[0xFF47] = function (parentObj, address, data) {\n            if (parentObj.memory[0xFF47] != data) {\n                parentObj.midScanLineJIT();\n                parentObj.updateGBBGPalette(data);\n                parentObj.memory[0xFF47] = data;\n            }\n        }\n        this.memoryHighWriter[0x48] = this.memoryWriter[0xFF48] = function (parentObj, address, data) {\n            if (parentObj.memory[0xFF48] != data) {\n                parentObj.midScanLineJIT();\n                parentObj.updateGBOBJPalette(0, data);\n                parentObj.memory[0xFF48] = data;\n            }\n        }\n        this.memoryHighWriter[0x49] = this.memoryWriter[0xFF49] = function (parentObj, address, data) {\n            if (parentObj.memory[0xFF49] != data) {\n                parentObj.midScanLineJIT();\n                parentObj.updateGBOBJPalette(4, data);\n                parentObj.memory[0xFF49] = data;\n            }\n        }\n        this.memoryHighWriter[0x4D] = this.memoryWriter[0xFF4D] = function (parentObj, address, data) {\n            parentObj.memory[0xFF4D] = data;\n        }\n        this.memoryHighWriter[0x4F] = this.memoryWriter[0xFF4F] = this.cartIgnoreWrite; //Not writable in DMG mode.\n        this.memoryHighWriter[0x55] = this.memoryWriter[0xFF55] = this.cartIgnoreWrite;\n        this.memoryHighWriter[0x68] = this.memoryWriter[0xFF68] = this.cartIgnoreWrite;\n        this.memoryHighWriter[0x69] = this.memoryWriter[0xFF69] = this.cartIgnoreWrite;\n        this.memoryHighWriter[0x6A] = this.memoryWriter[0xFF6A] = this.cartIgnoreWrite;\n        this.memoryHighWriter[0x6B] = this.memoryWriter[0xFF6B] = this.cartIgnoreWrite;\n        this.memoryHighWriter[0x6C] = this.memoryWriter[0xFF6C] = this.cartIgnoreWrite;\n        this.memoryHighWriter[0x70] = this.memoryWriter[0xFF70] = this.cartIgnoreWrite;\n        this.memoryHighWriter[0x74] = this.memoryWriter[0xFF74] = this.cartIgnoreWrite;\n    }\n}\nGameBoyCore.prototype.recompileBootIOWriteHandling = function () {\n    //Boot I/O Registers:\n    if (this.inBootstrap) {\n        this.memoryHighWriter[0x50] = this.memoryWriter[0xFF50] = function (parentObj, address, data) {\n            cout(\"Boot ROM reads blocked: Bootstrap process has ended.\", 0);\n            parentObj.inBootstrap = false;\n            parentObj.disableBootROM();         //Fill in the boot ROM ranges with ROM  bank 0 ROM ranges\n            parentObj.memory[0xFF50] = data;    //Bits are sustained in memory?\n        }\n        if (this.cGBC) {\n            this.memoryHighWriter[0x6C] = this.memoryWriter[0xFF6C] = function (parentObj, address, data) {\n                if (parentObj.inBootstrap) {\n                    parentObj.cGBC = ((data & 0x1) == 0);\n                    //Exception to the GBC identifying code:\n                    if (parentObj.name + parentObj.gameCode + parentObj.ROM[0x143] == \"Game and Watch 50\") {\n                        parentObj.cGBC = true;\n                        cout(\"Created a boot exception for Game and Watch Gallery 2 (GBC ID byte is wrong on the cartridge).\", 1);\n                    }\n                    cout(\"Booted to GBC Mode: \" + parentObj.cGBC, 0);\n                }\n                parentObj.memory[0xFF6C] = data;\n            }\n        }\n    }\n    else {\n        //Lockout the ROMs from accessing the BOOT ROM control register:\n        this.memoryHighWriter[0x50] = this.memoryWriter[0xFF50] = this.cartIgnoreWrite;\n    }\n}\n\n\n\n\n//Helper Functions\nGameBoyCore.prototype.toTypedArray = function (baseArray, memtype) {\n    try {\n        if (settings[5]) {\n            return baseArray;\n        }\n        if (!baseArray || !baseArray.length) {\n            return [];\n        }\n        var length = baseArray.length;\n        switch (memtype) {\n            case \"uint8\":\n                var typedArrayTemp = new Uint8Array(length);\n                break;\n            case \"int8\":\n                var typedArrayTemp = new Int8Array(length);\n                break;\n            case \"int32\":\n                var typedArrayTemp = new Int32Array(length);\n                break;\n            case \"float32\":\n                var typedArrayTemp = new Float32Array(length);\n        }\n        for (var index = 0; index < length; index++) {\n            typedArrayTemp[index] = baseArray[index];\n        }\n        return typedArrayTemp;\n    }\n    catch (error) {\n        cout(\"Could not convert an array to a typed array: \" + error.message, 1);\n        return baseArray;\n    }\n}\nGameBoyCore.prototype.fromTypedArray = function (baseArray) {\n    try {\n        if (!baseArray || !baseArray.length) {\n            return [];\n        }\n        var arrayTemp = [];\n        for (var index = 0; index < baseArray.length; ++index) {\n            arrayTemp[index] = baseArray[index];\n        }\n        return arrayTemp;\n    }\n    catch (error) {\n        cout(\"Conversion from a typed array failed: \" + error.message, 1);\n        return baseArray;\n    }\n}\nGameBoyCore.prototype.getTypedArray = function (length, defaultValue, numberType) {\n    try {\n        if (settings[5]) {\n            throw(new Error(\"Settings forced typed arrays to be disabled.\"));\n        }\n        switch (numberType) {\n            case \"int8\":\n                var arrayHandle = new Int8Array(length);\n                break;\n            case \"uint8\":\n                var arrayHandle = new Uint8Array(length);\n                break;\n            case \"int32\":\n                var arrayHandle = new Int32Array(length);\n                break;\n            case \"float32\":\n                var arrayHandle = new Float32Array(length);\n        }\n        if (defaultValue != 0) {\n            var index = 0;\n            while (index < length) {\n                arrayHandle[index++] = defaultValue;\n            }\n        }\n    }\n    catch (error) {\n        cout(\"Could not convert an array to a typed array: \" + error.message, 1);\n        var arrayHandle = [];\n        var index = 0;\n        while (index < length) {\n            arrayHandle[index++] = defaultValue;\n        }\n    }\n    return arrayHandle;\n}\n\nmodule.exports = GameBoyCore;\n\n//  LocalWords:  saveSRAMState\n","function Instance(ROMImage) {\n\n\t//My added variables--------------\n\tthis.frameDone = false;\n\tthis.currentScreen = []; //this.currentScreenContents;\n\tthis.lastScreen = []; //A copy of the last frame's screen.\n\tthis.partialScreen = {}; //An object with the differences from the last screen.\n\n\n\t//Params, etc...\n\tthis.currentFrame = [];\t\t\t\t\t\t//Array of the most recent frame.\n\tthis.drawContext = null;\t\t\t\t\t// LCD Context\n\tthis.ROMImage = ROMImage;\t\t\t\t\t//The game's ROM. \n\t//CPU Registers and Flags:\n\tthis.registerA = 0x01; \t\t\t\t\t\t//Register A (Accumulator)\n\tthis.FZero = true; \t\t\t\t\t\t\t//Register F  - Result was zero\n\tthis.FSubtract = false;\t\t\t\t\t\t//Register F  - Subtraction was executed\n\tthis.FHalfCarry = true;\t\t\t\t\t\t//Register F  - Half carry or half borrow\n\tthis.FCarry = true;\t\t\t\t\t\t\t//Register F  - Carry or borrow\n\tthis.registerB = 0x00;\t\t\t\t\t\t//Register B\n\tthis.registerC = 0x13;\t\t\t\t\t\t//Register C\n\tthis.registerD = 0x00;\t\t\t\t\t\t//Register D\n\tthis.registerE = 0xD8;\t\t\t\t\t\t//Register E\n\tthis.registersHL = 0x014D;\t\t\t\t\t//Registers H and L combined\n\tthis.stackPointer = 0xFFFE;\t\t\t\t\t//Stack Pointer\n\tthis.programCounter = 0x0100;\t\t\t\t//Program Counter\n\t//Some CPU Emulation State Variables:\n\tthis.CPUCyclesTotal = 0;\t\t\t\t\t//Relative CPU clocking to speed set, rounded appropriately.\n\tthis.CPUCyclesTotalBase = 0;\t\t\t\t//Relative CPU clocking to speed set base.\n\tthis.CPUCyclesTotalCurrent = 0;\t\t\t\t//Relative CPU clocking to speed set, the directly used value.\n\tthis.CPUCyclesTotalRoundoff = 0;\t\t\t//Clocking per iteration rounding catch.\n\tthis.baseCPUCyclesPerIteration\t= 0;\t\t//CPU clocks per iteration at 1x speed.\n\tthis.remainingClocks = 0;\t\t\t\t\t//HALT clocking overrun carry over.\n\tthis.inBootstrap = true;\t\t\t\t\t//Whether we're in the GBC boot ROM.\n\tthis.usedBootROM = false;\t\t\t\t\t//Updated upon ROM loading...\n\tthis.usedGBCBootROM = false;\t\t\t\t//Did we boot to the GBC boot ROM?\n\tthis.halt = false;\t\t\t\t\t\t\t//Has the CPU been suspended until the next interrupt?\n\tthis.skipPCIncrement = false;\t\t\t\t//Did we trip the DMG Halt bug?\n\tthis.stopEmulator = 3;\t\t\t\t\t\t//Has the emulation been paused or a frame has ended?\n\tthis.IME = true;\t\t\t\t\t\t\t//Are interrupts enabled?\n\tthis.IRQLineMatched = 0;\t\t\t\t\t//CPU IRQ assertion.\n\tthis.interruptsRequested = 0;\t\t\t\t//IF Register\n\tthis.interruptsEnabled = 0;\t\t\t\t\t//IE Register\n\tthis.hdmaRunning = false;\t\t\t\t\t//HDMA Transfer Flag - GBC only\n\tthis.CPUTicks = 0;\t\t\t\t\t\t\t//The number of clock cycles emulated.\n\tthis.doubleSpeedShifter = 0;\t\t\t\t//GBC double speed clocking shifter.\n\tthis.JoyPad = 0xFF;\t\t\t\t\t\t\t//Joypad State (two four-bit states actually)\n\tthis.CPUStopped = false;\t\t\t\t\t//CPU STOP status.\n\t//Main RAM, MBC RAM, GBC Main RAM, VRAM, etc.\n\tthis.memoryReader = [];\t\t\t\t\t\t//Array of functions mapped to read back memory\n\tthis.memoryWriter = [];\t\t\t\t\t\t//Array of functions mapped to write to memory\n\tthis.memoryHighReader = [];\t\t\t\t\t//Array of functions mapped to read back 0xFFXX memory\n\tthis.memoryHighWriter = [];\t\t\t\t\t//Array of functions mapped to write to 0xFFXX memory\n\tthis.ROM = [];\t\t\t\t\t\t\t\t//The full ROM file dumped to an array.\n\tthis.memory = [];\t\t\t\t\t\t\t//Main Core Memory\n\tthis.MBCRam = [];\t\t\t\t\t\t\t//Switchable RAM (Used by games for more RAM) for the main memory range 0xA000 - 0xC000.\n\tthis.VRAM = [];\t\t\t\t\t\t\t\t//Extra VRAM bank for GBC.\n\tthis.GBCMemory = [];\t\t\t\t\t\t//GBC main RAM Banks\n\tthis.MBC1Mode = false;\t\t\t\t\t\t//MBC1 Type (4/32, 16/8)\n\tthis.MBCRAMBanksEnabled = false;\t\t\t//MBC RAM Access Control.\n\tthis.currMBCRAMBank = 0;\t\t\t\t\t//MBC Currently Indexed RAM Bank\n\tthis.currMBCRAMBankPosition = -0xA000;\t\t//MBC Position Adder;\n\tthis.cGBC = false;\t\t\t\t\t\t\t//GameBoy Color detection.\n\tthis.gbcRamBank = 1;\t\t\t\t\t\t//Currently Switched GameBoy Color ram bank\n\tthis.gbcRamBankPosition = -0xD000;\t\t\t//GBC RAM offset from address start.\n\tthis.gbcRamBankPositionECHO = -0xF000;\t\t//GBC RAM (ECHO mirroring) offset from address start.\n\tthis.RAMBanks = [0, 1, 2, 4, 16];\t\t\t//Used to map the RAM banks to maximum size the MBC used can do.\n\tthis.ROMBank1offs = 0;\t\t\t\t\t\t//Offset of the ROM bank switching.\n\tthis.currentROMBank = 0;\t\t\t\t\t//The parsed current ROM bank selection.\n\tthis.cartridgeType = 0;\t\t\t\t\t\t//Cartridge Type\n\tthis.name = \"\";\t\t\t\t\t\t\t\t//Name of the game\n\tthis.gameCode = \"\";\t\t\t\t\t\t\t//Game code (Suffix for older games)\n\tthis.fromSaveState = false;\t\t\t\t\t//A boolean to see if this was loaded in as a save state.\n\tthis.savedStateFileName = \"\";\t\t\t\t//When loaded in as a save state, this will not be empty.\n\tthis.STATTracker = 0;\t\t\t\t\t\t//Tracker for STAT triggering.\n\tthis.modeSTAT = 0;\t\t\t\t\t\t\t//The scan line mode (for lines 1-144 it's 2-3-0, for 145-154 it's 1)\n\tthis.spriteCount = 252;\t\t\t\t\t\t//Mode 3 extra clocking counter (Depends on how many sprites are on the current line.).\n\tthis.LYCMatchTriggerSTAT = false;\t\t\t//Should we trigger an interrupt if LY==LYC?\n\tthis.mode2TriggerSTAT = false;\t\t\t\t//Should we trigger an interrupt if in mode 2?\n\tthis.mode1TriggerSTAT = false;\t\t\t\t//Should we trigger an interrupt if in mode 1?\n\tthis.mode0TriggerSTAT = false;\t\t\t\t//Should we trigger an interrupt if in mode 0?\n\tthis.LCDisOn = false;\t\t\t\t\t\t//Is the emulated LCD controller on?\n\tthis.LINECONTROL = [];\t\t\t\t\t\t//Array of functions to handle each scan line we do (onscreen + offscreen)\n\tthis.DISPLAYOFFCONTROL = [function (parentObj) {\n\t\t//Array of line 0 function to handle the LCD controller when it's off (Do nothing!).\n\t}];\n\tthis.LCDCONTROL = null;\t\t\t\t\t\t//Pointer to either LINECONTROL or DISPLAYOFFCONTROL.\n\tthis.initializeLCDController();\t\t\t\t//Compile the LCD controller functions.\n\t//RTC (Real Time Clock for MBC3):\n\tthis.RTCisLatched = false;\n\tthis.latchedSeconds = 0;\t\t\t\t\t//RTC latched seconds.\n\tthis.latchedMinutes = 0;\t\t\t\t\t//RTC latched minutes.\n\tthis.latchedHours = 0;\t\t\t\t\t\t//RTC latched hours.\n\tthis.latchedLDays = 0;\t\t\t\t\t\t//RTC latched lower 8-bits of the day counter.\n\tthis.latchedHDays = 0;\t\t\t\t\t\t//RTC latched high-bit of the day counter.\n\tthis.RTCSeconds = 0;\t\t\t\t\t\t//RTC seconds counter.\n\tthis.RTCMinutes = 0;\t\t\t\t\t\t//RTC minutes counter.\n\tthis.RTCHours = 0;\t\t\t\t\t\t\t//RTC hours counter.\n\tthis.RTCDays = 0;\t\t\t\t\t\t\t//RTC days counter.\n\tthis.RTCDayOverFlow = false;\t\t\t\t//Did the RTC overflow and wrap the day counter?\n\tthis.RTCHALT = false;\t\t\t\t\t\t//Is the RTC allowed to clock up?\n\t//Gyro:\n\tthis.highX = 127;\n\tthis.lowX = 127;\n\tthis.highY = 127;\n\tthis.lowY = 127;\n\t//Sound variables:\n\tthis.audioHandle = null;\t\t\t\t\t\t//XAudioJS handle\n\tthis.numSamplesTotal = 0;\t\t\t\t\t\t//Length of the sound buffers.\n\tthis.dutyLookup = [\t\t\t\t\t\t\t\t//Map the duty values given to ones we can work with.\n\t\t[false, false, false, false, false, false, false, true],\n\t\t[true, false, false, false, false, false, false, true],\n\t\t[true, false, false, false, false, true, true, true],\n\t\t[false, true, true, true, true, true, true, false]\n\t];\n\tthis.bufferContainAmount = 0;\t\t\t\t\t//Buffer maintenance metric.\n\tthis.LSFR15Table = null;\n\tthis.LSFR7Table = null;\n\tthis.noiseSampleTable = null;\n\tthis.initializeAudioStartState();\n\tthis.soundMasterEnabled = false;\t\t\t//As its name implies\n\tthis.channel3PCM = null;\t\t\t\t\t//Channel 3 adjusted sample buffer.\n\t//Vin Shit:\n\tthis.VinLeftChannelMasterVolume = 8;\t\t//Computed post-mixing volume.\n\tthis.VinRightChannelMasterVolume = 8;\t\t//Computed post-mixing volume.\n\t//Channel paths enabled:\n\tthis.leftChannel1 = false;\n\tthis.leftChannel2 = false;\n\tthis.leftChannel3 = false;\n\tthis.leftChannel4 = false;\n\tthis.rightChannel1 = false;\n\tthis.rightChannel2 = false;\n\tthis.rightChannel3 = false;\n\tthis.rightChannel4 = false;\n\tthis.audioClocksUntilNextEvent = 1;\n\tthis.audioClocksUntilNextEventCounter = 1;\n\t//Channel output level caches:\n\tthis.channel1currentSampleLeft = 0;\n\tthis.channel1currentSampleRight = 0;\n\tthis.channel2currentSampleLeft = 0;\n\tthis.channel2currentSampleRight = 0;\n\tthis.channel3currentSampleLeft = 0;\n\tthis.channel3currentSampleRight = 0;\n\tthis.channel4currentSampleLeft = 0;\n\tthis.channel4currentSampleRight = 0;\n\tthis.channel1currentSampleLeftSecondary = 0;\n\tthis.channel1currentSampleRightSecondary = 0;\n\tthis.channel2currentSampleLeftSecondary = 0;\n\tthis.channel2currentSampleRightSecondary = 0;\n\tthis.channel3currentSampleLeftSecondary = 0;\n\tthis.channel3currentSampleRightSecondary = 0;\n\tthis.channel4currentSampleLeftSecondary = 0;\n\tthis.channel4currentSampleRightSecondary = 0;\n\tthis.channel1currentSampleLeftTrimary = 0;\n\tthis.channel1currentSampleRightTrimary = 0;\n\tthis.channel2currentSampleLeftTrimary = 0;\n\tthis.channel2currentSampleRightTrimary = 0;\n\tthis.mixerOutputCache = 0;\n\t//Pre-multipliers to cache some calculations:\n\tthis.emulatorSpeed = 1;\n\tthis.initializeTiming();\n\t//Audio generation counters:\n\tthis.audioTicks = 0;\t\t\t\t//Used to sample the audio system every x CPU instructions.\n\tthis.audioIndex = 0;\t\t\t\t//Used to keep alignment on audio generation.\n\tthis.downsampleInput = 0;\n\tthis.audioDestinationPosition = 0;\t//Used to keep alignment on audio generation.\n\tthis.rollover = 0;\t\t\t\t\t//Used to keep alignment on the number of samples to output (Realign from counter alias).\n\t//Timing Variables\n\tthis.emulatorTicks = 0;\t\t\t\t//Times for how many instructions to execute before ending the loop.\n\tthis.DIVTicks = 56;\t\t\t\t\t//DIV Ticks Counter (Invisible lower 8-bit)\n\tthis.LCDTicks = 60;\t\t\t\t\t//Counter for how many instructions have been executed on a scanline so far.\n\tthis.timerTicks = 0;\t\t\t\t//Counter for the TIMA timer.\n\tthis.TIMAEnabled = false;\t\t\t//Is TIMA enabled?\n\tthis.TACClocker = 1024;\t\t\t\t//Timer Max Ticks\n\tthis.serialTimer = 0;\t\t\t\t//Serial IRQ Timer\n\tthis.serialShiftTimer = 0;\t\t\t//Serial Transfer Shift Timer\n\tthis.serialShiftTimerAllocated = 0;\t//Serial Transfer Shift Timer Refill\n\tthis.IRQEnableDelay = 0;\t\t\t//Are the interrupts on queue to be enabled?\n\tvar dateVar = new Date();\n\tthis.lastIteration = dateVar.getTime();//The last time we iterated the main loop.\n\tdateVar = new Date();\n\tthis.firstIteration = dateVar.getTime();\n\tthis.iterations = 0;\n\tthis.actualScanLine = 0;\t\t\t//Actual scan line...\n\tthis.lastUnrenderedLine = 0;\t\t//Last rendered scan line...\n\tthis.queuedScanLines = 0;\n\tthis.totalLinesPassed = 0;\n\tthis.haltPostClocks = 0;\t\t\t//Post-Halt clocking.\n\t//ROM Cartridge Components:\n\tthis.cMBC1 = false;\t\t\t\t\t//Does the cartridge use MBC1?\n\tthis.cMBC2 = false;\t\t\t\t\t//Does the cartridge use MBC2?\n\tthis.cMBC3 = false;\t\t\t\t\t//Does the cartridge use MBC3?\n\tthis.cMBC5 = false;\t\t\t\t\t//Does the cartridge use MBC5?\n\tthis.cMBC7 = false;\t\t\t\t\t//Does the cartridge use MBC7?\n\tthis.cSRAM = false;\t\t\t\t\t//Does the cartridge use save RAM?\n\tthis.cMMMO1 = false;\t\t\t\t//...\n\tthis.cRUMBLE = false;\t\t\t\t//Does the cartridge use the RUMBLE addressing (modified MBC5)?\n\tthis.cCamera = false;\t\t\t\t//Is the cartridge actually a GameBoy Camera?\n\tthis.cTAMA5 = false;\t\t\t\t//Does the cartridge use TAMA5? (Tamagotchi Cartridge)\n\tthis.cHuC3 = false;\t\t\t\t\t//Does the cartridge use HuC3 (Hudson Soft / modified MBC3)?\n\tthis.cHuC1 = false;\t\t\t\t\t//Does the cartridge use HuC1 (Hudson Soft / modified MBC1)?\n\tthis.cTIMER = false;\t\t\t\t//Does the cartridge have an RTC?\n\tthis.ROMBanks = [\t\t\t\t\t// 1 Bank = 16 KBytes = 256 Kbits\n\t\t2, 4, 8, 16, 32, 64, 128, 256, 512\n\t];\n\tthis.ROMBanks[0x52] = 72;\n\tthis.ROMBanks[0x53] = 80;\n\tthis.ROMBanks[0x54] = 96;\n\tthis.numRAMBanks = 0;\t\t\t\t\t//How many RAM banks were actually allocated?\n\t////Graphics Variables\n\tthis.currVRAMBank = 0;\t\t\t\t\t//Current VRAM bank for GBC.\n\tthis.backgroundX = 0;\t\t\t\t\t//Register SCX (X-Scroll)\n\tthis.backgroundY = 0;\t\t\t\t\t//Register SCY (Y-Scroll)\n\tthis.gfxWindowDisplay = false;\t\t\t//Is the windows enabled?\n\tthis.gfxSpriteShow = false;\t\t\t\t//Are sprites enabled?\n\tthis.gfxSpriteNormalHeight = true;\t\t//Are we doing 8x8 or 8x16 sprites?\n\tthis.bgEnabled = true;\t\t\t\t\t//Is the BG enabled?\n\tthis.BGPriorityEnabled = true;\t\t\t//Can we flag the BG for priority over sprites?\n\tthis.gfxWindowCHRBankPosition = 0;\t\t//The current bank of the character map the window uses.\n\tthis.gfxBackgroundCHRBankPosition = 0;\t//The current bank of the character map the BG uses.\n\tthis.gfxBackgroundBankOffset = 0x80;\t//Fast mapping of the tile numbering/\n\tthis.windowY = 0;\t\t\t\t\t\t//Current Y offset of the window.\n\tthis.windowX = 0;\t\t\t\t\t\t//Current X offset of the window.\n\tthis.drewBlank = 0;\t\t\t\t\t\t//To prevent the repeating of drawing a blank screen.\n\tthis.drewFrame = false;\t\t\t\t\t//Throttle how many draws we can do to once per iteration.\n\tthis.midScanlineOffset = -1;\t\t\t//mid-scanline rendering offset.\n\tthis.pixelEnd = 0;\t\t\t\t\t\t//track the x-coord limit for line rendering (mid-scanline usage).\n\tthis.currentX = 0;\t\t\t\t\t\t//The x-coord we left off at for mid-scanline rendering.\n\t//BG Tile Pointer Caches:\n\tthis.BGCHRBank1 = null;\n\tthis.BGCHRBank2 = null;\n\tthis.BGCHRCurrentBank = null;\n\t//Tile Data Cache:\n\tthis.tileCache = null;\n\t//Palettes:\n\tthis.colors = [0xEFFFDE, 0xADD794, 0x529273, 0x183442];\t\t\t//\"Classic\" GameBoy palette colors.\n\tthis.OBJPalette = null;\n\tthis.BGPalette = null;\n\tthis.gbcOBJRawPalette = null;\n\tthis.gbcBGRawPalette = null;\n\tthis.gbOBJPalette = null;\n\tthis.gbBGPalette = null;\n\tthis.gbcOBJPalette = null;\n\tthis.gbcBGPalette = null;\n\tthis.gbBGColorizedPalette = null;\n\tthis.gbOBJColorizedPalette = null;\n\tthis.cachedBGPaletteConversion = null;\n\tthis.cachedOBJPaletteConversion = null;\n\tthis.updateGBBGPalette = this.updateGBRegularBGPalette;\n\tthis.updateGBOBJPalette = this.updateGBRegularOBJPalette;\n\tthis.colorizedGBPalettes = false;\n\tthis.BGLayerRender = null;\t\t\t//Reference to the BG rendering function.\n\tthis.WindowLayerRender = null;\t\t//Reference to the window rendering function.\n\tthis.SpriteLayerRender = null;\t\t//Reference to the OAM rendering function.\n\tthis.frameBuffer = [];\t\t\t\t//The internal frame-buffer.\n\tthis.swizzledFrame = null;\t\t\t//The secondary gfx buffer that holds the converted RGBA values.\n\tthis.canvasBuffer = null;\t\t\t//imageData handle\n\tthis.pixelStart = 0;\t\t\t\t//Temp variable for holding the current working framebuffer offset.\n\t//Variables used for scaling in JS:\n\tthis.onscreenWidth = this.offscreenWidth = 160;\n\tthis.onscreenHeight = this.offScreenheight = 144;\n\tthis.offscreenRGBCount = this.onscreenWidth * this.onscreenHeight * 4;\n\tthis.resizePathClear = true;\n\t//Initialize the white noise cache tables ahead of time:\n\tthis.intializeWhiteNoise();\n\n}\n\nmodule.exports = Instance;","var settings = [\t\t\t\t\t\t//Some settings.\n\t  true,//false, \t\t\t\t\t\t\t\t//Turn on sound.\n\ttrue,\t\t\t\t\t\t\t\t//Boot with boot ROM first?\n\tfalse,\t\t\t\t\t\t\t\t//Give priority to GameBoy mode\n\t1,\t\t\t\t\t\t\t\t\t//Volume level set.\n\ttrue,\t\t\t\t\t\t\t\t//Colorize GB mode?\n\tfalse,\t\t\t\t\t\t\t\t//Disallow typed arrays?\n\t8,\t\t\t\t\t\t\t\t\t//Interval for the emulator loop.\n\t10,\t\t\t\t\t\t\t\t\t//Audio buffer minimum span amount over x interpreter iterations.\n\t20,\t\t\t\t\t\t\t\t\t//Audio buffer maximum span amount over x interpreter iterations.\n\tfalse,\t\t\t\t\t\t\t\t//Override to allow for MBC1 instead of ROM only (compatibility for broken 3rd-party cartridges).\n\tfalse,\t\t\t\t\t\t\t\t//Override MBC RAM disabling and always allow reading and writing to the banks.\n\tfalse,\t\t\t\t\t\t\t\t//Use the GameBoy boot ROM instead of the GameBoy Color boot ROM.\n\tfalse,\t\t\t\t\t\t\t\t//Scale the canvas in JS, or let the browser scale the canvas?\n\ttrue,\t\t\t\t\t\t\t\t//Use image smoothing based scaling?\n    [true, true, true, true]            //User controlled channel enables.\n];\n\nmodule.exports = settings;\n","var saveState = function () {\n\treturn [\n\t\tthis.fromTypedArray(this.ROM),\n\t\tthis.inBootstrap,\n\t\tthis.registerA,\n\t\tthis.FZero,\n\t\tthis.FSubtract,\n\t\tthis.FHalfCarry,\n\t\tthis.FCarry,\n\t\tthis.registerB,\n\t\tthis.registerC,\n\t\tthis.registerD,\n\t\tthis.registerE,\n\t\tthis.registersHL,\n\t\tthis.stackPointer,\n\t\tthis.programCounter,\n\t\tthis.halt,\n\t\tthis.IME,\n\t\tthis.hdmaRunning,\n\t\tthis.CPUTicks,\n\t\tthis.doubleSpeedShifter,\n\t\tthis.fromTypedArray(this.memory),\n\t\tthis.fromTypedArray(this.MBCRam),\n\t\tthis.fromTypedArray(this.VRAM),\n\t\tthis.currVRAMBank,\n\t\tthis.fromTypedArray(this.GBCMemory),\n\t\tthis.MBC1Mode,\n\t\tthis.MBCRAMBanksEnabled,\n\t\tthis.currMBCRAMBank,\n\t\tthis.currMBCRAMBankPosition,\n\t\tthis.cGBC,\n\t\tthis.gbcRamBank,\n\t\tthis.gbcRamBankPosition,\n\t\tthis.ROMBank1offs,\n\t\tthis.currentROMBank,\n\t\tthis.cartridgeType,\n\t\tthis.name,\n\t\tthis.gameCode,\n\t\tthis.modeSTAT,\n\t\tthis.LYCMatchTriggerSTAT,\n\t\tthis.mode2TriggerSTAT,\n\t\tthis.mode1TriggerSTAT,\n\t\tthis.mode0TriggerSTAT,\n\t\tthis.LCDisOn,\n\t\tthis.gfxWindowCHRBankPosition,\n\t\tthis.gfxWindowDisplay,\n\t\tthis.gfxSpriteShow,\n\t\tthis.gfxSpriteNormalHeight,\n\t\tthis.gfxBackgroundCHRBankPosition,\n\t\tthis.gfxBackgroundBankOffset,\n\t\tthis.TIMAEnabled,\n\t\tthis.DIVTicks,\n\t\tthis.LCDTicks,\n\t\tthis.timerTicks,\n\t\tthis.TACClocker,\n\t\tthis.serialTimer,\n\t\tthis.serialShiftTimer,\n\t\tthis.serialShiftTimerAllocated,\n\t\tthis.IRQEnableDelay,\n\t\tthis.lastIteration,\n\t\tthis.cMBC1,\n\t\tthis.cMBC2,\n\t\tthis.cMBC3,\n\t\tthis.cMBC5,\n\t\tthis.cMBC7,\n\t\tthis.cSRAM,\n\t\tthis.cMMMO1,\n\t\tthis.cRUMBLE,\n\t\tthis.cCamera,\n\t\tthis.cTAMA5,\n\t\tthis.cHuC3,\n\t\tthis.cHuC1,\n\t\tthis.drewBlank,\n\t\tthis.fromTypedArray(this.frameBuffer),\n\t\tthis.bgEnabled,\n\t\tthis.BGPriorityEnabled,\n\t\tthis.channel1FrequencyTracker,\n\t\tthis.channel1FrequencyCounter,\n\t\tthis.channel1totalLength,\n\t\tthis.channel1envelopeVolume,\n\t\tthis.channel1envelopeType,\n\t\tthis.channel1envelopeSweeps,\n\t\tthis.channel1envelopeSweepsLast,\n\t\tthis.channel1consecutive,\n\t\tthis.channel1frequency,\n\t\tthis.channel1SweepFault,\n\t\tthis.channel1ShadowFrequency,\n\t\tthis.channel1timeSweep,\n\t\tthis.channel1lastTimeSweep,\n\t\tthis.channel1Swept,\n\t\tthis.channel1frequencySweepDivider,\n\t\tthis.channel1decreaseSweep,\n\t\tthis.channel2FrequencyTracker,\n\t\tthis.channel2FrequencyCounter,\n\t\tthis.channel2totalLength,\n\t\tthis.channel2envelopeVolume,\n\t\tthis.channel2envelopeType,\n\t\tthis.channel2envelopeSweeps,\n\t\tthis.channel2envelopeSweepsLast,\n\t\tthis.channel2consecutive,\n\t\tthis.channel2frequency,\n\t\tthis.channel3canPlay,\n\t\tthis.channel3totalLength,\n\t\tthis.channel3patternType,\n\t\tthis.channel3frequency,\n\t\tthis.channel3consecutive,\n\t\tthis.fromTypedArray(this.channel3PCM),\n\t\tthis.channel4FrequencyPeriod,\n\t\tthis.channel4lastSampleLookup,\n\t\tthis.channel4totalLength,\n\t\tthis.channel4envelopeVolume,\n\t\tthis.channel4currentVolume,\n\t\tthis.channel4envelopeType,\n\t\tthis.channel4envelopeSweeps,\n\t\tthis.channel4envelopeSweepsLast,\n\t\tthis.channel4consecutive,\n\t\tthis.channel4BitRange,\n\t\tthis.soundMasterEnabled,\n\t\tthis.VinLeftChannelMasterVolume,\n\t\tthis.VinRightChannelMasterVolume,\n\t\tthis.leftChannel1,\n\t\tthis.leftChannel2,\n\t\tthis.leftChannel3,\n\t\tthis.leftChannel4,\n\t\tthis.rightChannel1,\n\t\tthis.rightChannel2,\n\t\tthis.rightChannel3,\n\t\tthis.rightChannel4,\n\t\tthis.channel1currentSampleLeft,\n\t\tthis.channel1currentSampleRight,\n\t\tthis.channel2currentSampleLeft,\n\t\tthis.channel2currentSampleRight,\n\t\tthis.channel3currentSampleLeft,\n\t\tthis.channel3currentSampleRight,\n\t\tthis.channel4currentSampleLeft,\n\t\tthis.channel4currentSampleRight,\n\t\tthis.channel1currentSampleLeftSecondary,\n\t\tthis.channel1currentSampleRightSecondary,\n\t\tthis.channel2currentSampleLeftSecondary,\n\t\tthis.channel2currentSampleRightSecondary,\n\t\tthis.channel3currentSampleLeftSecondary,\n\t\tthis.channel3currentSampleRightSecondary,\n\t\tthis.channel4currentSampleLeftSecondary,\n\t\tthis.channel4currentSampleRightSecondary,\n\t\tthis.channel1currentSampleLeftTrimary,\n\t\tthis.channel1currentSampleRightTrimary,\n\t\tthis.channel2currentSampleLeftTrimary,\n\t\tthis.channel2currentSampleRightTrimary,\n\t\tthis.mixerOutputCache,\n\t\tthis.channel1DutyTracker,\n\t\tthis.channel1CachedDuty,\n\t\tthis.channel2DutyTracker,\n\t\tthis.channel2CachedDuty,\n\t\tthis.channel1Enabled,\n\t\tthis.channel2Enabled,\n\t\tthis.channel3Enabled,\n\t\tthis.channel4Enabled,\n\t\tthis.sequencerClocks,\n\t\tthis.sequencePosition,\n\t\tthis.channel3Counter,\n\t\tthis.channel4Counter,\n\t\tthis.cachedChannel3Sample,\n\t\tthis.cachedChannel4Sample,\n\t\tthis.channel3FrequencyPeriod,\n\t\tthis.channel3lastSampleLookup,\n\t\tthis.actualScanLine,\n\t\tthis.lastUnrenderedLine,\n\t\tthis.queuedScanLines,\n\t\tthis.RTCisLatched,\n\t\tthis.latchedSeconds,\n\t\tthis.latchedMinutes,\n\t\tthis.latchedHours,\n\t\tthis.latchedLDays,\n\t\tthis.latchedHDays,\n\t\tthis.RTCSeconds,\n\t\tthis.RTCMinutes,\n\t\tthis.RTCHours,\n\t\tthis.RTCDays,\n\t\tthis.RTCDayOverFlow,\n\t\tthis.RTCHALT,\n\t\tthis.usedBootROM,\n\t\tthis.skipPCIncrement,\n\t\tthis.STATTracker,\n\t\tthis.gbcRamBankPositionECHO,\n\t\tthis.numRAMBanks,\n\t\tthis.windowY,\n\t\tthis.windowX,\n\t\tthis.fromTypedArray(this.gbcOBJRawPalette),\n\t\tthis.fromTypedArray(this.gbcBGRawPalette),\n\t\tthis.fromTypedArray(this.gbOBJPalette),\n\t\tthis.fromTypedArray(this.gbBGPalette),\n\t\tthis.fromTypedArray(this.gbcOBJPalette),\n\t\tthis.fromTypedArray(this.gbcBGPalette),\n\t\tthis.fromTypedArray(this.gbBGColorizedPalette),\n\t\tthis.fromTypedArray(this.gbOBJColorizedPalette),\n\t\tthis.fromTypedArray(this.cachedBGPaletteConversion),\n\t\tthis.fromTypedArray(this.cachedOBJPaletteConversion),\n\t\tthis.fromTypedArray(this.BGCHRBank1),\n\t\tthis.fromTypedArray(this.BGCHRBank2),\n\t\tthis.haltPostClocks,\n\t\tthis.interruptsRequested,\n\t\tthis.interruptsEnabled,\n\t\tthis.remainingClocks,\n\t\tthis.colorizedGBPalettes,\n\t\tthis.backgroundY,\n\t\tthis.backgroundX,\n\t\tthis.CPUStopped,\n\t\tthis.audioClocksUntilNextEvent,\n\t\tthis.audioClocksUntilNextEventCounter\n\t];\n}\nvar returnFromState = function (returnedFrom) {\n\tvar index = 0;\n\tvar state = returnedFrom.slice(0);\n\tthis.ROM = this.toTypedArray(state[index++], \"uint8\");\n\tthis.ROMBankEdge = Math.floor(this.ROM.length / 0x4000);\n\tthis.inBootstrap = state[index++];\n\tthis.registerA = state[index++];\n\tthis.FZero = state[index++];\n\tthis.FSubtract = state[index++];\n\tthis.FHalfCarry = state[index++];\n\tthis.FCarry = state[index++];\n\tthis.registerB = state[index++];\n\tthis.registerC = state[index++];\n\tthis.registerD = state[index++];\n\tthis.registerE = state[index++];\n\tthis.registersHL = state[index++];\n\tthis.stackPointer = state[index++];\n\tthis.programCounter = state[index++];\n\tthis.halt = state[index++];\n\tthis.IME = state[index++];\n\tthis.hdmaRunning = state[index++];\n\tthis.CPUTicks = state[index++];\n\tthis.doubleSpeedShifter = state[index++];\n\tthis.memory = this.toTypedArray(state[index++], \"uint8\");\n\tthis.MBCRam = this.toTypedArray(state[index++], \"uint8\");\n\tthis.VRAM = this.toTypedArray(state[index++], \"uint8\");\n\tthis.currVRAMBank = state[index++];\n\tthis.GBCMemory = this.toTypedArray(state[index++], \"uint8\");\n\tthis.MBC1Mode = state[index++];\n\tthis.MBCRAMBanksEnabled = state[index++];\n\tthis.currMBCRAMBank = state[index++];\n\tthis.currMBCRAMBankPosition = state[index++];\n\tthis.cGBC = state[index++];\n\tthis.gbcRamBank = state[index++];\n\tthis.gbcRamBankPosition = state[index++];\n\tthis.ROMBank1offs = state[index++];\n\tthis.currentROMBank = state[index++];\n\tthis.cartridgeType = state[index++];\n\tthis.name = state[index++];\n\tthis.gameCode = state[index++];\n\tthis.modeSTAT = state[index++];\n\tthis.LYCMatchTriggerSTAT = state[index++];\n\tthis.mode2TriggerSTAT = state[index++];\n\tthis.mode1TriggerSTAT = state[index++];\n\tthis.mode0TriggerSTAT = state[index++];\n\tthis.LCDisOn = state[index++];\n\tthis.gfxWindowCHRBankPosition = state[index++];\n\tthis.gfxWindowDisplay = state[index++];\n\tthis.gfxSpriteShow = state[index++];\n\tthis.gfxSpriteNormalHeight = state[index++];\n\tthis.gfxBackgroundCHRBankPosition = state[index++];\n\tthis.gfxBackgroundBankOffset = state[index++];\n\tthis.TIMAEnabled = state[index++];\n\tthis.DIVTicks = state[index++];\n\tthis.LCDTicks = state[index++];\n\tthis.timerTicks = state[index++];\n\tthis.TACClocker = state[index++];\n\tthis.serialTimer = state[index++];\n\tthis.serialShiftTimer = state[index++];\n\tthis.serialShiftTimerAllocated = state[index++];\n\tthis.IRQEnableDelay = state[index++];\n\tthis.lastIteration = state[index++];\n\tthis.cMBC1 = state[index++];\n\tthis.cMBC2 = state[index++];\n\tthis.cMBC3 = state[index++];\n\tthis.cMBC5 = state[index++];\n\tthis.cMBC7 = state[index++];\n\tthis.cSRAM = state[index++];\n\tthis.cMMMO1 = state[index++];\n\tthis.cRUMBLE = state[index++];\n\tthis.cCamera = state[index++];\n\tthis.cTAMA5 = state[index++];\n\tthis.cHuC3 = state[index++];\n\tthis.cHuC1 = state[index++];\n\tthis.drewBlank = state[index++];\n\tthis.frameBuffer = this.toTypedArray(state[index++], \"int32\");\n\tthis.bgEnabled = state[index++];\n\tthis.BGPriorityEnabled = state[index++];\n\tthis.channel1FrequencyTracker = state[index++];\n\tthis.channel1FrequencyCounter = state[index++];\n\tthis.channel1totalLength = state[index++];\n\tthis.channel1envelopeVolume = state[index++];\n\tthis.channel1envelopeType = state[index++];\n\tthis.channel1envelopeSweeps = state[index++];\n\tthis.channel1envelopeSweepsLast = state[index++];\n\tthis.channel1consecutive = state[index++];\n\tthis.channel1frequency = state[index++];\n\tthis.channel1SweepFault = state[index++];\n\tthis.channel1ShadowFrequency = state[index++];\n\tthis.channel1timeSweep = state[index++];\n\tthis.channel1lastTimeSweep = state[index++];\n\tthis.channel1Swept = state[index++];\n\tthis.channel1frequencySweepDivider = state[index++];\n\tthis.channel1decreaseSweep = state[index++];\n\tthis.channel2FrequencyTracker = state[index++];\n\tthis.channel2FrequencyCounter = state[index++];\n\tthis.channel2totalLength = state[index++];\n\tthis.channel2envelopeVolume = state[index++];\n\tthis.channel2envelopeType = state[index++];\n\tthis.channel2envelopeSweeps = state[index++];\n\tthis.channel2envelopeSweepsLast = state[index++];\n\tthis.channel2consecutive = state[index++];\n\tthis.channel2frequency = state[index++];\n\tthis.channel3canPlay = state[index++];\n\tthis.channel3totalLength = state[index++];\n\tthis.channel3patternType = state[index++];\n\tthis.channel3frequency = state[index++];\n\tthis.channel3consecutive = state[index++];\n\tthis.channel3PCM = this.toTypedArray(state[index++], \"int8\");\n\tthis.channel4FrequencyPeriod = state[index++];\n\tthis.channel4lastSampleLookup = state[index++];\n\tthis.channel4totalLength = state[index++];\n\tthis.channel4envelopeVolume = state[index++];\n\tthis.channel4currentVolume = state[index++];\n\tthis.channel4envelopeType = state[index++];\n\tthis.channel4envelopeSweeps = state[index++];\n\tthis.channel4envelopeSweepsLast = state[index++];\n\tthis.channel4consecutive = state[index++];\n\tthis.channel4BitRange = state[index++];\n\tthis.soundMasterEnabled = state[index++];\n\tthis.VinLeftChannelMasterVolume = state[index++];\n\tthis.VinRightChannelMasterVolume = state[index++];\n\tthis.leftChannel1 = state[index++];\n\tthis.leftChannel2 = state[index++];\n\tthis.leftChannel3 = state[index++];\n\tthis.leftChannel4 = state[index++];\n\tthis.rightChannel1 = state[index++];\n\tthis.rightChannel2 = state[index++];\n\tthis.rightChannel3 = state[index++];\n\tthis.rightChannel4 = state[index++];\n\tthis.channel1currentSampleLeft = state[index++];\n\tthis.channel1currentSampleRight = state[index++];\n\tthis.channel2currentSampleLeft = state[index++];\n\tthis.channel2currentSampleRight = state[index++];\n\tthis.channel3currentSampleLeft = state[index++];\n\tthis.channel3currentSampleRight = state[index++];\n\tthis.channel4currentSampleLeft = state[index++];\n\tthis.channel4currentSampleRight = state[index++];\n\tthis.channel1currentSampleLeftSecondary = state[index++];\n\tthis.channel1currentSampleRightSecondary = state[index++];\n\tthis.channel2currentSampleLeftSecondary = state[index++];\n\tthis.channel2currentSampleRightSecondary = state[index++];\n\tthis.channel3currentSampleLeftSecondary = state[index++];\n\tthis.channel3currentSampleRightSecondary = state[index++];\n\tthis.channel4currentSampleLeftSecondary = state[index++];\n\tthis.channel4currentSampleRightSecondary = state[index++];\n\tthis.channel1currentSampleLeftTrimary = state[index++];\n\tthis.channel1currentSampleRightTrimary = state[index++];\n\tthis.channel2currentSampleLeftTrimary = state[index++];\n\tthis.channel2currentSampleRightTrimary = state[index++];\n\tthis.mixerOutputCache = state[index++];\n\tthis.channel1DutyTracker = state[index++];\n\tthis.channel1CachedDuty = state[index++];\n\tthis.channel2DutyTracker = state[index++];\n\tthis.channel2CachedDuty = state[index++];\n\tthis.channel1Enabled = state[index++];\n\tthis.channel2Enabled = state[index++];\n\tthis.channel3Enabled = state[index++];\n\tthis.channel4Enabled = state[index++];\n\tthis.sequencerClocks = state[index++];\n\tthis.sequencePosition = state[index++];\n\tthis.channel3Counter = state[index++];\n\tthis.channel4Counter = state[index++];\n\tthis.cachedChannel3Sample = state[index++];\n\tthis.cachedChannel4Sample = state[index++];\n\tthis.channel3FrequencyPeriod = state[index++];\n\tthis.channel3lastSampleLookup = state[index++];\n\tthis.actualScanLine = state[index++];\n\tthis.lastUnrenderedLine = state[index++];\n\tthis.queuedScanLines = state[index++];\n\tthis.RTCisLatched = state[index++];\n\tthis.latchedSeconds = state[index++];\n\tthis.latchedMinutes = state[index++];\n\tthis.latchedHours = state[index++];\n\tthis.latchedLDays = state[index++];\n\tthis.latchedHDays = state[index++];\n\tthis.RTCSeconds = state[index++];\n\tthis.RTCMinutes = state[index++];\n\tthis.RTCHours = state[index++];\n\tthis.RTCDays = state[index++];\n\tthis.RTCDayOverFlow = state[index++];\n\tthis.RTCHALT = state[index++];\n\tthis.usedBootROM = state[index++];\n\tthis.skipPCIncrement = state[index++];\n\tthis.STATTracker = state[index++];\n\tthis.gbcRamBankPositionECHO = state[index++];\n\tthis.numRAMBanks = state[index++];\n\tthis.windowY = state[index++];\n\tthis.windowX = state[index++];\n\tthis.gbcOBJRawPalette = this.toTypedArray(state[index++], \"uint8\");\n\tthis.gbcBGRawPalette = this.toTypedArray(state[index++], \"uint8\");\n\tthis.gbOBJPalette = this.toTypedArray(state[index++], \"int32\");\n\tthis.gbBGPalette = this.toTypedArray(state[index++], \"int32\");\n\tthis.gbcOBJPalette = this.toTypedArray(state[index++], \"int32\");\n\tthis.gbcBGPalette = this.toTypedArray(state[index++], \"int32\");\n\tthis.gbBGColorizedPalette = this.toTypedArray(state[index++], \"int32\");\n\tthis.gbOBJColorizedPalette = this.toTypedArray(state[index++], \"int32\");\n\tthis.cachedBGPaletteConversion = this.toTypedArray(state[index++], \"int32\");\n\tthis.cachedOBJPaletteConversion = this.toTypedArray(state[index++], \"int32\");\n\tthis.BGCHRBank1 = this.toTypedArray(state[index++], \"uint8\");\n\tthis.BGCHRBank2 = this.toTypedArray(state[index++], \"uint8\");\n\tthis.haltPostClocks = state[index++];\n\tthis.interruptsRequested = state[index++];\n\tthis.interruptsEnabled = state[index++];\n\tthis.checkIRQMatching();\n\tthis.remainingClocks = state[index++];\n\tthis.colorizedGBPalettes = state[index++];\n\tthis.backgroundY = state[index++];\n\tthis.backgroundX = state[index++];\n\tthis.CPUStopped = state[index++];\n\tthis.audioClocksUntilNextEvent = state[index++];\n\tthis.audioClocksUntilNextEventCounter = state[index];\n\tthis.fromSaveState = true;\n\tthis.TICKTable = this.toTypedArray(this.TICKTable, \"uint8\");\n\tthis.SecondaryTICKTable = this.toTypedArray(this.SecondaryTICKTable, \"uint8\");\n\tthis.initializeReferencesFromSaveState();\n\tthis.memoryReadJumpCompile();\n\tthis.memoryWriteJumpCompile();\n\tthis.initLCD();\n\tthis.initSound();\n\tthis.noiseSampleTable = (this.channel4BitRange == 0x7FFF) ? this.LSFR15Table : this.LSFR7Table;\n\tthis.channel4VolumeShifter = (this.channel4BitRange == 0x7FFF) ? 15 : 7;\n}\n\nmodule.exports.saveState = saveState;\nmodule.exports.returnFromState = returnFromState;","'use strict';\n\nmodule.exports = function () {\n  throw new Error(\n    'ws does not work in the browser. Browser clients must use the native ' +\n      'WebSocket object'\n  );\n};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","$cfae44f0dfdf62c0$var$cachedSetTimeout","$cfae44f0dfdf62c0$var$cachedClearTimeout","$cfae44f0dfdf62c0$var$currentQueue","$eeb0961446aae8e3$export$6100ba28696e12de","$7221566bd4d49f44$export$aafa59e2e03f2942","$7221566bd4d49f44$export$68d8715fc104d294","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$03e0fc754daed1f2$var$OPCODE","parentObj","registerC","memoryReader","programCounter","registerB","memoryRead","memoryWrite","registerA","temp_var","FZero","FHalfCarry","FSubtract","FCarry","stackPointer","dirtySum","registersHL","cGBC","memory","doubleSpeedShifter","handleSTOP","registerE","registerD","carry_flag","CPUTicks","memoryWriter","H","L","interruptsEnabled","interruptsRequested","usedBootROM","skipPCIncrement","calculateHALTPeriod","tempValue","temp_pc","opcode","SecondaryTICKTable","CBOPCODE","console","log","IRQEnableDelay","memoryHighWrite","memoryHighWriter","temp_value2","temp_value","memoryHighRead","memoryHighReader","IME","$7db07f2e1daabd29$var$CBOPCODE","newFCarry","$eca075ad100d834d$exports","$205d8b7d214f5014$exports","$cfae44f0dfdf62c0$exports","$cfae44f0dfdf62c0$var$process","$cfae44f0dfdf62c0$var$defaultSetTimout","$cfae44f0dfdf62c0$var$defaultClearTimeout","$cfae44f0dfdf62c0$var$runTimeout","fun","setTimeout","e","clearTimeout","$cfae44f0dfdf62c0$var$queue","$cfae44f0dfdf62c0$var$draining","$cfae44f0dfdf62c0$var$queueIndex","$cfae44f0dfdf62c0$var$cleanUpNextTick","length","concat","$cfae44f0dfdf62c0$var$drainQueue","timeout","len","run","$cfae44f0dfdf62c0$var$runClearTimeout","marker","$cfae44f0dfdf62c0$var$Item","array","$cfae44f0dfdf62c0$var$noop","nextTick","args","Array","arguments","i","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","$6de83094d3815a3f$exports","$a9f5d76ceefeeace$exports","ROMImage","frameDone","currentScreen","lastScreen","partialScreen","currentFrame","drawContext","CPUCyclesTotal","CPUCyclesTotalBase","CPUCyclesTotalCurrent","CPUCyclesTotalRoundoff","baseCPUCyclesPerIteration","remainingClocks","inBootstrap","usedGBCBootROM","halt","stopEmulator","IRQLineMatched","hdmaRunning","JoyPad","CPUStopped","ROM","MBCRam","VRAM","GBCMemory","MBC1Mode","MBCRAMBanksEnabled","currMBCRAMBank","currMBCRAMBankPosition","gbcRamBank","gbcRamBankPosition","gbcRamBankPositionECHO","RAMBanks","ROMBank1offs","currentROMBank","cartridgeType","gameCode","fromSaveState","savedStateFileName","STATTracker","modeSTAT","spriteCount","LYCMatchTriggerSTAT","mode2TriggerSTAT","mode1TriggerSTAT","mode0TriggerSTAT","LCDisOn","LINECONTROL","DISPLAYOFFCONTROL","LCDCONTROL","initializeLCDController","RTCisLatched","latchedSeconds","latchedMinutes","latchedHours","latchedLDays","latchedHDays","RTCSeconds","RTCMinutes","RTCHours","RTCDays","RTCDayOverFlow","RTCHALT","highX","lowX","highY","lowY","audioHandle","numSamplesTotal","dutyLookup","bufferContainAmount","LSFR15Table","LSFR7Table","noiseSampleTable","initializeAudioStartState","soundMasterEnabled","channel3PCM","VinLeftChannelMasterVolume","VinRightChannelMasterVolume","leftChannel1","leftChannel2","leftChannel3","leftChannel4","rightChannel1","rightChannel2","rightChannel3","rightChannel4","audioClocksUntilNextEvent","audioClocksUntilNextEventCounter","channel1currentSampleLeft","channel1currentSampleRight","channel2currentSampleLeft","channel2currentSampleRight","channel3currentSampleLeft","channel3currentSampleRight","channel4currentSampleLeft","channel4currentSampleRight","channel1currentSampleLeftSecondary","channel1currentSampleRightSecondary","channel2currentSampleLeftSecondary","channel2currentSampleRightSecondary","channel3currentSampleLeftSecondary","channel3currentSampleRightSecondary","channel4currentSampleLeftSecondary","channel4currentSampleRightSecondary","channel1currentSampleLeftTrimary","channel1currentSampleRightTrimary","channel2currentSampleLeftTrimary","channel2currentSampleRightTrimary","mixerOutputCache","emulatorSpeed","initializeTiming","audioTicks","audioIndex","downsampleInput","audioDestinationPosition","rollover","emulatorTicks","DIVTicks","LCDTicks","timerTicks","TIMAEnabled","TACClocker","serialTimer","serialShiftTimer","serialShiftTimerAllocated","dateVar","Date","lastIteration","getTime","firstIteration","iterations","actualScanLine","lastUnrenderedLine","queuedScanLines","totalLinesPassed","haltPostClocks","cMBC1","cMBC2","cMBC3","cMBC5","cMBC7","cSRAM","cMMMO1","cRUMBLE","cCamera","cTAMA5","cHuC3","cHuC1","cTIMER","ROMBanks","numRAMBanks","currVRAMBank","backgroundX","backgroundY","gfxWindowDisplay","gfxSpriteShow","gfxSpriteNormalHeight","bgEnabled","BGPriorityEnabled","gfxWindowCHRBankPosition","gfxBackgroundCHRBankPosition","gfxBackgroundBankOffset","windowY","windowX","drewBlank","drewFrame","midScanlineOffset","pixelEnd","currentX","BGCHRBank1","BGCHRBank2","BGCHRCurrentBank","tileCache","colors","OBJPalette","BGPalette","gbcOBJRawPalette","gbcBGRawPalette","gbOBJPalette","gbBGPalette","gbcOBJPalette","gbcBGPalette","gbBGColorizedPalette","gbOBJColorizedPalette","cachedBGPaletteConversion","cachedOBJPaletteConversion","updateGBBGPalette","updateGBRegularBGPalette","updateGBOBJPalette","updateGBRegularOBJPalette","colorizedGBPalettes","BGLayerRender","WindowLayerRender","SpriteLayerRender","frameBuffer","swizzledFrame","canvasBuffer","pixelStart","onscreenWidth","offscreenWidth","onscreenHeight","offScreenheight","offscreenRGBCount","resizePathClear","intializeWhiteNoise","$2a65eeefd956ad48$exports","$6de83094d3815a3f$var$GameBoyCore","ROMImageIsString","constructor","GBBOOTROM","GBCBOOTROM","ffxxDump","OPCODE","TICKTable","saveState","fromTypedArray","channel1FrequencyTracker","channel1FrequencyCounter","channel1totalLength","channel1envelopeVolume","channel1envelopeType","channel1envelopeSweeps","channel1envelopeSweepsLast","channel1consecutive","channel1frequency","channel1SweepFault","channel1ShadowFrequency","channel1timeSweep","channel1lastTimeSweep","channel1Swept","channel1frequencySweepDivider","channel1decreaseSweep","channel2FrequencyTracker","channel2FrequencyCounter","channel2totalLength","channel2envelopeVolume","channel2envelopeType","channel2envelopeSweeps","channel2envelopeSweepsLast","channel2consecutive","channel2frequency","channel3canPlay","channel3totalLength","channel3patternType","channel3frequency","channel3consecutive","channel4FrequencyPeriod","channel4lastSampleLookup","channel4totalLength","channel4envelopeVolume","channel4currentVolume","channel4envelopeType","channel4envelopeSweeps","channel4envelopeSweepsLast","channel4consecutive","channel4BitRange","channel1DutyTracker","channel1CachedDuty","channel2DutyTracker","channel2CachedDuty","channel1Enabled","channel2Enabled","channel3Enabled","channel4Enabled","sequencerClocks","sequencePosition","channel3Counter","channel4Counter","cachedChannel3Sample","cachedChannel4Sample","channel3FrequencyPeriod","channel3lastSampleLookup","saving","returnedFrom","index","state","slice","toTypedArray","ROMBankEdge","Math","floor","checkIRQMatching","initializeReferencesFromSaveState","memoryReadJumpCompile","memoryWriteJumpCompile","initLCD","initSound","channel4VolumeShifter","saveSRAMState","cBATT","saveRTCState","returnFromRTCState","openRTC","rtcData","start","initMemory","ROMLoad","getTypedArray","generateCacheArray","tileAmount","tileArray","tileNumber","initSkipBootstrap","initBootstrap","maxLength","romIndex","charCodeAt","interpretCartridge","getROMImage","String","fromCharCode","numROMBanks","setupRAM","initializeModeSpecificArrays","disableBootROM","recompileBootIOWriteHandling","GBCtoGBModeAdjust","clocksPerSecond","setSpeed","speed","MBCRAMUtilized","openMBC","recomputeDimension","offscreenHeight","compileResizeFrameBufferFunction","resizer","Uint8ClampedArray","error","message","data","requestDraw","graphicsBlit","currentScreenFixed","JoyPadEvent","key","down","GyroEvent","x","y","audioResamplerFirstPassFactor","max","min","downSampleInputDivider","initAudioBuffer","changeVolume","audioBuffer","randomFactor","LSFR","LSFRShifted","audioUnderrunAdjustment","channel1canPlay","channel2canPlay","channel4canPlay","channel1OutputLevelCache","channel2OutputLevelCache","channel3OutputLevelCache","channel4OutputLevelCache","outputAudio","generateAudio","numSamples","multiplier","clockUpTo","audioComputeSequencer","computeAudioChannels","generateAudioFake","audioJIT","clockAudioLength","clockAudioSweep","clockAudioEnvelope","channel1EnableCheck","channel2EnableCheck","channel3EnableCheck","channel4EnableCheck","runAudioSweep","channel1AudioSweepPerformDummy","channel4UpdateCache","channel1OutputLevelTrimaryCache","channel2OutputLevelTrimaryCache","channel3UpdateCache","channel1OutputLevelSecondaryCache","channel1VolumeEnableCheck","mixerOutputLevelCache","channel2OutputLevelSecondaryCache","channel2VolumeEnableCheck","channel3OutputLevelSecondaryCache","channel4OutputLevelSecondaryCache","channel4VolumeEnableCheck","channel3WriteRAM","address","clockUpdate","updateCore","iterationEndRoutine","executeIteration","opcodeToExecute","timedTicks","launchIRQ","recalculateIterationClockLimit","endModulus","recalculateIterationClockLimitForAudio","audioClocking","scanLineMode2","scanLineMode3","scanLineMode0","incrementScanLineQueue","updateSpriteCount","executeHDMA","clocksUntilLYCMatch","clocksUntilMode0","line","lineAdjusted","yoffset","yCap","OAMAddress","matchLYC","updateCoreFull","graphicsJITVBlank","prepareFrame","DisplayShowOff","clearFrameBuffer","DMAWrite","newTime","dateObj","timeElapsed","swizzleFrameBuffer","dispatchDraw","processDraw","resizeFrameBuffer","canvasRGBALength","canvasData","bufferIndex","canvasIndex","resize","Resize","buffer","renderScanLine","scanlineToRender","pixelLine","defaultColor","pixelPosition","renderMidScanLine","sortBuffer","OAMAddressCache","renderPathBuild","getGBCColor","priorityFlaggingPathRebuild","SpriteGBCLayerRender","BGGBLayerRender","WindowGBLayerRender","SpriteGBLayerRender","BGGBCLayerRender","WindowGBCLayerRender","BGGBCLayerRenderNoPriorityFlagging","WindowGBCLayerRenderNoPriorityFlagging","tileIndex","generateGBCTileBank1","generateGBCTileBank2","updateGBColorizedBGPalette","updateGBColorizedOBJPalette","generateGBOAMTileLine","generateGBTileLine","RGBTint","value","r","g","b","counter","adjustedIndex","updateGBCBGPalette","midScanLineJIT","updateGBCOBJPalette","scrollYAdjusted","tileYLine","tileYDown","scrollXAdjusted","pixelPositionEnd","chrCode","tile","texel","scrollXAdjustedAligned","attrCode","palette","scrollXRangeAdjusted","xcoord","xCoordStart","xCoordEnd","currentPixel","linePixel","findLowestSpriteDrawable","drawableRange","diff","endX","xCounter","lineCopy","tileBlock","generateGBCTileLineBank1","tileBlock1","tileBlock2","tileBlock3","tileBlock4","addressFlipped","vramAddress","generateGBCTileLineBank2","graphicsJIT","graphicsJITScanlineGroup","bitShift","testbit","currentClocks","maxClocks","memoryReadNormal","memoryReadROM","VRAMDATAReadCGBCPU","VRAMDATAReadDMGCPU","VRAMCHRReadCGBCPU","VRAMCHRReadDMGCPU","memoryReadMBC7","memoryReadMBC3","memoryReadMBC","memoryReadBAD","memoryReadGBCMemory","memoryReadECHONormal","memoryReadECHOGBCMemory","memoryReadOAM","memoryHighReadNormal","setCurrentMBC1ROMBank","setCurrentMBC2AND3ROMBank","setCurrentMBC5ROMBank","MBCWriteEnable","MBC1WriteROMBank","MBC1WriteRAMBank","MBC1WriteType","MBC2WriteROMBank","cartIgnoreWrite","MBC3WriteROMBank","MBC3WriteRAMBank","MBC3WriteRTCLatch","MBC5WriteROMBankLow","MBC5WriteROMBankHigh","RUMBLEWriteRAMBank","MBC5WriteRAMBank","HuC3WriteRAMBank","VRAMGBCDATAWrite","VRAMGBDATAWrite","VRAMGBDATAUpperWrite","VRAMGBCCHRMAPWrite","VRAMGBCHRMAPWrite","memoryWriteMBC3RAM","memoryWriteMBCRAM","memoryWriteGBCRAM","memoryWriteNormal","memoryWriteECHOGBCRAM","memoryWriteECHONormal","memoryWriteOAMRAM","memoryHighWriteNormal","registerWriteJumpCompile","RTCHalt","tilesToTransfer","source","destination","pow","nr12","nr22","bitWidth","nr42","recompileModelSpecificIOWriteHandling","stat","newData","next","addressCheck","baseArray","memtype","typedArrayTemp","Uint8Array","Int8Array","Int32Array","Float32Array","arrayTemp","defaultValue","numberType","arrayHandle","$205d8b7d214f5014$var$KEYMAP","RIGHT","LEFT","UP","DOWN","A","B","SELECT","START","$205d8b7d214f5014$var$PRIVATE","hrtime","join","$205d8b7d214f5014$var$Interface","_that","__proto__","_prototype","gameboy","frames","pressed","Object","keys","initialized","running","sendKey","keycode","shutdownEmulation","loadRom","saveData","doFrame","partial","pressKeys","that","pressKey","toUpperCase","getKeys","getScreen","getMemory","end","getAudio","getSaveData","setMemory","KEYMAP","$b491f7ab24cc727b$exports","uint8","tmp","extraBytes","parts","len2","$eeb0961446aae8e3$var$encodeChunk","output","$eeb0961446aae8e3$var$lookup","num","$eeb0961446aae8e3$var$revLookup","$eeb0961446aae8e3$var$Arr","$eeb0961446aae8e3$var$code","$eeb0961446aae8e3$var$i","$eeb0961446aae8e3$var$len","offset","isLE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","s","NaN","Infinity","c","rt","isNaN","abs","LN2","$51861dfc7ca9d588$var$customInspectSymbol","Symbol","$51861dfc7ca9d588$var$createBuffer","RangeError","buf","setPrototypeOf","$51861dfc7ca9d588$var$Buffer","arg","encodingOrOffset","TypeError","$51861dfc7ca9d588$var$allocUnsafe","$51861dfc7ca9d588$var$from","$51861dfc7ca9d588$var$fromString","string","encoding","isEncoding","$51861dfc7ca9d588$var$byteLength","actual","write","ArrayBuffer","isView","$51861dfc7ca9d588$var$fromArrayView","arrayView","$51861dfc7ca9d588$var$isInstance","copy","$51861dfc7ca9d588$var$fromArrayBuffer","byteOffset","byteLength","$51861dfc7ca9d588$var$fromArrayLike","SharedArrayBuffer","valueOf","from","$51861dfc7ca9d588$var$fromObject","obj","isBuffer","$51861dfc7ca9d588$var$checked","undefined","type","isArray","toPrimitive","$51861dfc7ca9d588$var$assertSize","size","mustMatch","loweredCase","$51861dfc7ca9d588$var$utf8ToBytes","$51861dfc7ca9d588$var$base64ToBytes","toLowerCase","$51861dfc7ca9d588$var$slowToString","$51861dfc7ca9d588$var$hexSlice","out","$51861dfc7ca9d588$var$hexSliceLookupTable","$51861dfc7ca9d588$var$utf8Slice","$51861dfc7ca9d588$var$asciiSlice","ret","$51861dfc7ca9d588$var$latin1Slice","$51861dfc7ca9d588$var$utf16leSlice","bytes","res","$51861dfc7ca9d588$var$swap","n","$51861dfc7ca9d588$var$bidirectionalIndexOf","val","$51861dfc7ca9d588$var$arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","j","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","$51861dfc7ca9d588$var$decodeCodePointsArray","codePoints","$51861dfc7ca9d588$var$checkOffset","ext","$51861dfc7ca9d588$var$checkInt","$51861dfc7ca9d588$var$wrtBigUInt64LE","$51861dfc7ca9d588$var$checkIntBI","lo","Number","BigInt","hi","$51861dfc7ca9d588$var$wrtBigUInt64BE","$51861dfc7ca9d588$var$checkIEEE754","$51861dfc7ca9d588$var$writeFloat","littleEndian","noAssert","$51861dfc7ca9d588$var$writeDouble","TYPED_ARRAY_SUPPORT","$51861dfc7ca9d588$var$typedArraySupport","proto","foo","defineProperty","enumerable","get","poolSize","alloc","fill","allocUnsafe","allocUnsafeSlow","_isBuffer","compare","list","pos","set","swap16","swap32","swap64","toString","toLocaleString","equals","inspect","str","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","remaining","$51861dfc7ca9d588$var$hexWrite","strLen","parsed","parseInt","substr","$51861dfc7ca9d588$var$blitBuffer","$51861dfc7ca9d588$var$asciiToBytes","byteArray","$51861dfc7ca9d588$var$utf16leToBytes","units","toJSON","_arr","newBuf","subarray","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","$51861dfc7ca9d588$var$defineBigIntMethod","$51861dfc7ca9d588$var$validateNumber","first","last","$51861dfc7ca9d588$var$boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","maxBytes","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","$51861dfc7ca9d588$var$errors","$51861dfc7ca9d588$var$E","sym","getMessage","Base","writable","configurable","stack","$51861dfc7ca9d588$var$addNumericalSeparator","range","ERR_OUT_OF_RANGE","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","$51861dfc7ca9d588$var$INVALID_BASE64_RE","leadSurrogate","$eeb0961446aae8e3$export$d622b2ad8d90c771","b64","lens","$eeb0961446aae8e3$var$getLens","validLen","placeHoldersLen","curByte","$51861dfc7ca9d588$var$base64clean","split","src","dst","alphabet","table","i16","fn","$51861dfc7ca9d588$var$BufferBigIntNotDefined","$b4e14b6b8da86996$var$wss","WebSocketServer","port","$b4e14b6b8da86996$var$buttons","$b4e14b6b8da86996$var$roms","$b4e14b6b8da86996$var$loadGame","gb","game","sav","file_path","rom","readFileSync","ws","ready","interval_id2","setInterval","interval_id1","pix","$b4e14b6b8da86996$require$Buffer","send","dat","substring","strs","clearInterval"],"version":3,"file":"index.09dbb957.js.map"}